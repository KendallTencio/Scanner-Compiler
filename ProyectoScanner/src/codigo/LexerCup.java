/* The following code was generated by JFlex 1.4.3 on 15/08/20 09:15 PM */

package codigo;
import java_cup.runtime.Symbol;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15/08/20 09:15 PM from the specification file
 * <tt>C:/Users/Franc/Documents/Uned Tec/tecDigital/2020 Semestre I/Compi/ProyectoScannerCompiladores/ProyectoScanner/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 65, 62,  0,  7, 65,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    65, 53, 63,  0,  0, 49, 45, 64, 50, 51, 10, 48, 37,  6,  4,  9, 
     8, 55, 57, 59, 58, 60, 56, 61, 54,  2, 42, 38, 35, 52, 36, 41, 
     0,  3,  3,  3,  3,  5,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 39,  0, 40, 46,  0, 
     0, 11, 15, 21, 12,  1, 26, 30, 27, 24,  0, 18, 17, 25, 22, 16, 
    29,  0, 13, 14, 20, 23, 31, 32, 28, 19, 33, 43, 34, 44, 47,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\1\1\2\1\3\1\4\1\5\1\2\1\6\1\7"+
    "\20\1\1\10\2\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\5\6\1\2\2\1\33"+
    "\1\31\1\34\1\5\2\35\1\36\1\1\1\37\2\1"+
    "\1\40\22\1\1\41\21\1\1\11\1\42\1\43\2\0"+
    "\1\2\1\0\3\1\1\2\2\0\1\1\1\34\2\0"+
    "\25\1\1\44\6\1\1\45\2\1\1\46\4\1\1\47"+
    "\2\1\1\50\1\1\1\0\1\2\1\51\1\1\1\52"+
    "\1\53\1\2\1\53\1\0\1\34\1\5\4\1\1\54"+
    "\6\1\1\55\1\56\1\1\1\57\1\60\1\54\2\1"+
    "\1\61\3\1\1\62\11\1\1\63\10\1\1\64\1\1"+
    "\1\0\1\53\1\0\11\1\1\65\1\66\6\1\1\67"+
    "\7\1\1\62\14\1\1\70\1\0\1\1\1\71\1\1"+
    "\1\72\1\1\1\73\1\74\1\1\3\75\5\1\1\67"+
    "\1\76\1\1\1\77\6\1\1\100\1\1\1\101\1\102"+
    "\1\103\1\104\6\1\1\105\4\1\1\106\1\107\1\110"+
    "\1\1\1\111\1\112\1\113\1\114\1\115\10\1\1\116"+
    "\4\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u077a\0\u077a"+
    "\0\u077a\0\u077a\0\u077a\0\u077a\0\u077a\0\u07bc\0\u07fe\0\u077a"+
    "\0\u0840\0\u077a\0\u077a\0\u077a\0\u0882\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0108\0\u0a92\0\u077a"+
    "\0\u077a\0\u0ad4\0\u0b16\0\u0b58\0\u077a\0\u077a\0\u0b9a\0\102"+
    "\0\u0bdc\0\u0c1e\0\102\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68"+
    "\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\102\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u077a"+
    "\0\u077a\0\u077a\0\u1566\0\u15a8\0\102\0\u15ea\0\u162c\0\u166e"+
    "\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u0b58\0\u183c"+
    "\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c"+
    "\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c"+
    "\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c"+
    "\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\102\0\u1fb6\0\u1ff8\0\u203a"+
    "\0\u207c\0\u20be\0\u2100\0\u2142\0\102\0\u2184\0\u21c6\0\102"+
    "\0\u2208\0\u224a\0\u077a\0\102\0\u228c\0\102\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u0b58\0\u2418\0\u245a\0\u249c\0\u24de"+
    "\0\102\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\102"+
    "\0\u26ac\0\u26ee\0\102\0\102\0\u2730\0\u2772\0\u27b4\0\u27f6"+
    "\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u28fe"+
    "\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\102\0\u2b50\0\u2b92"+
    "\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\102\0\u2d60"+
    "\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70"+
    "\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\102\0\u30ba\0\u30fc\0\u313e"+
    "\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e"+
    "\0\u3288\0\u3390\0\u33d2\0\u3414\0\102\0\u3456\0\u3498\0\u34da"+
    "\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea"+
    "\0\u372c\0\102\0\u376e\0\u37b0\0\102\0\u37f2\0\u3834\0\u3876"+
    "\0\102\0\102\0\u38b8\0\102\0\u38fa\0\u393c\0\u397e\0\u39c0"+
    "\0\u3a02\0\u3a44\0\u3a86\0\102\0\102\0\u3ac8\0\102\0\u3b0a"+
    "\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\102\0\u3c96\0\102"+
    "\0\u077a\0\102\0\102\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0"+
    "\0\u3e22\0\102\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\102\0\102"+
    "\0\102\0\u3f6c\0\102\0\102\0\102\0\102\0\102\0\u3fae"+
    "\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u413a\0\u417c\0\102"+
    "\0\u41be\0\u4200\0\u4242\0\u4284";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\3\2\1\20\1\21\1\22\1\2\1\23\1\24\1\25"+
    "\1\26\1\27\1\2\1\30\1\2\1\31\1\32\1\2"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\10\4\1\57\1\60\1\61"+
    "\1\57\4\2\1\0\1\2\1\0\2\2\2\0\27\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\6\2\1\62\2\2\1\63\1\2"+
    "\1\64\13\2\24\0\10\2\1\0\2\2\1\0\1\2"+
    "\1\65\1\4\1\2\1\66\1\65\1\0\1\2\1\4"+
    "\2\0\27\2\24\0\10\4\1\0\2\2\3\0\1\67"+
    "\5\0\1\67\55\0\10\67\12\0\1\70\55\0\1\71"+
    "\15\0\4\2\1\0\1\2\1\0\1\7\1\2\2\0"+
    "\27\2\24\0\10\2\1\57\2\2\1\57\1\2\1\65"+
    "\1\72\1\2\1\66\1\65\1\0\1\2\1\72\2\0"+
    "\27\2\24\0\10\72\1\0\2\2\12\0\1\73\1\74"+
    "\51\0\1\71\26\0\1\75\1\76\51\0\1\71\15\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\1\2\1\77"+
    "\1\2\1\100\23\2\24\0\10\2\1\0\2\2\1\0"+
    "\1\2\1\101\2\2\1\0\1\2\1\0\2\2\2\0"+
    "\1\102\4\2\1\103\21\2\24\0\10\2\1\0\2\2"+
    "\1\0\1\2\1\104\2\2\1\0\1\2\1\0\2\2"+
    "\2\0\27\2\24\0\10\2\1\0\2\2\1\0\1\2"+
    "\1\105\2\2\1\0\1\2\1\0\2\2\2\0\5\2"+
    "\1\106\3\2\1\107\14\2\1\110\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\1\111\1\2\1\112\2\2\1\113\2\2\1\114\16\2"+
    "\24\0\10\2\1\0\2\2\1\0\1\2\1\115\2\2"+
    "\1\0\1\2\1\0\2\2\2\0\27\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\2\2\1\116\15\2\1\117\6\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\1\120\4\2\1\121\21\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\15\2\1\122\1\2\1\123\7\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\13\2\1\124\2\2\1\125\1\126\7\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\1\127\4\2\1\130\7\2\1\131\11\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\1\132\1\2\1\133\2\2\1\134\6\2"+
    "\1\135\1\136\11\2\24\0\10\2\1\0\2\2\1\0"+
    "\1\2\1\137\2\2\1\0\1\2\1\0\2\2\2\0"+
    "\5\2\1\140\21\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\1\141\1\2"+
    "\1\142\11\2\1\143\12\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\1\144"+
    "\14\2\1\145\11\2\24\0\10\2\1\0\2\2\1\0"+
    "\1\2\1\146\2\2\1\0\1\2\1\0\2\2\2\0"+
    "\20\2\1\147\6\2\24\0\10\2\1\0\2\2\43\0"+
    "\1\150\102\0\1\151\20\0\1\150\61\0\1\152\17\0"+
    "\1\150\174\0\1\150\34\0\1\153\151\0\1\70\3\0"+
    "\1\71\101\0\1\150\24\0\1\57\66\0\1\57\2\0"+
    "\1\57\4\60\1\154\1\60\1\154\2\60\2\154\27\60"+
    "\20\154\2\0\2\154\10\60\1\0\1\155\1\60\1\154"+
    "\4\61\1\156\1\61\1\156\2\61\2\156\27\61\20\156"+
    "\2\0\2\156\10\61\1\0\1\61\1\155\1\156\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\3\2\1\157\23\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\20\2\1\160\6\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\14\2\1\161\12\2\24\0\10\2\1\0\2\2"+
    "\1\0\2\2\1\162\1\2\1\0\1\2\1\163\1\2"+
    "\1\162\2\0\27\2\16\0\1\163\5\0\10\162\1\0"+
    "\2\2\2\0\1\164\1\67\2\0\1\164\2\0\1\67"+
    "\55\0\10\67\4\0\1\2\1\165\1\72\1\2\1\166"+
    "\1\165\1\0\1\2\1\72\2\0\27\2\24\0\10\72"+
    "\1\0\2\2\1\0\76\73\1\0\3\73\12\167\1\170"+
    "\67\167\4\2\1\0\1\2\1\0\2\2\2\0\1\2"+
    "\1\171\25\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\6\2\1\172\20\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\10\2\1\173\16\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\11\2\1\174\15\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\12\2"+
    "\1\175\1\176\13\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\6\2\1\177"+
    "\20\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\2\2\1\200\24\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\1\201\26\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\6\2"+
    "\1\202\20\2\24\0\10\2\1\0\2\2\1\0\1\2"+
    "\1\203\2\2\1\0\1\2\1\0\2\2\2\0\27\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\5\2\1\204\21\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\11\2\1\205\15\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\1\206"+
    "\26\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\1\207\13\2\1\210\12\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\15\2\1\211\11\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\6\2\1\212\20\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\13\2"+
    "\1\213\13\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\13\2\1\214\13\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\15\2\1\215\11\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\11\2\1\216\15\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\22\2"+
    "\1\217\4\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\22\2\1\220\4\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\1\2\1\221\25\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\13\2\1\222\13\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\6\2"+
    "\1\223\20\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\5\2\1\224\21\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\2\2\1\225\24\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\13\2\1\226\13\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\13\2"+
    "\1\227\13\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\21\2\1\230\5\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\14\2\1\206\12\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\10\2\1\231\16\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\1\232"+
    "\14\2\1\233\11\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\4\2\1\234"+
    "\22\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\2\2\1\235\24\2\24\0"+
    "\10\2\1\0\2\2\1\0\1\2\1\236\2\2\1\0"+
    "\1\2\1\0\2\2\2\0\27\2\24\0\10\2\1\0"+
    "\2\2\1\0\1\2\1\237\2\2\1\0\1\2\1\0"+
    "\2\2\2\0\15\2\1\240\11\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\15\2\1\241\11\2\24\0\10\2\1\0\2\2\5\0"+
    "\1\242\75\0\62\154\2\0\12\154\1\0\1\243\2\154"+
    "\62\156\2\0\12\156\1\0\1\156\1\243\1\156\1\2"+
    "\1\244\2\2\1\0\1\2\1\0\2\2\2\0\27\2"+
    "\24\0\10\2\1\0\2\2\1\0\1\2\1\245\2\2"+
    "\1\0\1\2\1\0\2\2\2\0\27\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\16\2\1\246\10\2\24\0\10\2\1\0\2\2"+
    "\1\0\2\2\1\162\1\2\1\247\1\2\1\0\1\2"+
    "\1\162\2\0\27\2\24\0\10\162\1\0\2\2\3\0"+
    "\1\250\5\0\1\250\55\0\10\250\6\0\1\250\3\0"+
    "\1\163\1\0\1\250\47\0\1\163\5\0\10\250\4\0"+
    "\2\2\1\251\1\2\1\0\1\2\1\252\1\2\1\251"+
    "\2\0\27\2\16\0\1\252\5\0\10\251\1\0\2\2"+
    "\3\0\1\253\5\0\1\253\55\0\10\253\4\0\11\167"+
    "\1\254\1\170\67\167\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\2\2\1\255\24\2\24\0\10\2\1\0\2\2"+
    "\1\0\1\2\1\256\2\2\1\0\1\2\1\0\2\2"+
    "\2\0\27\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\3\2\1\240\23\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\14\2\1\257\12\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\5\2\1\260\21\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\1\2"+
    "\1\261\25\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\15\2\1\262\11\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\14\2\1\263\1\264\11\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\4\2\1\265\22\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\1\266\26\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\1\267\26\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\6\2\1\270\20\2\24\0\10\2\1\0"+
    "\2\2\1\0\1\2\1\271\2\2\1\0\1\2\1\0"+
    "\2\2\2\0\27\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\2\2\1\173"+
    "\24\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\13\2\1\272\13\2\24\0"+
    "\10\2\1\0\2\2\1\0\1\2\1\273\2\2\1\0"+
    "\1\2\1\0\2\2\2\0\27\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\3\2\1\274\23\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\6\2\1\275"+
    "\20\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\3\2\1\276\5\2\1\277"+
    "\15\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\11\2\1\300\15\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\21\2\1\301\5\2\24\0\10\2\1\0"+
    "\2\2\1\0\1\2\1\302\1\303\1\2\1\0\1\2"+
    "\1\0\2\2\2\0\27\2\24\0\1\304\1\305\1\306"+
    "\1\307\1\310\1\311\1\303\1\311\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\5\2\1\312"+
    "\21\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\22\2\1\313\4\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\15\2\1\314\11\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\14\2\1\315\12\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\3\2\1\210"+
    "\23\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\16\2\1\316\10\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\12\2\1\317\14\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\13\2\1\320\13\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\27\2\24\0"+
    "\10\2\1\0\1\321\1\322\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\1\323\26\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\23\2\1\324\3\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\24\2\1\325"+
    "\2\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\6\2\1\326\20\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\25\2\1\327\1\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\7\2\1\173\17\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\6\2\1\330"+
    "\20\2\24\0\10\2\1\0\2\2\73\0\1\331\7\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\2\2\1\240"+
    "\24\2\24\0\10\2\1\0\2\2\3\0\1\247\5\0"+
    "\1\247\55\0\10\247\6\0\1\250\1\0\1\247\3\0"+
    "\1\250\55\0\10\250\4\0\2\2\1\251\1\2\1\247"+
    "\1\2\1\0\1\2\1\251\2\0\27\2\24\0\10\251"+
    "\1\0\2\2\3\0\1\332\5\0\1\332\55\0\10\332"+
    "\5\0\1\333\1\253\2\0\1\333\2\0\1\253\55\0"+
    "\10\253\4\0\1\2\1\334\2\2\1\0\1\2\1\0"+
    "\2\2\2\0\27\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\11\2\1\335"+
    "\11\2\1\336\3\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\2\2\1\337"+
    "\24\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\13\2\1\340\13\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\1\2\1\341\25\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\12\2\1\342\14\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\13\2\1\343"+
    "\13\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\5\2\1\240\21\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\13\2\1\344\13\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\7\2\1\345\17\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\3\2\1\346"+
    "\23\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\3\2\1\347\23\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\12\2\1\350\14\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\11\2\1\351\15\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\2\2\1\352"+
    "\12\2\1\353\11\2\24\0\10\2\1\0\2\2\1\0"+
    "\2\2\1\354\1\2\1\0\1\2\1\0\2\2\2\0"+
    "\27\2\24\0\1\355\1\356\1\357\1\360\1\361\1\362"+
    "\1\354\1\362\1\0\2\2\1\0\1\2\1\363\2\2"+
    "\1\0\1\2\1\0\2\2\2\0\27\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\2\2\1\364\24\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\27\2"+
    "\24\0\2\2\1\365\5\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\1\2\1\365\2\0\27\2\24\0"+
    "\1\365\7\2\1\0\2\2\1\0\2\2\1\311\1\2"+
    "\1\0\1\2\1\0\1\2\1\306\2\0\27\2\24\0"+
    "\1\306\1\311\1\304\1\310\1\306\1\303\1\311\1\303"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\27\2\24\0\4\2\1\365\3\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\1\2\1\310\2\0"+
    "\27\2\24\0\1\2\1\303\1\2\1\306\1\304\1\311"+
    "\1\303\1\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\27\2\24\0\3\2\1\365\4\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\2\2\1\366\24\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\15\2"+
    "\1\367\11\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\17\2\1\370\7\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\11\2\1\371\15\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\11\2\1\372\15\2\24\0\10\2\1\0\2\2"+
    "\1\0\1\2\1\373\2\2\1\0\1\2\1\0\2\2"+
    "\2\0\27\2\24\0\10\2\1\0\2\2\1\0\1\2"+
    "\3\374\1\0\1\374\1\0\1\2\1\374\2\0\2\374"+
    "\2\2\1\374\5\2\1\374\4\2\1\374\7\2\24\0"+
    "\10\374\1\0\2\2\1\0\1\2\3\375\1\0\1\375"+
    "\1\0\1\2\1\375\2\0\2\375\2\2\1\375\5\2"+
    "\1\375\4\2\1\375\7\2\24\0\10\375\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\4\2"+
    "\1\376\22\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\16\2\1\377\10\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\1\u0100\26\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\15\2\1\u0101\11\2\24\0\10\2\1\0\2\2\1\0"+
    "\1\2\1\u0102\2\2\1\0\1\2\1\0\2\2\2\0"+
    "\27\2\24\0\10\2\1\0\2\2\5\0\1\u0103\77\0"+
    "\1\332\1\0\1\247\3\0\1\332\55\0\10\332\6\0"+
    "\1\332\3\0\1\252\1\0\1\332\47\0\1\252\5\0"+
    "\10\332\4\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\3\2\1\u0104\23\2\24\0\10\2\1\0\2\2\1\0"+
    "\1\2\1\u0105\2\2\1\0\1\2\1\0\2\2\2\0"+
    "\27\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\1\u0106\26\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\13\2\1\u0107\13\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\1\2"+
    "\1\173\25\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\15\2\1\u0108\11\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\11\2\1\u0109\15\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\23\2\1\u010a\3\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\12\2"+
    "\1\u010b\14\2\24\0\10\2\1\0\2\2\1\0\2\2"+
    "\1\u010c\1\2\1\0\1\2\1\0\2\2\2\0\27\2"+
    "\24\0\1\u010c\1\u010d\1\u010c\1\u010d\1\u010c\1\u010e\2\u010c"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\17\2\1\u010f\7\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\5\2"+
    "\1\u0110\21\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\2\2\1\u0111\24\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\1\u0112\26\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\13\2\1\u0113\13\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\27\2\24\0"+
    "\2\2\1\u0114\5\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\1\2\1\u0114\2\0\27\2\24\0\1\u0114"+
    "\7\2\1\0\2\2\1\0\2\2\1\362\1\2\1\0"+
    "\1\2\1\0\1\2\1\357\2\0\27\2\24\0\1\357"+
    "\1\362\1\355\1\361\1\357\1\354\1\362\1\354\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\27\2\24\0\4\2\1\u0114\3\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\1\2\1\361\2\0\27\2"+
    "\24\0\1\2\1\354\1\2\1\357\1\355\1\362\1\354"+
    "\1\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\27\2\24\0\3\2\1\u0114\4\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\1\2\1\u0115\25\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\13\2\1\u0116"+
    "\13\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\11\2\1\u0117\15\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\13\2\1\u0118\13\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\15\2\1\u0119\11\2\24\0\10\2\1\0\2\2\1\0"+
    "\1\2\1\173\2\2\1\0\1\2\1\0\2\2\2\0"+
    "\27\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\15\2\1\u011a\11\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\10\2\1\240\16\2\24\0\10\2\1\0"+
    "\2\2\1\0\1\2\3\u011b\1\0\1\u011b\1\0\1\2"+
    "\1\u011b\2\0\2\u011b\2\2\1\u011b\5\2\1\u011b\4\2"+
    "\1\u011b\7\2\24\0\10\u011b\1\0\2\2\1\0\1\2"+
    "\3\u011c\1\0\1\u011c\1\0\1\2\1\u011c\2\0\2\u011c"+
    "\2\2\1\u011c\5\2\1\u011c\4\2\1\u011c\7\2\24\0"+
    "\10\u011c\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\6\2\1\u011d\20\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\1\u011e\26\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\11\2\1\u011f\15\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\12\2\1\u0120\14\2\24\0\10\2"+
    "\1\0\2\2\11\0\1\u0121\71\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\3\2\1\u0122\23\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\11\2\1\u010b\15\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\3\2"+
    "\1\u0123\23\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\11\2\1\u0124\15\2"+
    "\24\0\10\2\1\0\2\2\1\0\1\2\1\261\2\2"+
    "\1\0\1\2\1\0\2\2\2\0\27\2\24\0\10\2"+
    "\1\0\2\2\1\0\2\2\1\u010c\1\2\1\0\1\2"+
    "\1\0\1\2\1\u010c\2\0\27\2\24\0\10\u010c\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\1\2\1\u010c"+
    "\2\0\27\2\24\0\1\2\1\u010c\1\2\1\u010c\4\2"+
    "\1\0\2\2\1\0\1\2\1\u0125\2\2\1\0\1\2"+
    "\1\0\2\2\2\0\27\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\1\2"+
    "\1\u010b\25\2\24\0\10\2\1\0\2\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\2\2\0\14\2\1\u0126\12\2"+
    "\24\0\10\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\2\2\2\0\12\2\1\u0127\14\2\24\0\10\2"+
    "\1\0\2\2\1\0\4\2\1\0\1\2\1\0\2\2"+
    "\2\0\14\2\1\u0128\12\2\24\0\10\2\1\0\2\2"+
    "\1\0\4\2\1\0\1\2\1\0\2\2\2\0\1\u0129"+
    "\26\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\23\2\1\u012a\3\2\24\0"+
    "\10\2\1\0\2\2\1\0\1\2\1\u012b\2\2\1\0"+
    "\1\2\1\0\2\2\2\0\27\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\5\2\1\u012c\21\2\24\0\10\2\1\0\2\2\1\0"+
    "\1\2\3\u012d\1\0\1\u012d\1\0\1\2\1\u012d\2\0"+
    "\2\u012d\2\2\1\u012d\5\2\1\u012d\4\2\1\u012d\7\2"+
    "\24\0\10\u012d\1\0\2\2\1\0\1\2\3\u012e\1\0"+
    "\1\u012e\1\0\1\2\1\u012e\2\0\2\u012e\2\2\1\u012e"+
    "\5\2\1\u012e\4\2\1\u012e\7\2\24\0\10\u012e\1\0"+
    "\2\2\1\0\1\2\1\u012f\2\2\1\0\1\2\1\0"+
    "\2\2\2\0\27\2\24\0\10\2\1\0\2\2\1\0"+
    "\1\2\1\u0130\2\2\1\0\1\2\1\0\2\2\2\0"+
    "\27\2\24\0\10\2\1\0\2\2\1\0\4\2\1\0"+
    "\1\2\1\0\2\2\2\0\10\2\1\u0131\16\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\2\2\1\261\24\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\12\2\1\u0132\14\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\11\2\1\u0133"+
    "\15\2\24\0\10\2\1\0\2\2\1\0\1\2\1\u0134"+
    "\2\2\1\0\1\2\1\0\2\2\2\0\27\2\24\0"+
    "\10\2\1\0\2\2\1\0\4\2\1\0\1\2\1\0"+
    "\2\2\2\0\6\2\1\u0135\20\2\24\0\10\2\1\0"+
    "\2\2\1\0\4\2\1\0\1\2\1\0\2\2\2\0"+
    "\2\2\1\u0136\24\2\24\0\10\2\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\13\2\1\u0137"+
    "\13\2\24\0\10\2\1\0\2\2\1\0\1\2\3\u0138"+
    "\1\0\1\u0138\1\0\1\2\1\u0138\2\0\2\u0138\2\2"+
    "\1\u0138\5\2\1\u0138\4\2\1\u0138\7\2\24\0\10\u0138"+
    "\1\0\2\2\1\0\1\2\3\u0139\1\0\1\u0139\1\0"+
    "\1\2\1\u0139\2\0\2\u0139\2\2\1\u0139\5\2\1\u0139"+
    "\4\2\1\u0139\7\2\24\0\10\u0139\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\11\2\1\u013a"+
    "\15\2\24\0\10\2\1\0\2\2\1\0\1\2\3\u013b"+
    "\1\0\1\u013b\1\0\1\2\1\u013b\2\0\2\u013b\2\2"+
    "\1\u013b\5\2\1\u013b\4\2\1\u013b\7\2\24\0\10\u013b"+
    "\1\0\2\2\1\0\1\2\3\u013c\1\0\1\u013c\1\0"+
    "\1\2\1\u013c\2\0\2\u013c\2\2\1\u013c\5\2\1\u013c"+
    "\4\2\1\u013c\7\2\24\0\10\u013c\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\5\2\1\u013d"+
    "\21\2\24\0\10\2\1\0\2\2\1\0\1\2\3\u013e"+
    "\1\0\1\u013e\1\0\1\2\1\u013e\2\0\2\u013e\2\2"+
    "\1\u013e\5\2\1\u013e\4\2\1\u013e\7\2\24\0\10\u013e"+
    "\1\0\2\2\1\0\1\2\3\u013f\1\0\1\u013f\1\0"+
    "\1\2\1\u013f\2\0\2\u013f\2\2\1\u013f\5\2\1\u013f"+
    "\4\2\1\u013f\7\2\24\0\10\u013f\1\0\2\2\1\0"+
    "\4\2\1\0\1\2\1\0\2\2\2\0\2\2\1\u0140"+
    "\24\2\24\0\10\2\1\0\2\2\1\0\1\2\3\u0141"+
    "\1\0\1\u0141\1\0\1\2\1\u0141\2\0\2\u0141\2\2"+
    "\1\u0141\5\2\1\u0141\4\2\1\u0141\7\2\24\0\10\u0141"+
    "\1\0\2\2\1\0\1\2\3\u0142\1\0\1\u0142\1\0"+
    "\1\2\1\u0142\2\0\2\u0142\2\2\1\u0142\5\2\1\u0142"+
    "\4\2\1\u0142\7\2\24\0\10\u0142\1\0\2\2\1\0"+
    "\1\2\3\u0143\1\0\1\u0143\1\0\1\2\1\u0143\2\0"+
    "\2\u0143\2\2\1\u0143\5\2\1\u0143\4\2\1\u0143\7\2"+
    "\24\0\10\u0143\1\0\2\2\1\0\1\2\3\u0144\1\0"+
    "\1\u0144\1\0\1\2\1\u0144\2\0\2\u0144\2\2\1\u0144"+
    "\5\2\1\u0144\4\2\1\u0144\7\2\24\0\10\u0144\1\0"+
    "\2\2\1\0\1\2\3\u0143\1\0\1\u0143\1\0\1\2"+
    "\1\u0143\2\0\2\u0143\2\2\1\u0143\5\2\1\u0143\4\2"+
    "\1\u0143\7\2\24\0\10\u0143\1\0\1\155\1\2\1\0"+
    "\1\2\3\u0144\1\0\1\u0144\1\0\1\2\1\u0144\2\0"+
    "\2\u0144\2\2\1\u0144\5\2\1\u0144\4\2\1\u0144\7\2"+
    "\24\0\10\u0144\1\0\1\2\1\155\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17094];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\35\1\10\11\2\1\1\11\1\1\3\11\13\1\2\11"+
    "\3\1\2\11\51\1\3\11\2\0\1\1\1\0\4\1"+
    "\2\0\2\1\2\0\51\1\1\0\1\11\6\1\1\0"+
    "\56\1\1\0\1\1\1\0\47\1\1\0\35\1\1\11"+
    "\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private EscritorASM escASM = new EscritorASM();
private static TablaSimbolos tabla = new TablaSimbolos();
    public LexerCup(Reader in, TablaSimbolos t){
        this(in);
        this.tabla = t;
    }
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 65: 
          { return new Symbol(sym.Public, yychar, yyline, yytext());
          }
        case 79: break;
        case 2: 
          { return new Symbol(sym.Literal, yychar, yyline, yytext());
          }
        case 80: break;
        case 69: 
          { return new Symbol(sym.Mapping, yychar, yyline, yytext());
          }
        case 81: break;
        case 37: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 82: break;
        case 11: 
          { tabla.reiniciarTipo(); return new Symbol(sym.PuntoComa, yychar, yyline, yytext());
          }
        case 83: break;
        case 28: 
          { return new Symbol(sym.ERROR_LiteralCero, yychar, yyline, yytext());
          }
        case 84: break;
        case 15: 
          { return new Symbol(sym.DosPuntos, yychar, yyline, yytext());
          }
        case 85: break;
        case 1: 
          { Simbolo s;
    
    if(tabla.ultimoTipoIngresado.equals("")){
        if(tabla.revisarDeclaracion(yytext())){
            tabla.erroresLex += "Variable no declarada: "+ yytext() + ". Línea: " + (yyline+1) +"\n";
            return new Symbol(sym.Identificador, yychar, yyline, yytext());
        }
    }
    else if (tabla.buscarBool(yytext())){
        s = tabla.insertar(yytext());
    }else{
        tabla.erroresLex += "Variable repetida: "+ yytext() + ". Línea: " + (yyline+1) +"\n";
    }
    return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 86: break;
        case 44: 
          { return new Symbol(sym.Transac, yychar, yyline, yytext());
          }
        case 87: break;
        case 9: 
          { return new Symbol(sym.Op_relacional, yychar, yyline, yytext());
          }
        case 88: break;
        case 31: 
          { return new Symbol(sym.As, yychar, yyline, yytext());
          }
        case 89: break;
        case 73: 
          { tabla.asignarComoUltimoTipo(yytext()); return new Symbol(sym.Contract, yychar, yyline, yytext());
          }
        case 90: break;
        case 61: 
          { tabla.asignarComoUltimoTipo(yytext());
        return new Symbol(sym.BytesValue, yychar, yyline, yytext());
          }
        case 91: break;
        case 48: 
          { return new Symbol(sym.This, yychar, yyline, yytext());
          }
        case 92: break;
        case 38: 
          { return new Symbol(sym.Hex, yychar, yyline, yytext());
          }
        case 93: break;
        case 46: 
          { return new Symbol(sym.Byte, yychar, yyline, yytext());
          }
        case 94: break;
        case 27: 
          { return new Symbol(sym.Op_Incremental, yychar, yyline, yytext());
          }
        case 95: break;
        case 64: 
          { return new Symbol(sym.Pragma, yychar, yyline, yytext());
          }
        case 96: break;
        case 52: 
          { return new Symbol(sym.View, yychar, yyline, yytext());
          }
        case 97: break;
        case 10: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 98: break;
        case 57: 
          { return new Symbol(sym.Delete, yychar, yyline, yytext());
          }
        case 99: break;
        case 55: 
          { tabla.asignarComoUltimoTipo(yytext());
        return new Symbol(sym.UintValue, yychar, yyline, yytext());
          }
        case 100: break;
        case 51: 
          { return new Symbol(sym.From, yychar, yyline, yytext());
          }
        case 101: break;
        case 12: 
          { return new Symbol(sym.ParenCuadAbre, yychar, yyline, yytext());
          }
        case 102: break;
        case 29: 
          { return new Symbol(sym.ERROR_Comentario, yychar, yyline, yytext());
          }
        case 103: break;
        case 53: 
          { return new Symbol(sym.Break, yychar, yyline, yytext());
          }
        case 104: break;
        case 5: 
          { /*Ignore*/
          }
        case 105: break;
        case 72: 
          { return new Symbol(sym.Solidity, yychar, yyline, yytext());
          }
        case 106: break;
        case 25: 
          { tabla.posibleIdSiendoAsignado = true;return new Symbol(sym.Op_atribucion, yychar, yyline, yytext());
          }
        case 107: break;
        case 50: 
          { tabla.asignarComoUltimoTipo(yytext());
        return new Symbol(sym.IntValue, yychar, yyline, yytext());
          }
        case 108: break;
        case 8: 
          { return new Symbol(sym.Pipe, yychar, yyline, yytext());
          }
        case 109: break;
        case 74: 
          { return new Symbol(sym.Continue, yychar, yyline, yytext());
          }
        case 110: break;
        case 34: 
          { return new Symbol(sym.ShiftLeft, yychar, yyline, yytext());
          }
        case 111: break;
        case 6: 
          { return new Symbol(sym.Div, yychar, yyline, yytext());
          }
        case 112: break;
        case 26: 
          { return new Symbol(sym.Not, yychar, yyline, yytext());
          }
        case 113: break;
        case 75: 
          { return new Symbol(sym.Internal, yychar, yyline, yytext());
          }
        case 114: break;
        case 35: 
          { return new Symbol(sym.ShiftRight, yychar, yyline, yytext());
          }
        case 115: break;
        case 67: 
          { return new Symbol(sym.Address, yychar, yyline, yytext());
          }
        case 116: break;
        case 17: 
          { return new Symbol(sym.LlaveCierra, yychar, yyline, yytext());
          }
        case 117: break;
        case 42: 
          { tabla.asignarComoUltimoTipo(yytext()); return new Symbol(sym.Enum, yychar, yyline, yytext());
          }
        case 118: break;
        case 40: 
          { return new Symbol(sym.Units, yychar, yyline, yytext());
          }
        case 119: break;
        case 62: 
          { tabla.asignarComoUltimoTipo(yytext()); return new Symbol(sym.Ufixed, yychar, yyline, yytext());
          }
        case 120: break;
        case 41: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 121: break;
        case 77: 
          { tabla.asignarComoUltimoTipo(yytext()); return new Symbol(sym.Function, yychar, yyline, yytext());
          }
        case 122: break;
        case 24: 
          { tabla.reiniciarTipo(); return new Symbol(sym.ParentCierre, yychar, yyline, yytext());
          }
        case 123: break;
        case 7: 
          { return new Symbol(sym.Mult, yychar, yyline, yytext());
          }
        case 124: break;
        case 66: 
          { return new Symbol(sym.Version, yychar, yyline, yytext());
          }
        case 125: break;
        case 19: 
          { return new Symbol(sym.Elevar, yychar, yyline, yytext());
          }
        case 126: break;
        case 70: 
          { return new Symbol(sym.Payable, yychar, yyline, yytext());
          }
        case 127: break;
        case 30: 
          { return new Symbol(sym.DobleAsterisco, yychar, yyline, yytext());
          }
        case 128: break;
        case 21: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 129: break;
        case 20: 
          { return new Symbol(sym.Virgulilla, yychar, yyline, yytext());
          }
        case 130: break;
        case 59: 
          { tabla.asignarComoUltimoTipo(yytext()); return new Symbol(sym.Struct, yychar, yyline, yytext());
          }
        case 131: break;
        case 71: 
          { return new Symbol(sym.Private, yychar, yyline, yytext());
          }
        case 132: break;
        case 76: 
          { return new Symbol(sym.Modifier, yychar, yyline, yytext());
          }
        case 133: break;
        case 68: 
          { return new Symbol(sym.Returns, yychar, yyline, yytext());
          }
        case 134: break;
        case 78: 
          { return new Symbol(sym.Constructor, yychar, yyline, yytext());
          }
        case 135: break;
        case 13: 
          { return new Symbol(sym.ParenCuadCierra, yychar, yyline, yytext());
          }
        case 136: break;
        case 47: 
          { return new Symbol(sym.Op_Booleano, yychar, yyline, yytext());
          }
        case 137: break;
        case 18: 
          { return new Symbol(sym.Ampersand, yychar, yyline, yytext());
          }
        case 138: break;
        case 14: 
          { return new Symbol(sym.SignoPregunta, yychar, yyline, yytext());
          }
        case 139: break;
        case 45: 
          { tabla.asignarComoUltimoTipo(yytext()); return new Symbol(sym.Bool, yychar, yyline, yytext());
          }
        case 140: break;
        case 33: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 141: break;
        case 49: 
          { tabla.asignarComoUltimoTipo(yytext()); return new Symbol(sym.Uint, yychar, yyline, yytext());
          }
        case 142: break;
        case 3: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 143: break;
        case 43: 
          { return new Symbol(sym.ERROR_NotacionCientifica, yychar, yyline, yytext());
          }
        case 144: break;
        case 32: 
          { return new Symbol(sym.Do, yychar, yyline, yytext());
          }
        case 145: break;
        case 23: 
          { return new Symbol(sym.ParentAbre, yychar, yyline, yytext());
          }
        case 146: break;
        case 16: 
          { return new Symbol(sym.LlaveAbre, yychar, yyline, yytext());
          }
        case 147: break;
        case 4: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 148: break;
        case 60: 
          { tabla.asignarComoUltimoTipo(yytext()); return new Symbol(sym.String, yychar, yyline, yytext());
          }
        case 149: break;
        case 54: 
          { return new Symbol(sym.Bytes, yychar, yyline, yytext());
          }
        case 150: break;
        case 39: 
          { return new Symbol(sym.Var, yychar, yyline, yytext());
          }
        case 151: break;
        case 63: 
          { return new Symbol(sym.Import, yychar, yyline, yytext());
          }
        case 152: break;
        case 58: 
          { return new Symbol(sym.Return, yychar, yyline, yytext());
          }
        case 153: break;
        case 56: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 154: break;
        case 22: 
          { return new Symbol(sym.Mod, yychar, yyline, yytext());
          }
        case 155: break;
        case 36: 
          { tabla.asignarComoUltimoTipo(yytext()); return new Symbol(sym.Int, yychar, yyline, yytext());
          }
        case 156: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
