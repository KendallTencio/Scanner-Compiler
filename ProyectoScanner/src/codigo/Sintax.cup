package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

parser code
{:
    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static boolean fatalError = false;
    public static boolean specError = false;
    public static Symbol fatalErrorSym;
    public static String specErrorDetail = "";

    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public static void informar_Error_Especifico(String tipoError){
        String specErrorStr = "ERROR: "+tipoError;//+". Línea: "+specErrorSym.right+". Columna: "+specErrorSym.left;
        specErrorDetail = specErrorStr;
        specError = true;

        System.err.println(specErrorStr);
    }
:};

terminal Reservadas, Operador, Transac, Units, Identificador, Literal, Address, As, Bool, Break,
         Byte, Bytes, Constructor, Continue, Contract, Delete, Do, Else, Enum, For, From, Function,
         Hex, If, Import, Int, Internal, Mapping, Modifier, Payable, Pragma, Private, Public, Return,
         Returns, Solidity, String, Struct, This, True, Ufixed, Uint, Var, View, While, Pipe, ShiftLeft,
         ShiftRight, DobleAsterisco, Coma, PuntoComa, Punto, ParenCuadAbre, ParenCuadCierra, SignoPregunta,
         DosPuntos, LlaveAbre, LlaveCierra, Ampersand, Elevar, Virgulilla, Suma, Resta, Mult, Div, Mod,
         ParentAbre, ParentCierre, Op_Booleano, Op_relacional, Not, Op_atribucion, Op_Incremental, IntValue, UintValue, BytesValue,
         ERROR;
non terminal INICIO, BLOQUE_SENTENCIA, SENTENCIA, LISTA_SENTENCIA, PARTE_SENTENCIA; 
non terminal SENTENCIA_IF, SENTENCIA_ELSE, SENTENCIA_WHILE, SENTENCIA_DOWHILE, SENTENCIA_FOR, SENTENCIA_TERNARIA;
non terminal EXPRESION_BOOLEANA, EXPRECION_ARITMETICA, EXPRESION_PRIMARIA, EXPRESION_INCREMENTAL;
non terminal EXPRESION_TUPLA_PPARENTESIS, EXPRESION_TUPLA_PPARENTESIS_PRIMA;
non terminal STRUCTDEF, STRUCTCONTEN, DECLARVARIABLE, DECLARVARDOS;
non terminal FUNCIONDEF, FUNCIONATRIB, FUNATRIBDOS ,MODIFICADORES, FUNCIONRETURNS,FUNCIONCONTEN, FUNCIONCUERPO, SENTENCIA_RETURN;
non terminal FUNCCALL, PARAMFUNC;
non terminal TYPENAME, ELEMENTARYTYPENAME, ARRAYDECLAR, ACCESSMOD;
non terminal ENUMDEF, ENUMCONTEN, ENUMLIST, ENUMVALUE;
non terminal CONTRACTDEF, CONTRACTPART, CONTRACTPART1, CONTRACTPART2, CONTRACTPART3;
non terminal LISTA_SENTENCIAPRIMA;

precedence left Suma, Resta;
precedence left Mult, Div, Mod;


start with INICIO;

INICIO ::= SENTENCIA_TERNARIA INICIO            
            | STRUCTDEF INICIO                        
            //| FUNCCALL INICIO 
            | CONTRACTDEF INICIO 
            | ENUMDEF INICIO
            | {: RESULT = null; :};

//LISTA_SENTENCIA ::= SENTENCIA LISTA_SENTENCIAPRIMA;
LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA | {: RESULT = null; :};

SENTENCIA ::= SENTENCIA_IF
            | SENTENCIA_WHILE 
            | SENTENCIA_DOWHILE PuntoComa
            | SENTENCIA_FOR 
            | SENTENCIA_RETURN
            | DECLARVARIABLE 
            | FUNCCALL                       
            | Break PuntoComa
            | Continue PuntoComa
            | error PuntoComa
            | error LlaveCierra; 

SENTENCIA_IF ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra
               | If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra SENTENCIA_ELSE;
SENTENCIA_ELSE ::= Else LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra;
    
SENTENCIA_WHILE ::= While ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra;
SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra While ParentAbre EXPRESION_BOOLEANA ParentCierre;
SENTENCIA_FOR ::= For ParentAbre DECLARVARIABLE EXPRESION_BOOLEANA PuntoComa EXPRESION_INCREMENTAL ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra;
SENTENCIA_TERNARIA ::= EXPRESION_BOOLEANA SignoPregunta EXPRESION_PRIMARIA DosPuntos EXPRESION_PRIMARIA PuntoComa;

EXPRESION_BOOLEANA ::= Op_Booleano
                    | Not EXPRESION_BOOLEANA
                    | Not ParentAbre EXPRESION_BOOLEANA ParentCierre 
                    | EXPRESION_PRIMARIA Op_relacional EXPRESION_PRIMARIA
                    | EXPRESION_PRIMARIA Op_relacional ParentAbre EXPRESION_BOOLEANA ParentCierre
                    | ParentAbre EXPRESION_BOOLEANA ParentCierre Op_relacional EXPRESION_PRIMARIA
                    | Identificador;

EXPRESION_PRIMARIA ::= EXPRECION_ARITMETICA
                    | Identificador;

EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Suma EXPRECION_ARITMETICA
                    | EXPRECION_ARITMETICA Resta EXPRECION_ARITMETICA
                    | EXPRECION_ARITMETICA Mult EXPRECION_ARITMETICA
                    | EXPRECION_ARITMETICA Div EXPRECION_ARITMETICA
                    | EXPRECION_ARITMETICA Mod EXPRECION_ARITMETICA
                    | Resta EXPRECION_ARITMETICA
                    | ParentAbre EXPRECION_ARITMETICA ParentCierre
                    | Literal;

EXPRESION_INCREMENTAL ::= Op_Incremental Identificador
                        | Identificador Op_Incremental;

STRUCTDEF ::= Struct Identificador STRUCTCONTEN;
STRUCTCONTEN ::= LlaveAbre DECLARVARIABLE LlaveCierra PuntoComa;

DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador PuntoComa | TYPENAME ACCESSMOD Identificador Op_atribucion Literal PuntoComa | ARRAYDECLAR; 
ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador PuntoComa | TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Literal PuntoComa;

ACCESSMOD ::= Private | Public | {: RESULT = null; :};

CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra PuntoComa;
CONTRACTPART ::= ENUMDEF CONTRACTPART | CONTRACTPART1;
CONTRACTPART1 ::= DECLARVARIABLE CONTRACTPART1 | CONTRACTPART2; 
CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 | CONTRACTPART3;
CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 | {: RESULT = null; :};

ENUMDEF ::= Enum Identificador ENUMCONTEN;
ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra PuntoComa;
ENUMLIST ::= Coma ENUMVALUE | {: RESULT = null; :};
ENUMVALUE ::= Identificador ENUMLIST;

FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN;

FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS;
FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS | ParentCierre;

MODIFICADORES ::= Payable | Private | Public | Internal | {: RESULT = null; :};
FUNCIONRETURNS ::= Returns FUNCIONATRIB | {: RESULT = null; :};
FUNCIONCONTEN ::= LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra | error LlaveCierra;

SENTENCIA_RETURN ::= Return Identificador PuntoComa | Return Identificador {: Sintax.informar_Error_Especifico("Return de función sin punto y coma"); :};

PARAMFUNC ::= TYPENAME Identificador;
TYPENAME ::= ELEMENTARYTYPENAME;

ELEMENTARYTYPENAME ::= Bool | Byte | Bytes | Address | Int | String | Ufixed | Uint;

FUNCCALL  ::= Identificador ParentAbre PARAMFUNC ParentCierre PuntoComa;

