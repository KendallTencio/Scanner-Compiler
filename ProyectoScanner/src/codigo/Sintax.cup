package codigo;

import java.io.InputStreamReader;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.parser;

parser code
{:
    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static ArrayList<String> erroresEspec = new ArrayList<String>();
    public static boolean fatalError = false;
    public static boolean specError = false;
    public static Symbol fatalErrorSym;
    public static String specErrorDetail = "";
    
    static TablaSimbolos tabla = new TablaSimbolos();


    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public static void informar_Error_Especifico(String tipoError){
        String specErrorStr = "ERROR: "+tipoError;
        specErrorDetail = specErrorStr;
        erroresEspec.add(specErrorStr);
        specError = true;

        System.err.println(specErrorStr);
    }
:};

terminal Version, Reservadas, Operador, Transac, Units, Identificador, Literal, Address, As, Bool, Break,
         Byte, Bytes, Constructor, Continue, Contract, Delete, Do, Else, Enum, For, From, Function,
         Hex, If, Import, Int, Internal, Mapping, Modifier, Payable, Pragma, Private, Public, Return,
         Returns, Solidity, String, Struct, This, True, Ufixed, Uint, Var, View, While, Pipe, ShiftLeft,
         ShiftRight, DobleAsterisco, Coma, PuntoComa, Punto, ParenCuadAbre, ParenCuadCierra, SignoPregunta,
         DosPuntos, LlaveAbre, LlaveCierra, Ampersand, Elevar, Virgulilla, Suma, Resta, Mult, Div, Mod,
         ParentAbre, ParentCierre, Op_Booleano, Op_relacional, Not, Op_atribucion, Op_Incremental, IntValue, UintValue, BytesValue,
         ERROR_NotacionCientifica, ERROR_Identificador, ERROR_Comentario, ERROR_LiteralCero,ERROR;
non terminal INICIO, INICIODOS, BLOQUE_SENTENCIA, SENTENCIA, LISTA_SENTENCIA, PARTE_SENTENCIA; 
non terminal SENTENCIA_IF, SENTENCIA_ELSE, SENTENCIA_WHILE, SENTENCIA_DOWHILE, SENTENCIA_FOR, SENTENCIA_TERNARIA;
non terminal EXPRESION_BOOLEANA_PRIMA, EXPRESION_BOOLEANA, EXPRESION_ARITMETICA, EXPRESION_INCREMENTAL, EXPRESION;
non terminal EXPRESION_TUPLA_PPARENTESIS, EXPRESION_TUPLA_PPARENTESIS_PRIMA;
non terminal STRUCTDEF, STRUCTCONTEN, DECLARVARIABLE, DECLARVARDOS, PARAMFUNCFILA;
non terminal FUNCIONDEF, FUNCIONATRIB, FUNATRIBDOS ,MODIFICADORES, FUNCIONRETURNS,FUNCIONCONTEN, FUNCIONCUERPO, SENTENCIA_RETURN;
non terminal FUNCCALL, PARAMFUNC, ASIGVARIABLE, ASIGVARIABLEFUN , DECLARVARIABLEFILA, ARRAYDECLARFILA;
non terminal TYPENAME, ELEMENTARYTYPENAME, ARRAYDECLAR, ACCESSMOD;
non terminal ENUMDEF, ENUMCONTEN, ENUMLIST, ENUMVALUE;
non terminal CONTRACTDEF, CONTRACTPART, CONTRACTPART1, CONTRACTPART2, CONTRACTPART3;
non terminal LISTA_SENTENCIAPRIMA, LISTA_SENTENCIAPRIMAFUN, SENTENCIAFUN, FUNCIONCONTENVARLIS;

precedence left Suma, Resta;
precedence left Mult, Div, Mod;

precedence left Op_relacional;
precedence left Punto;
precedence left SignoPregunta;
precedence left DosPuntos;

start with INICIO;

/*
contract hola{
 function ccc(string y){
   int x = 3;
   return e;
 }
};

contract hola{
 function ccc(string y){
   int x = 3;

  while(true){
        string yy = "hola";
         for(int x = 2; x < 10 ; --x){
             int x = x;
             if(Marco){
                 break;
             }
            else{
                string Gilgamesh = "Are u winning son?";
             }
             break;
         }
       continue;
   }
   return x;
 }
};

*/

INICIO ::= Pragma Solidity Version PuntoComa INICIODOS;

INICIODOS ::= STRUCTDEF INICIODOS                        
            //| FUNCCALL INICIODOS
            | CONTRACTDEF INICIODOS 
            | ENUMDEF INICIODOS
            | DECLARVARIABLE PuntoComa:p INICIODOS {: Sintax.informar_Error_Especifico("Declaración fuera de función. En línea: "+pright); :}
            | {: RESULT = null; :};

LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA | {: RESULT = null; :};

SENTENCIA ::= SENTENCIA_IF
            | SENTENCIA_WHILE 
            | SENTENCIA_DOWHILE PuntoComa
            | SENTENCIA_FOR 
            | SENTENCIA_RETURN
            | SENTENCIA_TERNARIA PuntoComa
            | DECLARVARIABLE PuntoComa
            | ASIGVARIABLE PuntoComa
            | FUNCCALL PuntoComa
            | Break PuntoComa
            | Continue PuntoComa
            | error PuntoComa
            | error LlaveCierra
            | error ParentCierre; 

LISTA_SENTENCIAPRIMAFUN ::= SENTENCIAFUN LISTA_SENTENCIAPRIMAFUN | {: FrmPrincipal.tabla.validarReturnFuncion(); RESULT = null; :};

SENTENCIAFUN ::= SENTENCIA_IF
            | SENTENCIA_WHILE 
            | SENTENCIA_DOWHILE PuntoComa
            | SENTENCIA_FOR 
            | SENTENCIA_RETURN
            | SENTENCIA_TERNARIA PuntoComa            
            | ASIGVARIABLE PuntoComa
            | FUNCCALL PuntoComa
            | Break PuntoComa
            | Continue PuntoComa
            | error PuntoComa 
            | error LlaveCierra 
            | error ParentCierre; 

SENTENCIA_IF ::= If ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra
               | If ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra SENTENCIA_ELSE; 
SENTENCIA_ELSE ::= Else LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra;
    
SENTENCIA_WHILE ::= While ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra;
SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra While ParentAbre EXPRESION ParentCierre;
SENTENCIA_FOR ::= For ParentAbre DECLARVARIABLE PuntoComa EXPRESION PuntoComa EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra
                | For ParentAbre ASIGVARIABLE PuntoComa EXPRESION PuntoComa EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra;

SENTENCIA_TERNARIA ::= EXPRESION SignoPregunta EXPRESION DosPuntos EXPRESION;


EXPRESION ::=         EXPRESION Op_relacional EXPRESION
                    | ParentAbre EXPRESION ParentCierre
                    | Not EXPRESION
                    | Identificador:id {: RESULT = id; :}
                    | Op_Booleano
                    | EXPRESION Suma EXPRESION
                    | EXPRESION Resta EXPRESION
                    | EXPRESION Mult EXPRESION
                    | EXPRESION Div EXPRESION
                    | EXPRESION Mod EXPRESION
                    | Resta EXPRESION
                    | EXPRESION_INCREMENTAL
                    | FUNCCALL
                    | This Punto EXPRESION
                    | EXPRESION Punto EXPRESION
                    | Literal:valor {: FrmPrincipal.tabla.insertarValorVariable(valor.toString()); :}
                    | Op_Incremental Identificador
                    | Identificador Op_Incremental
                    | SENTENCIA_TERNARIA;

STRUCTDEF ::= Struct Identificador LlaveAbre STRUCTCONTEN LlaveCierra;
STRUCTCONTEN ::= DECLARVARIABLE PuntoComa STRUCTCONTEN | ASIGVARIABLE PuntoComa STRUCTCONTEN | {: RESULT = null; :};

DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador:id {: FrmPrincipal.tabla.insertarValorScope(id.toString()); :} DECLARVARIABLEFILA | TYPENAME ACCESSMOD Identificador:id {: FrmPrincipal.tabla.ultimoIdentificadorIngresado = id.toString(); :} Op_atribucion EXPRESION | ARRAYDECLAR | TYPENAME error EXPRESION;
DECLARVARIABLEFILA ::= Coma Identificador DECLARVARIABLEFILA | {: RESULT = null; :};
ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador ARRAYDECLARFILA | TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion EXPRESION;
ARRAYDECLARFILA ::= Coma Identificador ARRAYDECLARFILA |{: RESULT = null; :};

ASIGVARIABLE ::= Identificador:id {: FrmPrincipal.tabla.ultimoIdentificadorIngresado = id.toString(); :} Op_atribucion EXPRESION;
ASIGVARIABLEFUN ::= EXPRESION Op_atribucion EXPRESION;

ACCESSMOD ::= Private | Public | error PuntoComa | {: RESULT = null; :};

CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra | error LlaveCierra;
CONTRACTPART ::= ENUMDEF CONTRACTPART | CONTRACTPART1;
CONTRACTPART1 ::= {: FrmPrincipal.tabla.varGlobal = true; :} DECLARVARIABLE PuntoComa CONTRACTPART1 | ASIGVARIABLE PuntoComa CONTRACTPART1 | CONTRACTPART2 {: FrmPrincipal.tabla.varGlobal = false; :}; 
CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 | CONTRACTPART3;
CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 | {: RESULT = null; :};

ENUMDEF ::= Enum Identificador ENUMCONTEN;
ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra | error LlaveCierra;2
ENUMLIST ::= Coma ENUMVALUE | {: RESULT = null; :};
ENUMVALUE ::= Identificador ENUMLIST;

FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN;

FUNCIONATRIB ::= ParentAbre {: FrmPrincipal.tabla.varParamet = true; :} TYPENAME Identificador FUNATRIBDOS {: FrmPrincipal.tabla.varParamet = false; :} ParentCierre |  ParentAbre ParentCierre | error ParentCierre;
FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS | {: RESULT = null; :};

MODIFICADORES ::= Payable | Private | Public | Internal | {: RESULT = null; :};
FUNCIONRETURNS ::= Returns {: FrmPrincipal.tabla.returnsEnFuncion(); :} FUNCIONATRIB | {: RESULT = null; :};
FUNCIONCONTEN ::= LlaveAbre {: FrmPrincipal.tabla.varLocal = true; :} FUNCIONCONTENVARLIS {: FrmPrincipal.tabla.varLocal = false; :} LlaveCierra | error LlaveCierra | error PuntoComa;
FUNCIONCONTENVARLIS ::= DECLARVARIABLE PuntoComa FUNCIONCONTENVARLIS | LISTA_SENTENCIAPRIMAFUN;

SENTENCIA_RETURN ::= Return Identificador:id {: FrmPrincipal.tabla.returnEnFuncionIngresado(); :} PuntoComa | Return Identificador {: Sintax.informar_Error_Especifico("Return de función sin punto y coma"); :};

PARAMFUNC ::= EXPRESION PARAMFUNCFILA | ASIGVARIABLEFUN PARAMFUNCFILA | {: RESULT = null; :};
PARAMFUNCFILA ::= Coma EXPRESION PARAMFUNCFILA | Coma ASIGVARIABLEFUN PARAMFUNCFILA  | {: RESULT = null; :};
TYPENAME ::= ELEMENTARYTYPENAME;

ELEMENTARYTYPENAME ::= Bool | Byte | Bytes | Address | Int| String | Ufixed | Uint;

FUNCCALL  ::= Identificador ParentAbre PARAMFUNC ParentCierre | This ParentAbre PARAMFUNC ParentCierre;

