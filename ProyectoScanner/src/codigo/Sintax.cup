package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};

terminal Reservadas, Operador, Transac, Units, Identificador, Literal, Address, As, Bool, Break,
         Byte, Bytes, Constructor, Continue, Contract, Delete, Do, Else, Enum, For, From, Function,
         Hex, If, Import, Int, Internal, Mapping, Modifier, Payable, Pragma, Private, Public, Return,
         Returns, Solidity, String, Struct, This, True, Ufixed, Uint, Var, View, While, Pipe, ShiftLeft,
         ShiftRight, DobleAsterisco, Coma, PuntoComa, Punto, ParenCuadAbre, ParenCuadCierra, SignoPregunta,
         DosPuntos, LlaveAbre, LlaveCierra, Ampersand, Elevar, Virgulilla, Suma, Resta, Mult, Div, Mod,
         ParentAbre, ParentCierre, Op_Booleano, Op_relacional, Op_atribucion, IntValue, UintValue, BytesValue,
         ERROR;
non terminal INICIO, SENTENCIA, LISTA_SENTENCIA, PARTE_SENTENCIA, SENTENCIA_IFELSE, SENTENCIA_WHILE, SENTENCIA_DOWHILE, SENTENCIA_FOR;
non terminal EXPRESION_BOOLEANA, EXPRECION_ARITMETICA, EXPRESION_PRIMARIA, EXPRESION_ATRIBUCION;
non terminal EXPRESION_TUPLA_PPARENTESIS, EXPRESION_TUPLA_PPARENTESIS_PRIMA;
non terminal STRUCTDEF, STRUCTCONTEN, DECLARVARIABLE, DECLARVARDOS;
non terminal FUNCIONDEF, FUNCIONATRIB, FUNATRIBDOS ,MODIFICADORES, FUNCIONRETURNS,FUNCIONCONTEN, FUNCIONCUERPO, FUNCIONRETURN;
non terminal VARASIGNA, FUNCCALL, PARAMFUNC;
non terminal TYPENAME, ELEMENTARYTYPENAME, ARRAYDECLAR, ACCESSMOD;
non terminal ENUMDEF, ENUMCONTEN, ENUMLIST, ENUMVALUE;
non terminal CONTRACTDEF, CONTRACTPART;

precedence left Suma, Resta;
precedence left Mult, Div, Mod;



start with INICIO;

INICIO ::= LISTA_SENTENCIA | STRUCTDEF | FUNCIONDEF | VARASIGNA | DECLARVARIABLE | FUNCCALL | CONTRACTDEF | ENUMDEF;

LISTA_SENTENCIA ::= LISTA_SENTENCIA SENTENCIA | SENTENCIA;
    
SENTENCIA ::= SENTENCIA_IFELSE 
            | SENTENCIA_WHILE 
            | SENTENCIA_DOWHILE 
            | SENTENCIA_FOR 
            | Break PuntoComa
            | Continue PuntoComa; //Posible error de puntos y comas(faltantes)
            

SENTENCIA_IFELSE ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra | If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra Else LlaveAbre LISTA_SENTENCIA LlaveCierra;
SENTENCIA_WHILE ::= While ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra;
SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIA LlaveCierra While ParentAbre EXPRESION_BOOLEANA ParentCierre;
SENTENCIA_FOR ::= For ParentAbre EXPRESION_ATRIBUCION Coma EXPRESION_BOOLEANA Coma EXPRESION_ATRIBUCION ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra | For ParentAbre ParentCierre LlaveAbre LlaveCierra;
//SENTENCIA_TERNARIA ::= EXPRESION_BOOLEANA SignoPregunta EXPRESION_PRIMARIA DosPuntos EXPRESION_PRIMARIA PuntoComa;

EXPRESION_BOOLEANA ::= Op_Booleano
                    | Pipe EXPRESION_BOOLEANA
                    | Pipe ParentAbre EXPRESION_BOOLEANA ParentCierre 
                    | EXPRESION_PRIMARIA Op_relacional EXPRESION_PRIMARIA
                    | EXPRESION_PRIMARIA Op_relacional ParentAbre EXPRESION_BOOLEANA ParentCierre
                    | ParentAbre EXPRESION_BOOLEANA ParentCierre Op_relacional EXPRESION_PRIMARIA;

EXPRESION_PRIMARIA ::= EXPRECION_ARITMETICA
                    | Identificador;

EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Suma EXPRECION_ARITMETICA
                    | EXPRECION_ARITMETICA Resta EXPRECION_ARITMETICA
                    | EXPRECION_ARITMETICA Mult EXPRECION_ARITMETICA
                    | EXPRECION_ARITMETICA Div EXPRECION_ARITMETICA
                    | EXPRECION_ARITMETICA Mod EXPRECION_ARITMETICA
                    | Resta EXPRECION_ARITMETICA
                    | ParentAbre EXPRECION_ARITMETICA ParentCierre
                    | Literal;

EXPRESION_ATRIBUCION ::= Identificador Op_atribucion Literal;

//////////////////////////////////////////////
STRUCTDEF ::= Struct Identificador STRUCTCONTEN;
STRUCTCONTEN ::= LlaveAbre DECLARVARIABLE LlaveCierra PuntoComa;

DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador PuntoComa | TYPENAME ACCESSMOD Identificador Op_atribucion Literal PuntoComa | ARRAYDECLAR; 
ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador PuntoComa | TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Literal PuntoComa;

ACCESSMOD ::= Private | Public | {: RESULT = null; :};

FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN;

CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra PuntoComa;
CONTRACTPART ::= ENUMDEF CONTRACTPART | DECLARVARIABLE CONTRACTPART | STRUCTDEF CONTRACTPART | FUNCIONDEF CONTRACTPART | {: RESULT = null; :};

ENUMDEF ::= Enum Identificador ENUMCONTEN;
ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra PuntoComa;
ENUMLIST ::= Coma ENUMVALUE | {: RESULT = null; :};
ENUMVALUE ::= Identificador ENUMLIST;

FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS;
FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS | ParentCierre;

MODIFICADORES ::= Payable | Private | Public | Internal | {: RESULT = null; :};
FUNCIONRETURNS ::= Returns FUNCIONATRIB | {: RESULT = null; :};
FUNCIONCONTEN ::= LlaveAbre DECLARVARIABLE FUNCIONCUERPO FUNCIONRETURN LlaveCierra;
FUNCIONCUERPO ::= {: RESULT = null; :};
FUNCIONRETURN ::= Return Identificador PuntoComa;

TYPENAME ::= ELEMENTARYTYPENAME;

ELEMENTARYTYPENAME ::= Bool | Byte | Bytes | Address | Int | String | Ufixed | Uint;

VARASIGNA ::= Identificador Op_atribucion Literal;
FUNCCALL  ::= Identificador ParentAbre PARAMFUNC ParentCierre PuntoComa;
PARAMFUNC ::= TYPENAME Identificador;

