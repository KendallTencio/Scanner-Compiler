
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 18 18:49:34 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 18 18:49:34 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\057\004\000\002\057\002\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\010\011\000\002\010\012\000" +
    "\002\010\011\000\002\011\006\000\002\012\011\000\002" +
    "\013\012\000\002\014\014\000\002\015\010\000\002\016" +
    "\003\000\002\016\004\000\002\016\006\000\002\016\005" +
    "\000\002\016\007\000\002\016\007\000\002\016\003\000" +
    "\002\020\003\000\002\020\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\004\000\002\017\005\000\002\017\003" +
    "\000\002\021\004\000\002\021\004\000\002\024\005\000" +
    "\002\025\006\000\002\026\006\000\002\026\010\000\002" +
    "\026\010\000\002\026\003\000\002\044\007\000\002\044" +
    "\011\000\002\044\011\000\002\045\003\000\002\045\003" +
    "\000\002\045\004\000\002\045\002\000\002\052\010\000" +
    "\002\053\004\000\002\053\003\000\002\053\004\000\002" +
    "\053\004\000\002\054\004\000\002\054\003\000\002\055" +
    "\004\000\002\055\003\000\002\056\004\000\002\056\002" +
    "\000\002\046\005\000\002\047\007\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\002\000\002" +
    "\051\004\000\002\030\010\000\002\031\006\000\002\032" +
    "\006\000\002\032\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\002\000" +
    "\002\034\004\000\002\034\002\000\002\035\005\000\002" +
    "\035\004\000\002\037\005\000\002\037\004\000\002\041" +
    "\004\000\002\042\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\040\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\042\004\001\002\000\004\047\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\066\010\001\002\000\012\002\ufffc\022\015\026" +
    "\013\051\014\001\002\000\012\002\ufffc\022\015\026\013" +
    "\051\014\001\002\000\012\002\ufffc\022\015\026\013\051" +
    "\014\001\002\000\004\010\332\001\002\000\004\010\324" +
    "\001\002\000\004\010\021\001\002\000\012\002\ufffc\022" +
    "\015\026\013\051\014\001\002\000\004\002\000\001\002" +
    "\000\004\002\ufffe\001\002\000\004\074\022\001\002\000" +
    "\034\003\033\012\037\014\034\016\023\017\041\026\013" +
    "\031\026\035\027\050\047\051\014\054\030\055\036\075" +
    "\uffbb\001\002\000\014\003\uffa1\010\uffa1\043\uffa1\044\uffa1" +
    "\070\uffa1\001\002\000\014\003\uffa3\010\uffa3\043\uffa3\044" +
    "\uffa3\070\uffa3\001\002\000\014\003\301\010\uffc6\043\277" +
    "\044\303\070\300\001\002\000\004\010\060\001\002\000" +
    "\014\003\uff9e\010\uff9e\043\uff9e\044\uff9e\070\uff9e\001\002" +
    "\000\014\003\uff9c\010\uff9c\043\uff9c\044\uff9c\070\uff9c\001" +
    "\002\000\034\003\033\012\037\014\034\016\023\017\041" +
    "\026\013\031\026\035\027\050\047\051\014\054\030\055" +
    "\036\075\uffbb\001\002\000\004\075\055\001\002\000\006" +
    "\066\054\075\053\001\002\000\014\003\uffa2\010\uffa2\043" +
    "\uffa2\044\uffa2\070\uffa2\001\002\000\064\003\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\021" +
    "\uffcd\024\uffcd\027\uffcd\031\uffcd\033\uffcd\035\uffcd\045\uffcd" +
    "\050\uffcd\051\uffcd\054\uffcd\055\uffcd\060\uffcd\075\uffcd\102" +
    "\uffcd\106\uffcd\110\uffcd\112\uffcd\001\002\000\014\003\uff9b" +
    "\010\uff9b\043\uff9b\044\uff9b\070\uff9b\001\002\000\014\003" +
    "\uff9f\010\uff9f\043\uff9f\044\uff9f\070\uff9f\001\002\000\030" +
    "\012\037\014\034\016\023\017\041\031\026\035\027\050" +
    "\047\051\014\054\030\055\036\075\uffbb\001\002\000\014" +
    "\003\uffa0\010\uffa0\043\uffa0\044\uffa0\070\uffa0\001\002\000" +
    "\010\031\026\051\014\075\uffbb\001\002\000\004\075\uffbd" +
    "\001\002\000\006\031\026\075\uffbb\001\002\000\004\075" +
    "\uffbf\001\002\000\004\075\uffc3\001\002\000\014\003\uff9d" +
    "\010\uff9d\043\uff9d\044\uff9d\070\uff9d\001\002\000\004\075" +
    "\uffbc\001\002\000\004\075\uffbe\001\002\000\004\075\uffc0" +
    "\001\002\000\004\075\uffc1\001\002\000\004\075\uffc2\001" +
    "\002\000\004\066\056\001\002\000\012\002\uffc5\022\uffc5" +
    "\026\uffc5\051\uffc5\001\002\000\004\075\uffc4\001\002\000" +
    "\004\106\062\001\002\000\020\003\uffab\036\075\041\074" +
    "\043\073\044\076\046\uffab\074\uffab\001\002\000\022\012" +
    "\037\014\034\016\023\017\041\035\027\050\047\054\030" +
    "\055\036\001\002\000\004\010\064\001\002\000\006\065" +
    "\065\107\066\001\002\000\022\012\037\014\034\016\023" +
    "\017\041\035\027\050\047\054\030\055\036\001\002\000" +
    "\020\003\uffb0\036\uffb0\041\uffb0\043\uffb0\044\uffb0\046\uffb0" +
    "\074\uffb0\001\002\000\020\003\uffb2\036\uffb2\041\uffb2\043" +
    "\uffb2\044\uffb2\046\uffb2\074\uffb2\001\002\000\004\010\071" +
    "\001\002\000\006\065\065\107\066\001\002\000\020\003" +
    "\uffb1\036\uffb1\041\uffb1\043\uffb1\044\uffb1\046\uffb1\074\uffb1" +
    "\001\002\000\010\003\uffae\046\uffae\074\uffae\001\002\000" +
    "\010\003\uffaf\046\uffaf\074\uffaf\001\002\000\010\003\uffac" +
    "\046\uffac\074\uffac\001\002\000\010\003\uffad\046\uffad\074" +
    "\uffad\001\002\000\010\003\uffa9\046\100\074\uffa9\001\002" +
    "\000\004\106\062\001\002\000\006\003\103\074\102\001" +
    "\002\000\060\003\125\010\134\011\106\012\037\014\034" +
    "\015\113\016\023\017\041\021\133\024\131\027\123\033" +
    "\107\035\027\045\116\050\047\054\030\055\036\060\117" +
    "\075\ufffa\102\136\106\112\110\127\112\124\001\002\000" +
    "\004\075\105\001\002\000\006\031\uffb3\075\uffb3\001\002" +
    "\000\006\031\uffa7\075\uffa7\001\002\000\030\066\uffd5\072" +
    "\uffd5\073\uffd5\075\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5" +
    "\105\uffd5\107\uffd5\111\uffd5\001\002\000\006\074\255\106" +
    "\256\001\002\000\060\003\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\021\ufff9\024\ufff9\027" +
    "\ufff9\033\ufff9\035\ufff9\045\ufff9\050\ufff9\054\ufff9\055\ufff9" +
    "\060\ufff9\075\ufff9\102\ufff9\106\ufff9\110\ufff9\112\ufff9\001" +
    "\002\000\060\003\125\010\134\011\106\012\037\014\034" +
    "\015\113\016\023\017\041\021\133\024\131\027\123\033" +
    "\107\035\027\045\116\050\047\054\030\055\036\060\117" +
    "\075\ufffa\102\136\106\112\110\127\112\124\001\002\000" +
    "\016\010\174\011\106\102\136\106\112\110\127\112\124" +
    "\001\002\000\004\066\251\001\002\000\004\066\250\001" +
    "\002\000\004\111\243\001\002\000\004\010\241\001\002" +
    "\000\004\106\233\001\002\000\060\003\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3" +
    "\024\ufff3\027\ufff3\033\ufff3\035\ufff3\045\ufff3\050\ufff3\054" +
    "\ufff3\055\ufff3\060\ufff3\075\ufff3\102\ufff3\106\ufff3\110\ufff3" +
    "\112\ufff3\001\002\000\060\003\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4\024\ufff4" +
    "\027\ufff4\033\ufff4\035\ufff4\045\ufff4\050\ufff4\054\ufff4\055" +
    "\ufff4\060\ufff4\075\ufff4\102\ufff4\106\ufff4\110\ufff4\112\ufff4" +
    "\001\002\000\004\075\232\001\002\000\004\106\215\001" +
    "\002\000\016\010\174\011\106\102\136\106\206\110\127" +
    "\112\124\001\002\000\006\066\205\075\204\001\002\000" +
    "\060\003\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\021\ufff8\024\ufff8\027\ufff8\033\ufff8\035" +
    "\ufff8\045\ufff8\050\ufff8\054\ufff8\055\ufff8\060\ufff8\075\ufff8" +
    "\102\ufff8\106\ufff8\110\ufff8\112\ufff8\001\002\000\012\066" +
    "\uffe5\072\uffe5\075\uffe5\107\uffe5\001\002\000\004\072\176" +
    "\001\002\000\004\074\166\001\002\000\060\003\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\021\ufff6\024\ufff6\027\ufff6\033\ufff6\035\ufff6\045\ufff6\050" +
    "\ufff6\054\ufff6\055\ufff6\060\ufff6\075\ufff6\102\ufff6\106\ufff6" +
    "\110\ufff6\112\ufff6\001\002\000\004\066\165\001\002\000" +
    "\010\072\uffdf\106\157\111\uffdd\001\002\000\060\003\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\021\ufff5\024\ufff5\027\ufff5\033\ufff5\035\ufff5\045\ufff5" +
    "\050\ufff5\054\ufff5\055\ufff5\060\ufff5\075\ufff5\102\ufff5\106" +
    "\ufff5\110\ufff5\112\ufff5\001\002\000\010\011\106\102\136" +
    "\106\147\001\002\000\030\066\uffde\072\uffde\073\uffde\075" +
    "\uffde\101\145\102\144\103\142\104\143\105\141\107\uffde" +
    "\111\uffde\001\002\000\060\003\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\021\ufff2\024\ufff2" +
    "\027\ufff2\033\ufff2\035\ufff2\045\ufff2\050\ufff2\054\ufff2\055" +
    "\ufff2\060\ufff2\075\ufff2\102\ufff2\106\ufff2\110\ufff2\112\ufff2" +
    "\001\002\000\010\011\106\102\136\106\147\001\002\000" +
    "\010\011\106\102\136\106\147\001\002\000\010\011\106" +
    "\102\136\106\147\001\002\000\010\011\106\102\136\106" +
    "\147\001\002\000\010\011\106\102\136\106\147\001\002" +
    "\000\030\066\uffdc\072\uffdc\073\uffdc\075\uffdc\101\uffdc\102" +
    "\uffdc\103\142\104\143\105\141\107\uffdc\111\uffdc\001\002" +
    "\000\010\011\106\102\136\106\147\001\002\000\016\101" +
    "\145\102\144\103\142\104\143\105\141\107\151\001\002" +
    "\000\030\066\uffd6\072\uffd6\073\uffd6\075\uffd6\101\uffd6\102" +
    "\uffd6\103\uffd6\104\uffd6\105\uffd6\107\uffd6\111\uffd6\001\002" +
    "\000\030\066\uffdb\072\uffdb\073\uffdb\075\uffdb\101\uffdb\102" +
    "\uffdb\103\142\104\143\105\141\107\uffdb\111\uffdb\001\002" +
    "\000\030\066\uffd9\072\uffd9\073\uffd9\075\uffd9\101\uffd9\102" +
    "\uffd9\103\uffd9\104\uffd9\105\uffd9\107\uffd9\111\uffd9\001\002" +
    "\000\030\066\uffda\072\uffda\073\uffda\075\uffda\101\uffda\102" +
    "\uffda\103\uffda\104\uffda\105\uffda\107\uffda\111\uffda\001\002" +
    "\000\030\066\uffd8\072\uffd8\073\uffd8\075\uffd8\101\uffd8\102" +
    "\uffd8\103\uffd8\104\uffd8\105\uffd8\107\uffd8\111\uffd8\001\002" +
    "\000\030\066\uffd7\072\uffd7\073\uffd7\075\uffd7\101\uffd7\102" +
    "\uffd7\103\142\104\143\105\141\107\uffd7\111\uffd7\001\002" +
    "\000\022\012\037\014\034\016\023\017\041\035\027\050" +
    "\047\054\030\055\036\001\002\000\004\010\164\001\002" +
    "\000\004\107\162\001\002\000\004\066\163\001\002\000" +
    "\060\003\uff9a\010\uff9a\011\uff9a\012\uff9a\014\uff9a\015\uff9a" +
    "\016\uff9a\017\uff9a\021\uff9a\024\uff9a\027\uff9a\033\uff9a\035" +
    "\uff9a\045\uff9a\050\uff9a\054\uff9a\055\uff9a\060\uff9a\075\uff9a" +
    "\102\uff9a\106\uff9a\110\uff9a\112\uff9a\001\002\000\004\107" +
    "\uffa4\001\002\000\060\003\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\024\ufff0\027" +
    "\ufff0\033\ufff0\035\ufff0\045\ufff0\050\ufff0\054\ufff0\055\ufff0" +
    "\060\ufff0\075\ufff0\102\ufff0\106\ufff0\110\ufff0\112\ufff0\001" +
    "\002\000\060\003\125\010\134\011\106\012\037\014\034" +
    "\015\113\016\023\017\041\021\133\024\131\027\123\033" +
    "\107\035\027\045\116\050\047\054\030\055\036\060\117" +
    "\075\ufffa\102\136\106\112\110\127\112\124\001\002\000" +
    "\004\075\170\001\002\000\004\060\171\001\002\000\004" +
    "\106\172\001\002\000\016\010\174\011\106\102\136\106" +
    "\112\110\127\112\124\001\002\000\004\107\175\001\002" +
    "\000\014\066\uffdf\072\uffdf\075\uffdf\107\uffdf\111\uffdd\001" +
    "\002\000\004\066\uffe8\001\002\000\012\010\200\011\106" +
    "\102\136\106\147\001\002\000\004\073\201\001\002\000" +
    "\014\066\uffdd\072\uffdd\073\uffdd\075\uffdd\107\uffdd\001\002" +
    "\000\012\010\200\011\106\102\136\106\147\001\002\000" +
    "\004\066\203\001\002\000\060\003\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\024" +
    "\uffe6\027\uffe6\033\uffe6\035\uffe6\045\uffe6\050\uffe6\054\uffe6" +
    "\055\uffe6\060\uffe6\075\uffe6\102\uffe6\106\uffe6\110\uffe6\112" +
    "\uffe6\001\002\000\060\003\uffee\010\uffee\011\uffee\012\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\021\uffee\024\uffee\027" +
    "\uffee\033\uffee\035\uffee\045\uffee\050\uffee\054\uffee\055\uffee" +
    "\060\uffee\075\uffee\102\uffee\106\uffee\110\uffee\112\uffee\001" +
    "\002\000\060\003\uffef\010\uffef\011\uffef\012\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\021\uffef\024\uffef\027\uffef\033" +
    "\uffef\035\uffef\045\uffef\050\uffef\054\uffef\055\uffef\060\uffef" +
    "\075\uffef\102\uffef\106\uffef\110\uffef\112\uffef\001\002\000" +
    "\016\010\174\011\106\102\136\106\112\110\127\112\124" +
    "\001\002\000\012\066\uffe4\072\uffe4\075\uffe4\107\uffe4\001" +
    "\002\000\004\107\212\001\002\000\020\101\145\102\144" +
    "\103\142\104\143\105\141\107\151\111\uffde\001\002\000" +
    "\014\066\uffe3\072\uffe3\075\uffe3\107\uffe3\111\213\001\002" +
    "\000\012\010\200\011\106\102\136\106\147\001\002\000" +
    "\012\066\uffe0\072\uffe0\075\uffe0\107\uffe0\001\002\000\022" +
    "\012\037\014\034\016\023\017\041\035\027\050\047\054" +
    "\030\055\036\001\002\000\016\010\174\011\106\102\136" +
    "\106\112\110\127\112\124\001\002\000\004\066\220\001" +
    "\002\000\006\010\222\114\223\001\002\000\004\107\226" +
    "\001\002\000\004\114\225\001\002\000\004\010\224\001" +
    "\002\000\004\107\uffd4\001\002\000\004\107\uffd3\001\002" +
    "\000\004\074\227\001\002\000\060\003\125\010\134\011" +
    "\106\012\037\014\034\015\113\016\023\017\041\021\133" +
    "\024\131\027\123\033\107\035\027\045\116\050\047\054" +
    "\030\055\036\060\117\075\ufffa\102\136\106\112\110\127" +
    "\112\124\001\002\000\004\075\231\001\002\000\060\003" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\021\uffe7\024\uffe7\027\uffe7\033\uffe7\035\uffe7\045" +
    "\uffe7\050\uffe7\054\uffe7\055\uffe7\060\uffe7\075\uffe7\102\uffe7" +
    "\106\uffe7\110\uffe7\112\uffe7\001\002\000\006\031\uffa8\075" +
    "\uffa8\001\002\000\016\010\174\011\106\102\136\106\112" +
    "\110\127\112\124\001\002\000\004\107\235\001\002\000" +
    "\004\074\236\001\002\000\060\003\125\010\134\011\106" +
    "\012\037\014\034\015\113\016\023\017\041\021\133\024" +
    "\131\027\123\033\107\035\027\045\116\050\047\054\030" +
    "\055\036\060\117\075\ufffa\102\136\106\112\110\127\112" +
    "\124\001\002\000\004\075\240\001\002\000\060\003\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\021\uffe9\024\uffe9\027\uffe9\033\uffe9\035\uffe9\045\uffe9" +
    "\050\uffe9\054\uffe9\055\uffe9\060\uffe9\075\uffe9\102\uffe9\106" +
    "\uffe9\110\uffe9\112\uffe9\001\002\000\062\003\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\021" +
    "\uffa5\024\uffa5\027\uffa5\033\uffa5\035\uffa5\045\uffa5\050\uffa5" +
    "\054\uffa5\055\uffa5\060\uffa5\066\242\075\uffa5\102\uffa5\106" +
    "\uffa5\110\uffa5\112\uffa5\001\002\000\060\003\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\021" +
    "\uffa6\024\uffa6\027\uffa6\033\uffa6\035\uffa6\045\uffa6\050\uffa6" +
    "\054\uffa6\055\uffa6\060\uffa6\075\uffa6\102\uffa6\106\uffa6\110" +
    "\uffa6\112\uffa6\001\002\000\012\010\200\011\106\102\136" +
    "\106\244\001\002\000\016\010\174\011\106\102\136\106" +
    "\112\110\127\112\124\001\002\000\012\066\uffe2\072\uffe2" +
    "\075\uffe2\107\uffe2\001\002\000\004\107\247\001\002\000" +
    "\012\066\uffe1\072\uffe1\075\uffe1\107\uffe1\001\002\000\060" +
    "\003\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\021\ufff7\024\ufff7\027\ufff7\033\ufff7\035\ufff7" +
    "\045\ufff7\050\ufff7\054\ufff7\055\ufff7\060\ufff7\075\ufff7\102" +
    "\ufff7\106\ufff7\110\ufff7\112\ufff7\001\002\000\060\003\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\021\ufff1\024\ufff1\027\ufff1\033\ufff1\035\ufff1\045\ufff1" +
    "\050\ufff1\054\ufff1\055\ufff1\060\ufff1\075\ufff1\102\ufff1\106" +
    "\ufff1\110\ufff1\112\ufff1\001\002\000\004\107\253\001\002" +
    "\000\004\111\213\001\002\000\004\075\ufffb\001\002\000" +
    "\016\010\174\011\106\102\136\106\112\110\127\112\124" +
    "\001\002\000\016\010\174\011\106\102\136\106\112\110" +
    "\127\112\124\001\002\000\004\107\260\001\002\000\004" +
    "\074\261\001\002\000\060\003\125\010\134\011\106\012" +
    "\037\014\034\015\113\016\023\017\041\021\133\024\131" +
    "\027\123\033\107\035\027\045\116\050\047\054\030\055" +
    "\036\060\117\075\ufffa\102\136\106\112\110\127\112\124" +
    "\001\002\000\004\075\263\001\002\000\062\003\uffed\010" +
    "\uffed\011\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\021\uffed\024\uffed\025\265\027\uffed\033\uffed\035\uffed\045" +
    "\uffed\050\uffed\054\uffed\055\uffed\060\uffed\075\uffed\102\uffed" +
    "\106\uffed\110\uffed\112\uffed\001\002\000\060\003\uffec\010" +
    "\uffec\011\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\021\uffec\024\uffec\027\uffec\033\uffec\035\uffec\045\uffec\050" +
    "\uffec\054\uffec\055\uffec\060\uffec\075\uffec\102\uffec\106\uffec" +
    "\110\uffec\112\uffec\001\002\000\004\074\266\001\002\000" +
    "\060\003\125\010\134\011\106\012\037\014\034\015\113" +
    "\016\023\017\041\021\133\024\131\027\123\033\107\035" +
    "\027\045\116\050\047\054\030\055\036\060\117\075\ufffa" +
    "\102\136\106\112\110\127\112\124\001\002\000\004\075" +
    "\270\001\002\000\060\003\uffea\010\uffea\011\uffea\012\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\021\uffea\024\uffea\027" +
    "\uffea\033\uffea\035\uffea\045\uffea\050\uffea\054\uffea\055\uffea" +
    "\060\uffea\075\uffea\102\uffea\106\uffea\110\uffea\112\uffea\001" +
    "\002\000\004\075\272\001\002\000\004\074\273\001\002" +
    "\000\060\003\125\010\134\011\106\012\037\014\034\015" +
    "\113\016\023\017\041\021\133\024\131\027\123\033\107" +
    "\035\027\045\116\050\047\054\030\055\036\060\117\075" +
    "\ufffa\102\136\106\112\110\127\112\124\001\002\000\004" +
    "\075\275\001\002\000\060\003\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb\024\uffeb" +
    "\027\uffeb\033\uffeb\035\uffeb\045\uffeb\050\uffeb\054\uffeb\055" +
    "\uffeb\060\uffeb\075\uffeb\102\uffeb\106\uffeb\110\uffeb\112\uffeb" +
    "\001\002\000\006\003\uffaa\074\uffaa\001\002\000\004\010" +
    "\uffc9\001\002\000\004\071\314\001\002\000\004\066\313" +
    "\001\002\000\004\010\304\001\002\000\004\010\uffc8\001" +
    "\002\000\006\066\306\113\305\001\002\000\006\010\310" +
    "\011\307\001\002\000\064\003\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\021\uffd0\024\uffd0" +
    "\027\uffd0\031\uffd0\033\uffd0\035\uffd0\045\uffd0\050\uffd0\051" +
    "\uffd0\054\uffd0\055\uffd0\060\uffd0\075\uffd0\102\uffd0\106\uffd0" +
    "\110\uffd0\112\uffd0\001\002\000\004\066\312\001\002\000" +
    "\004\066\311\001\002\000\064\003\uffce\010\uffce\011\uffce" +
    "\012\uffce\014\uffce\015\uffce\016\uffce\017\uffce\021\uffce\024" +
    "\uffce\027\uffce\031\uffce\033\uffce\035\uffce\045\uffce\050\uffce" +
    "\051\uffce\054\uffce\055\uffce\060\uffce\075\uffce\102\uffce\106" +
    "\uffce\110\uffce\112\uffce\001\002\000\064\003\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021" +
    "\uffcf\024\uffcf\027\uffcf\031\uffcf\033\uffcf\035\uffcf\045\uffcf" +
    "\050\uffcf\051\uffcf\054\uffcf\055\uffcf\060\uffcf\075\uffcf\102" +
    "\uffcf\106\uffcf\110\uffcf\112\uffcf\001\002\000\004\010\uffc7" +
    "\001\002\000\004\010\315\001\002\000\006\066\317\113" +
    "\316\001\002\000\006\010\321\011\320\001\002\000\064" +
    "\003\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\021\uffcc\024\uffcc\027\uffcc\031\uffcc\033\uffcc" +
    "\035\uffcc\045\uffcc\050\uffcc\051\uffcc\054\uffcc\055\uffcc\060" +
    "\uffcc\075\uffcc\102\uffcc\106\uffcc\110\uffcc\112\uffcc\001\002" +
    "\000\004\066\323\001\002\000\004\066\322\001\002\000" +
    "\064\003\uffca\010\uffca\011\uffca\012\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\021\uffca\024\uffca\027\uffca\031\uffca\033" +
    "\uffca\035\uffca\045\uffca\050\uffca\051\uffca\054\uffca\055\uffca" +
    "\060\uffca\075\uffca\102\uffca\106\uffca\110\uffca\112\uffca\001" +
    "\002\000\064\003\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\021\uffcb\024\uffcb\027\uffcb\031" +
    "\uffcb\033\uffcb\035\uffcb\045\uffcb\050\uffcb\051\uffcb\054\uffcb" +
    "\055\uffcb\060\uffcb\075\uffcb\102\uffcb\106\uffcb\110\uffcb\112" +
    "\uffcb\001\002\000\004\074\326\001\002\000\016\002\uffd2" +
    "\022\uffd2\026\uffd2\031\uffd2\051\uffd2\075\uffd2\001\002\000" +
    "\022\012\037\014\034\016\023\017\041\035\027\050\047" +
    "\054\030\055\036\001\002\000\004\075\330\001\002\000" +
    "\004\066\331\001\002\000\016\002\uffd1\022\uffd1\026\uffd1" +
    "\031\uffd1\051\uffd1\075\uffd1\001\002\000\004\074\333\001" +
    "\002\000\004\010\335\001\002\000\040\002\uffba\003\uffba" +
    "\012\uffba\014\uffba\016\uffba\017\uffba\022\uffba\026\uffba\031" +
    "\uffba\035\uffba\050\uffba\051\uffba\054\uffba\055\uffba\075\uffba" +
    "\001\002\000\010\003\340\065\337\075\uffb5\001\002\000" +
    "\004\075\346\001\002\000\004\010\344\001\002\000\006" +
    "\066\342\075\341\001\002\000\004\075\uffb7\001\002\000" +
    "\004\075\uffb6\001\002\000\004\075\uffb8\001\002\000\010" +
    "\003\340\065\337\075\uffb5\001\002\000\004\075\uffb4\001" +
    "\002\000\004\066\347\001\002\000\040\002\uffb9\003\uffb9" +
    "\012\uffb9\014\uffb9\016\uffb9\017\uffb9\022\uffb9\026\uffb9\031" +
    "\uffb9\035\uffb9\050\uffb9\051\uffb9\054\uffb9\055\uffb9\075\uffb9" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\016\024\011\046\010\052\015\001\001\000\012\003" +
    "\350\024\011\046\010\052\015\001\001\000\012\003\347" +
    "\024\011\046\010\052\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\017\024\011" +
    "\046\010\052\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\024\041\026\037\030\043" +
    "\042\024\043\023\044\034\046\030\053\031\054\045\055" +
    "\044\056\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\024\041\026\037\030\043" +
    "\042\024\043\023\044\034\046\030\053\056\054\045\055" +
    "\044\056\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\024\041\026\037\030\043\042\024" +
    "\043\023\044\034\054\051\055\044\056\042\001\001\000" +
    "\002\001\001\000\012\024\041\030\043\055\050\056\042" +
    "\001\001\000\002\001\001\000\006\030\043\056\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\060\001\001\000" +
    "\004\033\076\001\001\000\006\042\062\043\023\001\001" +
    "\000\002\001\001\000\004\032\066\001\001\000\006\042" +
    "\067\043\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\100\001\001\000\004\031" +
    "\275\001\001\000\004\035\103\001\001\000\042\005\110" +
    "\010\107\012\125\013\113\014\131\015\120\016\127\017" +
    "\136\020\114\026\117\037\134\040\137\042\024\043\023" +
    "\044\034\057\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\110\010\107\012\125\013" +
    "\113\014\131\015\120\016\127\017\136\020\114\026\117" +
    "\037\134\040\137\042\024\043\023\044\034\057\253\001" +
    "\001\000\010\016\251\017\210\020\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\206\017" +
    "\136\020\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\154\001\001\000\004\017\153" +
    "\001\001\000\004\017\152\001\001\000\004\017\151\001" +
    "\001\000\004\017\145\001\001\000\002\001\001\000\004" +
    "\017\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\041\160\042\157\043" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\110\010\107\012\125\013\113\014\131" +
    "\015\120\016\127\017\136\020\114\026\117\037\134\040" +
    "\137\042\024\043\023\044\034\057\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\172\017\136\020\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\136\020\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\136" +
    "\020\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\207\017\210" +
    "\020\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\136\020\213" +
    "\001\001\000\002\001\001\000\012\026\215\042\024\043" +
    "\023\044\034\001\001\000\010\016\216\017\136\020\114" +
    "\001\001\000\002\001\001\000\004\021\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\110\010\107\012\125\013\113\014\131\015\120\016\127" +
    "\017\136\020\114\026\117\037\134\040\137\042\024\043" +
    "\023\044\034\057\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\233\017\136\020" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\110\010\107\012\125\013\113\014\131\015\120\016" +
    "\127\017\136\020\114\026\117\037\134\040\137\042\024" +
    "\043\023\044\034\057\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\136\020\244\001\001\000\010\016\245\017\210\020" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\270" +
    "\017\136\020\114\001\001\000\010\016\256\017\136\020" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\110\010\107\012\125\013\113\014\131\015\120\016" +
    "\127\017\136\020\114\026\117\037\134\040\137\042\024" +
    "\043\023\044\034\057\261\001\001\000\002\001\001\000" +
    "\004\011\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\110\010\107\012\125\013\113\014\131\015" +
    "\120\016\127\017\136\020\114\026\117\037\134\040\137" +
    "\042\024\043\023\044\034\057\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\110\010\107\012\125\013\113\014\131\015" +
    "\120\016\127\017\136\020\114\026\117\037\134\040\137" +
    "\042\024\043\023\044\034\057\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\324\001\001\000\002\001\001\000" +
    "\012\026\326\042\024\043\023\044\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\335\001\001\000\002\001\001\000\004\051\342\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static boolean fatalError = false;
    public static boolean specError = false;
    public static Symbol fatalErrorSym;
    public static String specErrorDetail = "";

    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public static void informar_Error_Especifico(String tipoError){
        String specErrorStr = "ERROR: "+tipoError;//+". Línea: "+specErrorSym.right+". Columna: "+specErrorSym.left;
        specErrorDetail = specErrorStr;
        specError = true;

        System.err.println(specErrorStr);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMFUNC ::= TYPENAME Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_RETURN ::= Return Identificador 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Return de función sin punto y coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_RETURN ::= Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNCIONCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNCIONCONTEN ::= LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNCIONRETURNS ::= Returns FUNCIONATRIB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNATRIBDOS ::= ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ENUMLIST ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ENUMLIST ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTRACTPART3 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONTRACTPART2 ::= CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTRACTPART1 ::= CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTRACTPART1 ::= DECLARVARIABLE CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONTRACTPART ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONTRACTPART ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONTRACTPART ::= CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ACCESSMOD ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRUCTCONTEN ::= LlaveAbre DECLARVARIABLE LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRUCTDEF ::= Struct Identificador STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_INCREMENTAL ::= Identificador Op_Incremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_INCREMENTAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_INCREMENTAL ::= Op_Incremental Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_INCREMENTAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRECION_ARITMETICA ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRECION_ARITMETICA ::= ParentAbre EXPRECION_ARITMETICA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRECION_ARITMETICA ::= Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mod EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Div EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mult EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Suma EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION_PRIMARIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION_PRIMARIA ::= EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION_BOOLEANA ::= ParentAbre EXPRESION_BOOLEANA ParentCierre Op_relacional EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION_BOOLEANA ::= EXPRESION_PRIMARIA Op_relacional ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION_BOOLEANA ::= EXPRESION_PRIMARIA Op_relacional EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_BOOLEANA ::= Not ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION_BOOLEANA ::= Not EXPRESION_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_TERNARIA ::= EXPRESION_BOOLEANA SignoPregunta EXPRESION_PRIMARIA DosPuntos EXPRESION_PRIMARIA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_TERNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_FOR ::= For ParentAbre DECLARVARIABLE EXPRESION_BOOLEANA PuntoComa EXPRESION_INCREMENTAL ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra While ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_WHILE ::= While ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_ELSE ::= Else LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_IF ::= If LlaveAbre EXPRESION_BOOLEANA LlaveCierra LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;
		Sintax.informar_Error_Especifico("ERROR: If con llaves");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_IF ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra SENTENCIA_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_IF ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_TERNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_SENTENCIAPRIMA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIODOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIODOS ::= ENUMDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIODOS ::= CONTRACTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIODOS ::= STRUCTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity PuntoComa INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

