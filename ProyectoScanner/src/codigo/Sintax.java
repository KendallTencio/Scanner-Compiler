
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 24 21:21:31 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 24 21:21:31 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\002\000\002\065\004\000\002\065\002\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\010\011\000\002\010\012\000\002" +
    "\011\006\000\002\012\011\000\002\013\012\000\002\014" +
    "\015\000\002\014\015\000\002\015\007\000\002\022\005" +
    "\000\002\022\005\000\002\022\004\000\002\022\003\000" +
    "\002\022\003\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\004\000\002\022\003\000\002\022\003\000\002\022\005" +
    "\000\002\022\005\000\002\022\003\000\002\022\004\000" +
    "\002\022\004\000\002\022\003\000\002\025\007\000\002" +
    "\026\005\000\002\026\005\000\002\026\002\000\002\027" +
    "\006\000\002\027\007\000\002\027\003\000\002\027\005" +
    "\000\002\046\005\000\002\046\002\000\002\052\007\000" +
    "\002\052\010\000\002\047\005\000\002\047\002\000\002" +
    "\044\005\000\002\045\005\000\002\053\003\000\002\053" +
    "\003\000\002\053\004\000\002\053\002\000\002\060\007" +
    "\000\002\060\004\000\002\061\004\000\002\061\003\000" +
    "\002\062\005\000\002\062\005\000\002\062\003\000\002" +
    "\063\004\000\002\063\003\000\002\064\004\000\002\064" +
    "\002\000\002\054\005\000\002\055\006\000\002\055\004" +
    "\000\002\056\004\000\002\056\002\000\002\057\004\000" +
    "\002\032\010\000\002\033\007\000\002\033\004\000\002" +
    "\034\006\000\002\034\002\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\002" +
    "\000\002\036\004\000\002\036\002\000\002\037\005\000" +
    "\002\037\004\000\002\041\005\000\002\041\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\002\000\002\031" +
    "\005\000\002\031\005\000\002\031\002\000\002\050\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\042\006\000\002\042" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\043\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\004\067\011\001\002\000" +
    "\034\002\ufffb\003\022\013\027\015\023\017\012\020\032" +
    "\023\026\027\021\036\015\051\033\052\020\055\016\056" +
    "\025\001\002\000\014\003\uff92\011\uff92\044\uff92\045\uff92" +
    "\071\uff92\001\002\000\014\003\uff94\011\uff94\044\uff94\045" +
    "\uff94\071\uff94\001\002\000\014\003\360\011\uffbc\044\356" +
    "\045\362\071\357\001\002\000\014\003\uff8f\011\uff8f\044" +
    "\uff8f\045\uff8f\071\uff8f\001\002\000\014\003\uff8d\011\uff8d" +
    "\044\uff8d\045\uff8d\071\uff8d\001\002\000\034\002\ufffb\003" +
    "\022\013\027\015\023\017\012\020\032\023\026\027\021" +
    "\036\015\051\033\052\020\055\016\056\025\001\002\000" +
    "\004\011\343\001\002\000\004\011\327\001\002\000\004" +
    "\076\326\001\002\000\014\003\uff93\011\uff93\044\uff93\045" +
    "\uff93\071\uff93\001\002\000\004\067\uffc9\001\002\000\014" +
    "\003\uff8c\011\uff8c\044\uff8c\045\uff8c\071\uff8c\001\002\000" +
    "\004\011\042\001\002\000\014\003\uff90\011\uff90\044\uff90" +
    "\045\uff90\071\uff90\001\002\000\004\067\040\001\002\000" +
    "\034\002\ufffb\003\022\013\027\015\023\017\012\020\032" +
    "\023\026\027\021\036\015\051\033\052\020\055\016\056" +
    "\025\001\002\000\014\003\uff91\011\uff91\044\uff91\045\uff91" +
    "\071\uff91\001\002\000\014\003\uff8e\011\uff8e\044\uff8e\045" +
    "\uff8e\071\uff8e\001\002\000\004\002\000\001\002\000\034" +
    "\002\ufffb\003\022\013\027\015\023\017\012\020\032\023" +
    "\026\027\021\036\015\051\033\052\020\055\016\056\025" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\uffff\001" +
    "\002\000\034\002\ufffb\003\022\013\027\015\023\017\012" +
    "\020\032\023\026\027\021\036\015\051\033\052\020\055" +
    "\016\056\025\001\002\000\004\002\ufffc\001\002\000\004" +
    "\075\043\001\002\000\034\011\045\013\027\015\023\017" +
    "\012\020\032\027\021\032\044\036\015\051\033\052\020" +
    "\055\016\056\025\076\uffb1\001\002\000\004\011\157\001" +
    "\002\000\004\114\067\001\002\000\004\067\065\001\002" +
    "\000\034\011\045\013\027\015\023\017\012\020\032\027" +
    "\021\032\044\036\015\051\033\052\020\055\016\056\025" +
    "\076\uffb1\001\002\000\004\076\063\001\002\000\004\067" +
    "\061\001\002\000\010\032\044\052\020\076\uffb1\001\002" +
    "\000\004\076\uffb3\001\002\000\006\032\044\076\uffb1\001" +
    "\002\000\004\076\uffb5\001\002\000\004\076\uffb8\001\002" +
    "\000\004\076\uffb2\001\002\000\004\076\uffb4\001\002\000" +
    "\032\011\045\013\027\015\023\017\012\020\032\032\044" +
    "\036\015\051\033\052\020\055\016\056\025\076\uffb1\001" +
    "\002\000\004\076\uffb7\001\002\000\034\002\uffbb\003\uffbb" +
    "\013\uffbb\015\uffbb\017\uffbb\020\uffbb\023\uffbb\027\uffbb\036" +
    "\uffbb\051\uffbb\052\uffbb\055\uffbb\056\uffbb\001\002\000\004" +
    "\076\uffb9\001\002\000\032\011\045\013\027\015\023\017" +
    "\012\020\032\032\044\036\015\051\033\052\020\055\016" +
    "\056\025\076\uffb1\001\002\000\004\076\uffb6\001\002\000" +
    "\022\011\100\012\073\053\072\103\103\107\070\111\071" +
    "\113\074\115\101\001\002\000\022\011\100\012\073\053" +
    "\072\103\103\107\070\111\071\113\074\115\101\001\002" +
    "\000\034\066\uffde\067\uffde\070\uffde\073\uffde\074\uffde\102" +
    "\uffde\103\uffde\104\uffde\105\uffde\106\uffde\110\uffde\112\uffde" +
    "\114\uffde\001\002\000\006\070\151\107\150\001\002\000" +
    "\034\066\uffd3\067\uffd3\070\uffd3\073\uffd3\074\uffd3\102\uffd3" +
    "\103\uffd3\104\uffd3\105\uffd3\106\uffd3\110\uffd3\112\uffd3\114" +
    "\uffd3\001\002\000\022\011\100\012\073\053\072\103\103" +
    "\107\070\111\071\113\074\115\101\001\002\000\034\066" +
    "\uffd0\067\uffd0\070\uffd0\073\uffd0\074\uffd0\102\uffd0\103\uffd0" +
    "\104\uffd0\105\uffd0\106\uffd0\110\uffd0\112\uffd0\114\uffd0\001" +
    "\002\000\034\066\uffd7\067\uffd7\070\uffd7\073\uffd7\074\uffd7" +
    "\102\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7\110\uffd7\112" +
    "\uffd7\114\uffd7\001\002\000\034\066\uffd6\067\uffd6\070\uffd6" +
    "\073\uffd6\074\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106" +
    "\uffd6\110\uffd6\112\uffd6\114\uffd6\001\002\000\040\066\uffdf" +
    "\067\uffdf\070\uffdf\073\uffdf\074\uffdf\102\uffdf\103\uffdf\104" +
    "\uffdf\105\uffdf\106\uffdf\107\130\110\uffdf\112\uffdf\114\uffdf" +
    "\115\131\001\002\000\004\011\127\001\002\000\024\067" +
    "\uffc1\070\113\073\110\102\114\103\112\104\107\105\111" +
    "\106\105\112\106\001\002\000\022\011\100\012\073\053" +
    "\072\103\103\107\070\111\071\113\074\115\101\001\002" +
    "\000\034\066\uffd8\067\uffd8\070\113\073\110\074\uffd8\102" +
    "\uffd8\103\uffd8\104\107\105\111\106\105\110\uffd8\112\106" +
    "\114\uffd8\001\002\000\022\011\100\012\073\053\072\103" +
    "\103\107\070\111\071\113\074\115\101\001\002\000\022" +
    "\011\100\012\073\053\072\103\103\107\070\111\071\113" +
    "\074\115\101\001\002\000\022\011\100\012\073\053\072" +
    "\103\103\107\070\111\071\113\074\115\101\001\002\000" +
    "\022\011\100\012\073\053\072\103\103\107\070\111\071" +
    "\113\074\115\101\001\002\000\022\011\100\012\073\053" +
    "\072\103\103\107\070\111\071\113\074\115\101\001\002" +
    "\000\022\011\100\012\073\053\072\103\103\107\070\111" +
    "\071\113\074\115\101\001\002\000\022\011\100\012\073" +
    "\053\072\103\103\107\070\111\071\113\074\115\101\001" +
    "\002\000\022\011\100\012\073\053\072\103\103\107\070" +
    "\111\071\113\074\115\101\001\002\000\034\066\uffdd\067" +
    "\uffdd\070\113\073\110\074\uffdd\102\uffdd\103\uffdd\104\107" +
    "\105\111\106\105\110\uffdd\112\106\114\uffdd\001\002\000" +
    "\034\066\uffd4\067\uffd4\070\uffd4\073\110\074\uffd4\102\uffd4" +
    "\103\uffd4\104\uffd4\105\uffd4\106\uffd4\110\uffd4\112\uffd4\114" +
    "\uffd4\001\002\000\034\066\uffdc\067\uffdc\070\113\073\110" +
    "\074\uffdc\102\uffdc\103\uffdc\104\107\105\111\106\105\110" +
    "\uffdc\112\106\114\uffdc\001\002\000\034\066\uffda\067\uffda" +
    "\070\113\073\110\074\uffda\102\uffda\103\uffda\104\uffda\105" +
    "\uffda\106\uffda\110\uffda\112\106\114\uffda\001\002\000\024" +
    "\070\113\073\110\074\122\102\114\103\112\104\107\105" +
    "\111\106\105\112\106\001\002\000\022\011\100\012\073" +
    "\053\072\103\103\107\070\111\071\113\074\115\101\001" +
    "\002\000\034\066\uffe3\067\uffe3\070\uffe3\073\uffe3\074\uffe3" +
    "\102\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\110\uffe3\112" +
    "\uffe3\114\uffe3\001\002\000\034\066\uffdb\067\uffdb\070\113" +
    "\073\110\074\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106" +
    "\uffdb\110\uffdb\112\106\114\uffdb\001\002\000\034\066\uffe2" +
    "\067\uffe2\070\113\073\110\074\uffe2\102\uffe2\103\uffe2\104" +
    "\uffe2\105\uffe2\106\uffe2\110\uffe2\112\uffe2\114\uffe2\001\002" +
    "\000\034\066\uffd9\067\uffd9\070\113\073\110\074\uffd9\102" +
    "\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9\110\uffd9\112\106" +
    "\114\uffd9\001\002\000\034\066\uffd2\067\uffd2\070\uffd2\073" +
    "\uffd2\074\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2" +
    "\110\uffd2\112\uffd2\114\uffd2\001\002\000\024\011\100\012" +
    "\073\053\072\103\103\107\070\110\uff98\111\071\113\074" +
    "\115\101\001\002\000\034\066\uffd1\067\uffd1\070\uffd1\073" +
    "\uffd1\074\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1" +
    "\110\uffd1\112\uffd1\114\uffd1\001\002\000\004\110\146\001" +
    "\002\000\006\066\137\110\uff95\001\002\000\030\066\137" +
    "\070\113\073\110\102\114\103\112\104\107\105\111\106" +
    "\105\110\uff95\112\106\114\135\001\002\000\022\011\100" +
    "\012\073\053\072\103\103\107\070\111\071\113\074\115" +
    "\101\001\002\000\004\110\uff9a\001\002\000\022\011\100" +
    "\012\073\053\072\103\103\107\070\111\071\113\074\115" +
    "\101\001\002\000\006\066\137\110\uff95\001\002\000\030" +
    "\066\137\070\113\073\110\102\114\103\112\104\107\105" +
    "\111\106\105\110\uff95\112\106\114\135\001\002\000\004" +
    "\110\uff97\001\002\000\004\110\uff96\001\002\000\026\066" +
    "\uffc0\070\113\073\110\102\114\103\112\104\107\105\111" +
    "\106\105\110\uffc0\112\106\001\002\000\004\110\uff99\001" +
    "\002\000\034\066\uff8b\067\uff8b\070\uff8b\073\uff8b\074\uff8b" +
    "\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b\110\uff8b\112" +
    "\uff8b\114\uff8b\001\002\000\034\066\uffe0\067\uffe0\070\113" +
    "\073\110\074\uffe0\102\114\103\112\104\107\105\111\106" +
    "\105\110\uffe0\112\106\114\uffe0\001\002\000\024\011\100" +
    "\012\073\053\072\103\103\107\070\110\uff98\111\071\113" +
    "\074\115\101\001\002\000\022\011\100\012\073\053\072" +
    "\103\103\107\070\111\071\113\074\115\101\001\002\000" +
    "\034\066\uffd5\067\uffd5\070\uffd5\073\110\074\uffd5\102\uffd5" +
    "\103\uffd5\104\uffd5\105\uffd5\106\uffd5\110\uffd5\112\uffd5\114" +
    "\uffd5\001\002\000\004\110\154\001\002\000\034\066\uff8a" +
    "\067\uff8a\070\uff8a\073\uff8a\074\uff8a\102\uff8a\103\uff8a\104" +
    "\uff8a\105\uff8a\106\uff8a\110\uff8a\112\uff8a\114\uff8a\001\002" +
    "\000\024\070\113\073\110\102\114\103\112\104\107\105" +
    "\111\106\105\110\156\112\106\001\002\000\034\066\uffe1" +
    "\067\uffe1\070\uffe1\073\uffe1\074\uffe1\102\uffe1\103\uffe1\104" +
    "\uffe1\105\uffe1\106\uffe1\110\uffe1\112\uffe1\114\uffe1\001\002" +
    "\000\006\003\160\107\162\001\002\000\004\110\325\001" +
    "\002\000\020\003\uffa1\037\175\042\174\044\173\045\176" +
    "\047\uffa1\075\uffa1\001\002\000\022\013\027\015\023\017" +
    "\012\020\032\036\015\051\033\055\016\056\025\001\002" +
    "\000\004\011\164\001\002\000\006\066\165\110\uffa6\001" +
    "\002\000\022\013\027\015\023\017\012\020\032\036\015" +
    "\051\033\055\016\056\025\001\002\000\004\110\167\001" +
    "\002\000\020\003\uffa9\037\uffa9\042\uffa9\044\uffa9\045\uffa9" +
    "\047\uffa9\075\uffa9\001\002\000\004\011\171\001\002\000" +
    "\006\066\165\110\uffa6\001\002\000\004\110\uffa7\001\002" +
    "\000\010\003\uffa4\047\uffa4\075\uffa4\001\002\000\010\003" +
    "\uffa5\047\uffa5\075\uffa5\001\002\000\010\003\uffa2\047\uffa2" +
    "\075\uffa2\001\002\000\010\003\uffa3\047\uffa3\075\uffa3\001" +
    "\002\000\010\003\uff9f\047\200\075\uff9f\001\002\000\006" +
    "\003\160\107\162\001\002\000\006\003\203\075\202\001" +
    "\002\000\064\003\222\011\227\012\073\013\027\015\023" +
    "\016\211\017\012\020\032\022\226\025\224\030\221\034" +
    "\206\036\015\046\213\051\033\053\072\055\016\056\025" +
    "\061\215\076\ufff9\103\103\107\070\111\071\113\074\115" +
    "\101\001\002\000\004\076\205\001\002\000\006\032\uffaa" +
    "\076\uffaa\001\002\000\006\032\uff9d\076\uff9d\001\002\000" +
    "\004\107\311\001\002\000\064\003\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\022\ufff8\025" +
    "\ufff8\030\ufff8\034\ufff8\036\ufff8\046\ufff8\051\ufff8\053\ufff8" +
    "\055\ufff8\056\ufff8\061\ufff8\076\ufff8\103\ufff8\107\ufff8\111" +
    "\ufff8\113\ufff8\115\ufff8\001\002\000\064\003\222\011\227" +
    "\012\073\013\027\015\023\016\211\017\012\020\032\022" +
    "\226\025\224\030\221\034\206\036\015\046\213\051\033" +
    "\053\072\055\016\056\025\061\215\076\ufff9\103\103\107" +
    "\070\111\071\113\074\115\101\001\002\000\004\067\307" +
    "\001\002\000\004\067\306\001\002\000\004\011\304\001" +
    "\002\000\004\067\303\001\002\000\004\107\275\001\002" +
    "\000\004\067\274\001\002\000\024\067\273\070\uffd0\073" +
    "\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0\112\uffd0" +
    "\001\002\000\004\076\272\001\002\000\004\107\247\001" +
    "\002\000\010\067\246\076\244\110\245\001\002\000\064" +
    "\003\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\022\ufff7\025\ufff7\030\ufff7\034\ufff7\036\ufff7" +
    "\046\ufff7\051\ufff7\053\ufff7\055\ufff7\056\ufff7\061\ufff7\076" +
    "\ufff7\103\ufff7\107\ufff7\111\ufff7\113\ufff7\115\ufff7\001\002" +
    "\000\004\075\235\001\002\000\064\003\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5" +
    "\025\ufff5\030\ufff5\034\ufff5\036\ufff5\046\ufff5\051\ufff5\053" +
    "\ufff5\055\ufff5\056\ufff5\061\ufff5\076\ufff5\103\ufff5\107\ufff5" +
    "\111\ufff5\113\ufff5\115\ufff5\001\002\000\004\067\234\001" +
    "\002\000\030\070\uffdf\073\uffdf\102\uffdf\103\uffdf\104\uffdf" +
    "\105\uffdf\106\uffdf\107\130\112\uffdf\114\067\115\131\001" +
    "\002\000\064\003\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\022\ufff4\025\ufff4\030\ufff4\034" +
    "\ufff4\036\ufff4\046\ufff4\051\ufff4\053\ufff4\055\ufff4\056\ufff4" +
    "\061\ufff4\076\ufff4\103\ufff4\107\ufff4\111\ufff4\113\ufff4\115" +
    "\ufff4\001\002\000\022\070\113\073\110\102\114\103\112" +
    "\104\107\105\111\106\105\112\106\001\002\000\024\067" +
    "\233\070\uffd6\073\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6" +
    "\106\uffd6\112\uffd6\001\002\000\064\003\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\022\ufff0" +
    "\025\ufff0\030\ufff0\034\ufff0\036\ufff0\046\ufff0\051\ufff0\053" +
    "\ufff0\055\ufff0\056\ufff0\061\ufff0\076\ufff0\103\ufff0\107\ufff0" +
    "\111\ufff0\113\ufff0\115\ufff0\001\002\000\064\003\uffee\011" +
    "\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\022\uffee\025\uffee\030\uffee\034\uffee\036\uffee\046\uffee\051" +
    "\uffee\053\uffee\055\uffee\056\uffee\061\uffee\076\uffee\103\uffee" +
    "\107\uffee\111\uffee\113\uffee\115\uffee\001\002\000\064\003" +
    "\222\011\227\012\073\013\027\015\023\016\211\017\012" +
    "\020\032\022\226\025\224\030\221\034\206\036\015\046" +
    "\213\051\033\053\072\055\016\056\025\061\215\076\ufff9" +
    "\103\103\107\070\111\071\113\074\115\101\001\002\000" +
    "\004\076\237\001\002\000\004\061\240\001\002\000\004" +
    "\107\241\001\002\000\022\011\100\012\073\053\072\103" +
    "\103\107\070\111\071\113\074\115\101\001\002\000\024" +
    "\070\113\073\110\102\114\103\112\104\107\105\111\106" +
    "\105\110\243\112\106\001\002\000\004\067\uffe6\001\002" +
    "\000\064\003\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\022\uffec\025\uffec\030\uffec\034\uffec" +
    "\036\uffec\046\uffec\051\uffec\053\uffec\055\uffec\056\uffec\061" +
    "\uffec\076\uffec\103\uffec\107\uffec\111\uffec\113\uffec\115\uffec" +
    "\001\002\000\064\003\uffeb\011\uffeb\012\uffeb\013\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\022\uffeb\025\uffeb\030\uffeb" +
    "\034\uffeb\036\uffeb\046\uffeb\051\uffeb\053\uffeb\055\uffeb\056" +
    "\uffeb\061\uffeb\076\uffeb\103\uffeb\107\uffeb\111\uffeb\113\uffeb" +
    "\115\uffeb\001\002\000\064\003\uffed\011\uffed\012\uffed\013" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\022\uffed\025\uffed" +
    "\030\uffed\034\uffed\036\uffed\046\uffed\051\uffed\053\uffed\055" +
    "\uffed\056\uffed\061\uffed\076\uffed\103\uffed\107\uffed\111\uffed" +
    "\113\uffed\115\uffed\001\002\000\024\011\045\013\027\015" +
    "\023\017\012\020\032\036\015\051\033\055\016\056\025" +
    "\001\002\000\004\067\262\001\002\000\004\067\252\001" +
    "\002\000\022\011\100\012\073\053\072\103\103\107\070" +
    "\111\071\113\074\115\101\001\002\000\024\067\254\070" +
    "\113\073\110\102\114\103\112\104\107\105\111\106\105" +
    "\112\106\001\002\000\022\011\100\012\073\053\072\103" +
    "\103\107\070\111\071\113\074\115\101\001\002\000\024" +
    "\070\113\073\110\102\114\103\112\104\107\105\111\106" +
    "\105\110\256\112\106\001\002\000\004\075\257\001\002" +
    "\000\064\003\222\011\227\012\073\013\027\015\023\016" +
    "\211\017\012\020\032\022\226\025\224\030\221\034\206" +
    "\036\015\046\213\051\033\053\072\055\016\056\025\061" +
    "\215\076\ufff9\103\103\107\070\111\071\113\074\115\101" +
    "\001\002\000\004\076\261\001\002\000\064\003\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\022\uffe4\025\uffe4\030\uffe4\034\uffe4\036\uffe4\046\uffe4\051" +
    "\uffe4\053\uffe4\055\uffe4\056\uffe4\061\uffe4\076\uffe4\103\uffe4" +
    "\107\uffe4\111\uffe4\113\uffe4\115\uffe4\001\002\000\022\011" +
    "\100\012\073\053\072\103\103\107\070\111\071\113\074" +
    "\115\101\001\002\000\024\067\264\070\113\073\110\102" +
    "\114\103\112\104\107\105\111\106\105\112\106\001\002" +
    "\000\022\011\100\012\073\053\072\103\103\107\070\111" +
    "\071\113\074\115\101\001\002\000\024\070\113\073\110" +
    "\102\114\103\112\104\107\105\111\106\105\110\266\112" +
    "\106\001\002\000\004\075\267\001\002\000\064\003\222" +
    "\011\227\012\073\013\027\015\023\016\211\017\012\020" +
    "\032\022\226\025\224\030\221\034\206\036\015\046\213" +
    "\051\033\053\072\055\016\056\025\061\215\076\ufff9\103" +
    "\103\107\070\111\071\113\074\115\101\001\002\000\004" +
    "\076\271\001\002\000\064\003\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\025\uffe5" +
    "\030\uffe5\034\uffe5\036\uffe5\046\uffe5\051\uffe5\053\uffe5\055" +
    "\uffe5\056\uffe5\061\uffe5\076\uffe5\103\uffe5\107\uffe5\111\uffe5" +
    "\113\uffe5\115\uffe5\001\002\000\006\032\uff9e\076\uff9e\001" +
    "\002\000\064\003\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\022\ufff3\025\ufff3\030\ufff3\034" +
    "\ufff3\036\ufff3\046\ufff3\051\ufff3\053\ufff3\055\ufff3\056\ufff3" +
    "\061\ufff3\076\ufff3\103\ufff3\107\ufff3\111\ufff3\113\ufff3\115" +
    "\ufff3\001\002\000\064\003\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\025\ufff2\030" +
    "\ufff2\034\ufff2\036\ufff2\046\ufff2\051\ufff2\053\ufff2\055\ufff2" +
    "\056\ufff2\061\ufff2\076\ufff2\103\ufff2\107\ufff2\111\ufff2\113" +
    "\ufff2\115\ufff2\001\002\000\022\011\100\012\073\053\072" +
    "\103\103\107\070\111\071\113\074\115\101\001\002\000" +
    "\024\070\113\073\110\102\114\103\112\104\107\105\111" +
    "\106\105\110\277\112\106\001\002\000\004\075\300\001" +
    "\002\000\064\003\222\011\227\012\073\013\027\015\023" +
    "\016\211\017\012\020\032\022\226\025\224\030\221\034" +
    "\206\036\015\046\213\051\033\053\072\055\016\056\025" +
    "\061\215\076\ufff9\103\103\107\070\111\071\113\074\115" +
    "\101\001\002\000\004\076\302\001\002\000\064\003\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\022\uffe7\025\uffe7\030\uffe7\034\uffe7\036\uffe7\046\uffe7" +
    "\051\uffe7\053\uffe7\055\uffe7\056\uffe7\061\uffe7\076\uffe7\103" +
    "\uffe7\107\uffe7\111\uffe7\113\uffe7\115\uffe7\001\002\000\064" +
    "\003\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\022\ufff1\025\ufff1\030\ufff1\034\ufff1\036\ufff1" +
    "\046\ufff1\051\ufff1\053\ufff1\055\ufff1\056\ufff1\061\ufff1\076" +
    "\ufff1\103\ufff1\107\ufff1\111\ufff1\113\ufff1\115\ufff1\001\002" +
    "\000\066\003\uff9b\011\uff9b\012\uff9b\013\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\022\uff9b\025\uff9b\030\uff9b\034\uff9b" +
    "\036\uff9b\046\uff9b\051\uff9b\053\uff9b\055\uff9b\056\uff9b\061" +
    "\uff9b\067\305\076\uff9b\103\uff9b\107\uff9b\111\uff9b\113\uff9b" +
    "\115\uff9b\001\002\000\064\003\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\022\uff9c\025\uff9c" +
    "\030\uff9c\034\uff9c\036\uff9c\046\uff9c\051\uff9c\053\uff9c\055" +
    "\uff9c\056\uff9c\061\uff9c\076\uff9c\103\uff9c\107\uff9c\111\uff9c" +
    "\113\uff9c\115\uff9c\001\002\000\064\003\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\022\ufff6" +
    "\025\ufff6\030\ufff6\034\ufff6\036\ufff6\046\ufff6\051\ufff6\053" +
    "\ufff6\055\ufff6\056\ufff6\061\ufff6\076\ufff6\103\ufff6\107\ufff6" +
    "\111\ufff6\113\ufff6\115\ufff6\001\002\000\064\003\uffef\011" +
    "\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\022\uffef\025\uffef\030\uffef\034\uffef\036\uffef\046\uffef\051" +
    "\uffef\053\uffef\055\uffef\056\uffef\061\uffef\076\uffef\103\uffef" +
    "\107\uffef\111\uffef\113\uffef\115\uffef\001\002\000\004\076" +
    "\ufffa\001\002\000\022\011\100\012\073\053\072\103\103" +
    "\107\070\111\071\113\074\115\101\001\002\000\024\070" +
    "\113\073\110\102\114\103\112\104\107\105\111\106\105" +
    "\110\313\112\106\001\002\000\004\075\314\001\002\000" +
    "\064\003\222\011\227\012\073\013\027\015\023\016\211" +
    "\017\012\020\032\022\226\025\224\030\221\034\206\036" +
    "\015\046\213\051\033\053\072\055\016\056\025\061\215" +
    "\076\ufff9\103\103\107\070\111\071\113\074\115\101\001" +
    "\002\000\004\076\316\001\002\000\066\003\uffea\011\uffea" +
    "\012\uffea\013\uffea\015\uffea\016\uffea\017\uffea\020\uffea\022" +
    "\uffea\025\uffea\026\320\030\uffea\034\uffea\036\uffea\046\uffea" +
    "\051\uffea\053\uffea\055\uffea\056\uffea\061\uffea\076\uffea\103" +
    "\uffea\107\uffea\111\uffea\113\uffea\115\uffea\001\002\000\064" +
    "\003\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\022\uffe9\025\uffe9\030\uffe9\034\uffe9\036\uffe9" +
    "\046\uffe9\051\uffe9\053\uffe9\055\uffe9\056\uffe9\061\uffe9\076" +
    "\uffe9\103\uffe9\107\uffe9\111\uffe9\113\uffe9\115\uffe9\001\002" +
    "\000\004\075\321\001\002\000\064\003\222\011\227\012" +
    "\073\013\027\015\023\016\211\017\012\020\032\022\226" +
    "\025\224\030\221\034\206\036\015\046\213\051\033\053" +
    "\072\055\016\056\025\061\215\076\ufff9\103\103\107\070" +
    "\111\071\113\074\115\101\001\002\000\004\076\323\001" +
    "\002\000\064\003\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\022\uffe8\025\uffe8\030\uffe8\034" +
    "\uffe8\036\uffe8\046\uffe8\051\uffe8\053\uffe8\055\uffe8\056\uffe8" +
    "\061\uffe8\076\uffe8\103\uffe8\107\uffe8\111\uffe8\113\uffe8\115" +
    "\uffe8\001\002\000\006\003\uffa0\075\uffa0\001\002\000\020" +
    "\003\uffa8\037\uffa8\042\uffa8\044\uffa8\045\uffa8\047\uffa8\075" +
    "\uffa8\001\002\000\034\002\uffba\003\uffba\013\uffba\015\uffba" +
    "\017\uffba\020\uffba\023\uffba\027\uffba\036\uffba\051\uffba\052" +
    "\uffba\055\uffba\056\uffba\001\002\000\006\003\331\075\330" +
    "\001\002\000\004\011\334\001\002\000\004\076\333\001" +
    "\002\000\042\002\uffb0\003\uffb0\011\uffb0\013\uffb0\015\uffb0" +
    "\017\uffb0\020\uffb0\023\uffb0\027\uffb0\032\uffb0\036\uffb0\051" +
    "\uffb0\052\uffb0\055\uffb0\056\uffb0\076\uffb0\001\002\000\042" +
    "\002\uffae\003\uffae\011\uffae\013\uffae\015\uffae\017\uffae\020" +
    "\uffae\023\uffae\027\uffae\032\uffae\036\uffae\051\uffae\052\uffae" +
    "\055\uffae\056\uffae\076\uffae\001\002\000\006\066\336\076" +
    "\uffac\001\002\000\004\076\342\001\002\000\004\011\340" +
    "\001\002\000\004\076\uffad\001\002\000\006\066\336\076" +
    "\uffac\001\002\000\004\076\uffab\001\002\000\042\002\uffaf" +
    "\003\uffaf\011\uffaf\013\uffaf\015\uffaf\017\uffaf\020\uffaf\023" +
    "\uffaf\027\uffaf\032\uffaf\036\uffaf\051\uffaf\052\uffaf\055\uffaf" +
    "\056\uffaf\076\uffaf\001\002\000\004\075\344\001\002\000" +
    "\026\011\045\013\027\015\023\017\012\020\032\036\015" +
    "\051\033\055\016\056\025\076\uffcc\001\002\000\004\076" +
    "\354\001\002\000\004\067\352\001\002\000\004\067\350" +
    "\001\002\000\026\011\045\013\027\015\023\017\012\020" +
    "\032\036\015\051\033\055\016\056\025\076\uffcc\001\002" +
    "\000\004\076\uffcd\001\002\000\026\011\045\013\027\015" +
    "\023\017\012\020\032\036\015\051\033\055\016\056\025" +
    "\076\uffcc\001\002\000\004\076\uffce\001\002\000\040\002" +
    "\uffcf\003\uffcf\013\uffcf\015\uffcf\017\uffcf\020\uffcf\023\uffcf" +
    "\027\uffcf\032\uffcf\036\uffcf\051\uffcf\052\uffcf\055\uffcf\056" +
    "\uffcf\076\uffcf\001\002\000\004\002\ufffd\001\002\000\004" +
    "\011\uffbf\001\002\000\004\072\374\001\002\000\024\011" +
    "\100\012\073\053\072\067\372\103\103\107\070\111\071" +
    "\113\074\115\101\001\002\000\004\011\363\001\002\000" +
    "\004\011\uffbe\001\002\000\010\066\365\067\uffc6\114\364" +
    "\001\002\000\022\011\100\012\073\053\072\103\103\107" +
    "\070\111\071\113\074\115\101\001\002\000\004\011\367" +
    "\001\002\000\004\067\uffcb\001\002\000\006\066\365\067" +
    "\uffc6\001\002\000\004\067\uffc7\001\002\000\024\067\uffca" +
    "\070\113\073\110\102\114\103\112\104\107\105\111\106" +
    "\105\112\106\001\002\000\004\011\uffbd\001\002\000\024" +
    "\067\uffc8\070\113\073\110\102\114\103\112\104\107\105" +
    "\111\106\105\112\106\001\002\000\004\011\375\001\002" +
    "\000\010\066\377\067\uffc2\114\376\001\002\000\022\011" +
    "\100\012\073\053\072\103\103\107\070\111\071\113\074" +
    "\115\101\001\002\000\004\011\u0101\001\002\000\004\067" +
    "\uffc5\001\002\000\006\066\377\067\uffc2\001\002\000\004" +
    "\067\uffc3\001\002\000\024\067\uffc4\070\113\073\110\102" +
    "\114\103\112\104\107\105\111\106\105\112\106\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\033\025\030\027\027\050\013\051" +
    "\012\052\023\054\016\060\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\360\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\354\025\030\027\027" +
    "\050\013\051\012\052\023\054\016\060\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\036" +
    "\025\030\027\027\050\013\051\012\052\023\054\016\060" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\035\025\030\027\027\050\013\051" +
    "\012\052\023\054\016\060\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\040\025\030\027\027\050" +
    "\013\051\012\052\023\054\016\060\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\025\051\027\050\032" +
    "\053\044\045\050\013\051\012\052\023\054\046\061\047" +
    "\062\055\063\054\064\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\025\051\027\050" +
    "\032\053\044\045\050\013\051\012\052\023\054\046\061" +
    "\063\062\055\063\054\064\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\051\032\053\063\057\064" +
    "\052\001\001\000\002\001\001\000\006\032\053\064\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\025\051\027\050\032\053" +
    "\044\045\050\013\051\012\052\023\062\061\063\054\064" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\025\051\027\050\032\053\044\045\050" +
    "\013\051\012\052\023\062\065\063\054\064\052\001\001" +
    "\000\002\001\001\000\012\015\074\021\075\022\101\042" +
    "\076\001\001\000\012\015\074\021\075\022\154\042\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\074\021\075\022\146\042\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\074\021\075\022\103\042\076\001\001\000\002\001" +
    "\001\000\012\015\074\021\075\022\125\042\076\001\001" +
    "\000\012\015\074\021\075\022\124\042\076\001\001\000" +
    "\012\015\074\021\075\022\123\042\076\001\001\000\012" +
    "\015\074\021\075\022\120\042\076\001\001\000\012\015" +
    "\074\021\075\022\117\042\076\001\001\000\012\015\074" +
    "\021\075\022\116\042\076\001\001\000\012\015\074\021" +
    "\075\022\115\042\076\001\001\000\012\015\074\021\075" +
    "\022\114\042\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\074\021\075\022\122\042\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\074\021\075\022" +
    "\133\042\076\043\131\045\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\144\001\001\000\004\031" +
    "\135\001\001\000\012\015\074\021\075\022\143\042\076" +
    "\001\001\000\002\001\001\000\014\015\074\021\075\022" +
    "\140\042\076\045\137\001\001\000\004\031\142\001\001" +
    "\000\004\031\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\015\074\021\075\022\133\042" +
    "\076\043\152\045\132\001\001\000\012\015\074\021\075" +
    "\022\151\042\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\160\001\001\000\002\001\001\000\004\035" +
    "\176\001\001\000\006\050\162\051\012\001\001\000\002" +
    "\001\001\000\004\034\165\001\001\000\006\050\167\051" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\200\001\001\000\004\033\323\001" +
    "\001\000\004\037\203\001\001\000\042\005\207\010\206" +
    "\012\222\013\211\014\224\015\216\021\075\022\230\027" +
    "\215\041\227\042\231\044\213\050\013\051\012\052\023" +
    "\065\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\207\010\206\012\222\013\211\014\224\015\216\021" +
    "\075\022\230\027\215\041\227\042\231\044\213\050\013" +
    "\051\012\052\023\065\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\207\010\206\012\222\013\211\014\224\015\216\021\075" +
    "\022\230\027\215\041\227\042\231\044\213\050\013\051" +
    "\012\052\023\065\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\074\021\075\022" +
    "\241\042\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\027\247\044\250\050\013\051\012\052\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\074\021" +
    "\075\022\252\042\076\001\001\000\002\001\001\000\012" +
    "\015\074\021\075\022\254\042\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\005\207\010\206\012\222" +
    "\013\211\014\224\015\216\021\075\022\230\027\215\041" +
    "\227\042\231\044\213\050\013\051\012\052\023\065\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\074\021\075\022\262\042\076\001\001\000\002\001\001" +
    "\000\012\015\074\021\075\022\264\042\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\005\207\010\206" +
    "\012\222\013\211\014\224\015\216\021\075\022\230\027" +
    "\215\041\227\042\231\044\213\050\013\051\012\052\023" +
    "\065\267\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\074\021\075\022\275\042\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\005\207\010\206\012\222" +
    "\013\211\014\224\015\216\021\075\022\230\027\215\041" +
    "\227\042\231\044\213\050\013\051\012\052\023\065\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\074\021" +
    "\075\022\311\042\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\207\010\206\012\222\013\211\014" +
    "\224\015\216\021\075\022\230\027\215\041\227\042\231" +
    "\044\213\050\013\051\012\052\023\065\314\001\001\000" +
    "\002\001\001\000\004\011\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\207\010\206\012\222\013" +
    "\211\014\224\015\216\021\075\022\230\027\215\041\227" +
    "\042\231\044\213\050\013\051\012\052\023\065\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\334\001\001\000\002\001" +
    "\001\000\004\057\336\001\001\000\002\001\001\000\004" +
    "\056\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\026\344\027\345\044\346\050\013" +
    "\051\012\052\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\026\350\027\345\044\346" +
    "\050\013\051\012\052\023\001\001\000\002\001\001\000" +
    "\016\026\352\027\345\044\346\050\013\051\012\052\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\074" +
    "\021\075\022\372\042\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\365\001\001\000\012\015\074" +
    "\021\075\022\370\042\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\367\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\377\001\001\000\012\015\074" +
    "\021\075\022\u0102\042\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u0101\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static ArrayList<String> erroresEspec = new ArrayList<String>();
    public static boolean fatalError = false;
    public static boolean specError = false;
    public static Symbol fatalErrorSym;
    public static String specErrorDetail = "";

    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public static void informar_Error_Especifico(String tipoError){
        String specErrorStr = "ERROR: "+tipoError;
        specErrorDetail = specErrorStr;
        erroresEspec.add(specErrorStr);
        specError = true;

        System.err.println(specErrorStr);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FUNCCALL ::= This ParentAbre PARAMFUNC ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMFUNCFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMFUNCFILA ::= Coma ASIGVARIABLEFUN PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAMFUNCFILA ::= Coma EXPRESION PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PARAMFUNC ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMFUNC ::= ASIGVARIABLEFUN PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMFUNC ::= EXPRESION PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_RETURN ::= Return Identificador 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Return de función sin punto y coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_RETURN ::= Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCIONCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCIONCONTEN ::= LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUNCIONRETURNS ::= Returns FUNCIONATRIB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNATRIBDOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNCIONATRIB ::= error ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ENUMCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONTRACTPART3 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONTRACTPART2 ::= CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTRACTPART1 ::= CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTRACTPART1 ::= ASIGVARIABLE PuntoComa CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTRACTPART1 ::= DECLARVARIABLE PuntoComa CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTRACTPART ::= CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTRACTDEF ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCESSMOD ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGVARIABLEFUN ::= EXPRESION Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLEFUN",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGVARIABLE ::= Identificador Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARRAYDECLARFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARRAYDECLARFILA ::= Coma Identificador ARRAYDECLARFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador ARRAYDECLARFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARVARIABLEFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARVARIABLEFILA ::= Coma Identificador DECLARVARIABLEFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARVARIABLE ::= TYPENAME error EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador DECLARVARIABLEFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRUCTCONTEN ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRUCTCONTEN ::= ASIGVARIABLE PuntoComa STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STRUCTCONTEN ::= DECLARVARIABLE PuntoComa STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRUCTDEF ::= Struct Identificador LlaveAbre STRUCTCONTEN LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= SENTENCIA_TERNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= Identificador Op_Incremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= Op_Incremental Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION Punto EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= This Punto EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION_INCREMENTAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION Mod EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION Div EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION Mult EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= Not EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= ParentAbre EXPRESION ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_TERNARIA ::= EXPRESION SignoPregunta EXPRESION DosPuntos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_TERNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_FOR ::= For ParentAbre ASIGVARIABLE PuntoComa EXPRESION PuntoComa EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_FOR ::= For ParentAbre DECLARVARIABLE PuntoComa EXPRESION PuntoComa EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra While ParentAbre EXPRESION ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_WHILE ::= While ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_ELSE ::= Else LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_IF ::= If ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra SENTENCIA_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_IF ::= If ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= error ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FUNCCALL PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ASIGVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DECLARVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_TERNARIA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_SENTENCIAPRIMA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIODOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIODOS ::= DECLARVARIABLE PuntoComa INICIODOS 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Declaración fuera de función"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIODOS ::= ENUMDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIODOS ::= CONTRACTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIODOS ::= STRUCTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Version PuntoComa INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

