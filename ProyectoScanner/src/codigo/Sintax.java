
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 23 12:51:23 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 23 12:51:23 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\062\004\000\002\062\002\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\010\011\000\002\010\012\000\002\010\011\000\002" +
    "\011\006\000\002\012\011\000\002\013\012\000\002\014" +
    "\014\000\002\015\010\000\002\016\003\000\002\016\004" +
    "\000\002\016\006\000\002\016\005\000\002\016\007\000" +
    "\002\016\007\000\002\016\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\004\000\002\017\005\000\002\017\003" +
    "\000\002\020\004\000\002\020\004\000\002\023\005\000" +
    "\002\024\006\000\002\025\007\000\002\025\010\000\002" +
    "\025\010\000\002\025\003\000\002\043\005\000\002\043" +
    "\002\000\002\047\010\000\002\047\011\000\002\047\011" +
    "\000\002\044\005\000\002\044\002\000\002\042\005\000" +
    "\002\042\005\000\002\050\003\000\002\050\003\000\002" +
    "\050\004\000\002\050\002\000\002\055\007\000\002\055" +
    "\004\000\002\056\004\000\002\056\003\000\002\057\004" +
    "\000\002\057\004\000\002\057\003\000\002\060\004\000" +
    "\002\060\003\000\002\061\004\000\002\061\002\000\002" +
    "\051\005\000\002\052\006\000\002\052\004\000\002\053" +
    "\004\000\002\053\002\000\002\054\004\000\002\030\010" +
    "\000\002\031\006\000\002\032\006\000\002\032\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\002\000\002\034\004\000\002\034" +
    "\002\000\002\035\005\000\002\035\004\000\002\037\005" +
    "\000\002\037\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\002\000\002\027\005\000\002" +
    "\027\005\000\002\027\004\000\002\027\002\000\002\045" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\040\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\043\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\004\067\011\001\002\000" +
    "\034\002\ufffb\003\022\013\027\015\023\017\012\020\031" +
    "\023\026\027\021\036\015\051\033\052\020\055\017\056" +
    "\025\001\002\000\014\003\uff95\011\uff95\044\uff95\045\uff95" +
    "\071\uff95\001\002\000\014\003\uff97\011\uff97\044\uff97\045" +
    "\uff97\071\uff97\001\002\000\014\003\347\011\uffc0\044\345" +
    "\045\351\071\346\001\002\000\014\003\uff92\011\uff92\044" +
    "\uff92\045\uff92\071\uff92\001\002\000\034\002\ufffb\003\022" +
    "\013\027\015\023\017\012\020\031\023\026\027\021\036" +
    "\015\051\033\052\020\055\017\056\025\001\002\000\014" +
    "\003\uff90\011\uff90\044\uff90\045\uff90\071\uff90\001\002\000" +
    "\004\011\336\001\002\000\004\011\322\001\002\000\004" +
    "\076\321\001\002\000\014\003\uff96\011\uff96\044\uff96\045" +
    "\uff96\071\uff96\001\002\000\072\002\uffcd\003\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\022" +
    "\uffcd\023\uffcd\025\uffcd\027\uffcd\030\uffcd\032\uffcd\034\uffcd" +
    "\036\uffcd\046\uffcd\051\uffcd\052\uffcd\055\uffcd\056\uffcd\061" +
    "\uffcd\076\uffcd\103\uffcd\107\uffcd\111\uffcd\113\uffcd\001\002" +
    "\000\014\003\uff8f\011\uff8f\044\uff8f\045\uff8f\071\uff8f\001" +
    "\002\000\004\011\041\001\002\000\014\003\uff93\011\uff93" +
    "\044\uff93\045\uff93\071\uff93\001\002\000\034\002\ufffb\003" +
    "\022\013\027\015\023\017\012\020\031\023\026\027\021" +
    "\036\015\051\033\052\020\055\017\056\025\001\002\000" +
    "\014\003\uff94\011\uff94\044\uff94\045\uff94\071\uff94\001\002" +
    "\000\034\002\ufffb\003\022\013\027\015\023\017\012\020" +
    "\031\023\026\027\021\036\015\051\033\052\020\055\017" +
    "\056\025\001\002\000\014\003\uff91\011\uff91\044\uff91\045" +
    "\uff91\071\uff91\001\002\000\004\002\000\001\002\000\034" +
    "\002\ufffb\003\022\013\027\015\023\017\012\020\031\023" +
    "\026\027\021\036\015\051\033\052\020\055\017\056\025" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\ufffc\001\002\000\004\075\042\001\002" +
    "\000\034\011\044\013\027\015\023\017\012\020\031\027" +
    "\021\032\043\036\015\051\033\052\020\055\017\056\025" +
    "\076\uffb5\001\002\000\004\011\107\001\002\000\004\114" +
    "\064\001\002\000\032\011\044\013\027\015\023\017\012" +
    "\020\031\032\043\036\015\051\033\052\020\055\017\056" +
    "\025\076\uffb5\001\002\000\034\011\044\013\027\015\023" +
    "\017\012\020\031\027\021\032\043\036\015\051\033\052" +
    "\020\055\017\056\025\076\uffb5\001\002\000\004\076\061" +
    "\001\002\000\032\011\044\013\027\015\023\017\012\020" +
    "\031\032\043\036\015\051\033\052\020\055\017\056\025" +
    "\076\uffb5\001\002\000\010\032\043\052\020\076\uffb5\001" +
    "\002\000\004\076\uffb7\001\002\000\006\032\043\076\uffb5" +
    "\001\002\000\004\076\uffb9\001\002\000\004\076\uffbc\001" +
    "\002\000\004\076\uffb6\001\002\000\004\076\uffb8\001\002" +
    "\000\004\076\uffbb\001\002\000\034\002\uffbf\003\uffbf\013" +
    "\uffbf\015\uffbf\017\uffbf\020\uffbf\023\uffbf\027\uffbf\036\uffbf" +
    "\051\uffbf\052\uffbf\055\uffbf\056\uffbf\001\002\000\004\076" +
    "\uffbd\001\002\000\004\076\uffba\001\002\000\012\011\071" +
    "\012\065\103\070\107\067\001\002\000\060\011\uffd5\013" +
    "\uffd5\015\uffd5\017\uffd5\020\uffd5\032\uffd5\036\uffd5\051\uffd5" +
    "\052\uffd5\055\uffd5\056\uffd5\066\uffd5\067\uffd5\073\uffd5\074" +
    "\uffd5\076\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5" +
    "\110\uffd5\112\uffd5\001\002\000\052\011\uffc5\013\uffc5\015" +
    "\uffc5\017\uffc5\020\uffc5\032\uffc5\036\uffc5\051\uffc5\052\uffc5" +
    "\055\uffc5\056\uffc5\066\uffc5\067\uffc5\076\uffc5\102\077\103" +
    "\076\104\074\105\075\106\073\110\uffc5\001\002\000\010" +
    "\012\065\103\070\107\067\001\002\000\010\012\065\103" +
    "\070\107\067\001\002\000\040\011\uffc4\013\uffc4\015\uffc4" +
    "\017\uffc4\020\uffc4\032\uffc4\036\uffc4\051\uffc4\052\uffc4\055" +
    "\uffc4\056\uffc4\066\uffc4\067\uffc4\076\uffc4\110\uffc4\001\002" +
    "\000\060\011\uffd7\013\uffd7\015\uffd7\017\uffd7\020\uffd7\032" +
    "\uffd7\036\uffd7\051\uffd7\052\uffd7\055\uffd7\056\uffd7\066\uffd7" +
    "\067\uffd7\073\uffd7\074\uffd7\076\uffd7\102\uffd7\103\uffd7\104" +
    "\074\105\075\106\073\110\uffd7\112\uffd7\001\002\000\010" +
    "\012\065\103\070\107\067\001\002\000\010\012\065\103" +
    "\070\107\067\001\002\000\010\012\065\103\070\107\067" +
    "\001\002\000\010\012\065\103\070\107\067\001\002\000" +
    "\010\012\065\103\070\107\067\001\002\000\060\011\uffdc" +
    "\013\uffdc\015\uffdc\017\uffdc\020\uffdc\032\uffdc\036\uffdc\051" +
    "\uffdc\052\uffdc\055\uffdc\056\uffdc\066\uffdc\067\uffdc\073\uffdc" +
    "\074\uffdc\076\uffdc\102\uffdc\103\uffdc\104\074\105\075\106" +
    "\073\110\uffdc\112\uffdc\001\002\000\060\011\uffdb\013\uffdb" +
    "\015\uffdb\017\uffdb\020\uffdb\032\uffdb\036\uffdb\051\uffdb\052" +
    "\uffdb\055\uffdb\056\uffdb\066\uffdb\067\uffdb\073\uffdb\074\uffdb" +
    "\076\uffdb\102\uffdb\103\uffdb\104\074\105\075\106\073\110" +
    "\uffdb\112\uffdb\001\002\000\060\011\uffd9\013\uffd9\015\uffd9" +
    "\017\uffd9\020\uffd9\032\uffd9\036\uffd9\051\uffd9\052\uffd9\055" +
    "\uffd9\056\uffd9\066\uffd9\067\uffd9\073\uffd9\074\uffd9\076\uffd9" +
    "\102\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9\110\uffd9\112" +
    "\uffd9\001\002\000\060\011\uffda\013\uffda\015\uffda\017\uffda" +
    "\020\uffda\032\uffda\036\uffda\051\uffda\052\uffda\055\uffda\056" +
    "\uffda\066\uffda\067\uffda\073\uffda\074\uffda\076\uffda\102\uffda" +
    "\103\uffda\104\uffda\105\uffda\106\uffda\110\uffda\112\uffda\001" +
    "\002\000\060\011\uffd8\013\uffd8\015\uffd8\017\uffd8\020\uffd8" +
    "\032\uffd8\036\uffd8\051\uffd8\052\uffd8\055\uffd8\056\uffd8\066" +
    "\uffd8\067\uffd8\073\uffd8\074\uffd8\076\uffd8\102\uffd8\103\uffd8" +
    "\104\uffd8\105\uffd8\106\uffd8\110\uffd8\112\uffd8\001\002\000" +
    "\016\102\077\103\076\104\074\105\075\106\073\110\106" +
    "\001\002\000\060\011\uffd6\013\uffd6\015\uffd6\017\uffd6\020" +
    "\uffd6\032\uffd6\036\uffd6\051\uffd6\052\uffd6\055\uffd6\056\uffd6" +
    "\066\uffd6\067\uffd6\073\uffd6\074\uffd6\076\uffd6\102\uffd6\103" +
    "\uffd6\104\uffd6\105\uffd6\106\uffd6\110\uffd6\112\uffd6\001\002" +
    "\000\004\107\111\001\002\000\020\003\uffa6\037\124\042" +
    "\123\044\122\045\125\047\uffa6\075\uffa6\001\002\000\022" +
    "\013\027\015\023\017\012\020\031\036\015\051\033\055" +
    "\017\056\025\001\002\000\004\011\113\001\002\000\006" +
    "\066\115\110\114\001\002\000\020\003\uffab\037\uffab\042" +
    "\uffab\044\uffab\045\uffab\047\uffab\075\uffab\001\002\000\022" +
    "\013\027\015\023\017\012\020\031\036\015\051\033\055" +
    "\017\056\025\001\002\000\020\003\uffad\037\uffad\042\uffad" +
    "\044\uffad\045\uffad\047\uffad\075\uffad\001\002\000\004\011" +
    "\120\001\002\000\006\066\115\110\114\001\002\000\020" +
    "\003\uffac\037\uffac\042\uffac\044\uffac\045\uffac\047\uffac\075" +
    "\uffac\001\002\000\010\003\uffa9\047\uffa9\075\uffa9\001\002" +
    "\000\010\003\uffaa\047\uffaa\075\uffaa\001\002\000\010\003" +
    "\uffa7\047\uffa7\075\uffa7\001\002\000\010\003\uffa8\047\uffa8" +
    "\075\uffa8\001\002\000\010\003\uffa4\047\127\075\uffa4\001" +
    "\002\000\004\107\111\001\002\000\006\003\132\075\131" +
    "\001\002\000\060\003\153\011\162\012\065\013\027\015" +
    "\023\016\141\017\012\020\031\022\161\025\157\030\151" +
    "\034\135\036\015\046\143\051\033\055\017\056\025\061" +
    "\145\076\ufff9\103\070\107\140\111\155\113\152\001\002" +
    "\000\004\076\134\001\002\000\006\032\uffae\076\uffae\001" +
    "\002\000\006\032\uffa2\076\uffa2\001\002\000\006\075\277" +
    "\107\300\001\002\000\060\003\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\022\ufff8\025\ufff8" +
    "\030\ufff8\034\ufff8\036\ufff8\046\ufff8\051\ufff8\055\ufff8\056" +
    "\ufff8\061\ufff8\076\ufff8\103\ufff8\107\ufff8\111\ufff8\113\ufff8" +
    "\001\002\000\060\003\153\011\162\012\065\013\027\015" +
    "\023\016\141\017\012\020\031\022\161\025\157\030\151" +
    "\034\135\036\015\046\143\051\033\055\017\056\025\061" +
    "\145\076\ufff9\103\070\107\140\111\155\113\152\001\002" +
    "\000\016\011\173\012\065\103\070\107\140\111\155\113" +
    "\152\001\002\000\004\067\273\001\002\000\004\067\272" +
    "\001\002\000\004\011\270\001\002\000\004\067\267\001" +
    "\002\000\004\107\261\001\002\000\060\003\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\022" +
    "\ufff2\025\ufff2\030\ufff2\034\ufff2\036\ufff2\046\ufff2\051\ufff2" +
    "\055\ufff2\056\ufff2\061\ufff2\076\ufff2\103\ufff2\107\ufff2\111" +
    "\ufff2\113\ufff2\001\002\000\060\003\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\025" +
    "\ufff3\030\ufff3\034\ufff3\036\ufff3\046\ufff3\051\ufff3\055\ufff3" +
    "\056\ufff3\061\ufff3\076\ufff3\103\ufff3\107\ufff3\111\ufff3\113" +
    "\ufff3\001\002\000\004\076\260\001\002\000\004\107\243" +
    "\001\002\000\016\011\173\012\065\103\070\107\236\111" +
    "\155\113\152\001\002\000\006\067\234\076\233\001\002" +
    "\000\060\003\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\022\ufff7\025\ufff7\030\ufff7\034\ufff7" +
    "\036\ufff7\046\ufff7\051\ufff7\055\ufff7\056\ufff7\061\ufff7\076" +
    "\ufff7\103\ufff7\107\ufff7\111\ufff7\113\ufff7\001\002\000\012" +
    "\067\uffe3\073\uffe3\076\uffe3\110\uffe3\001\002\000\004\073" +
    "\226\001\002\000\004\075\217\001\002\000\060\003\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\022\ufff5\025\ufff5\030\ufff5\034\ufff5\036\ufff5\046\ufff5" +
    "\051\ufff5\055\ufff5\056\ufff5\061\ufff5\076\ufff5\103\ufff5\107" +
    "\ufff5\111\ufff5\113\ufff5\001\002\000\004\067\216\001\002" +
    "\000\010\073\uffdd\107\175\114\064\001\002\000\060\003" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\022\ufff4\025\ufff4\030\ufff4\034\ufff4\036\ufff4\046" +
    "\ufff4\051\ufff4\055\ufff4\056\ufff4\061\ufff4\076\ufff4\103\ufff4" +
    "\107\ufff4\111\ufff4\113\ufff4\001\002\000\016\102\077\103" +
    "\076\104\074\105\075\106\073\112\166\001\002\000\060" +
    "\003\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\022\ufff0\025\ufff0\030\ufff0\034\ufff0\036\ufff0" +
    "\046\ufff0\051\ufff0\055\ufff0\056\ufff0\061\ufff0\076\ufff0\103" +
    "\ufff0\107\ufff0\111\ufff0\113\ufff0\001\002\000\010\012\065" +
    "\103\070\107\170\001\002\000\024\067\uffe0\073\uffe0\076" +
    "\uffe0\102\077\103\076\104\074\105\075\106\073\110\uffe0" +
    "\001\002\000\016\011\173\012\065\103\070\107\140\111" +
    "\155\113\152\001\002\000\020\102\077\103\076\104\074" +
    "\105\075\106\073\110\106\112\166\001\002\000\004\110" +
    "\174\001\002\000\012\067\uffdd\073\uffdd\076\uffdd\110\uffdd" +
    "\001\002\000\012\067\uffdf\073\uffdf\076\uffdf\110\uffdf\001" +
    "\002\000\014\011\201\012\065\103\070\107\067\110\uff9c" +
    "\001\002\000\004\110\214\001\002\000\022\011\044\066" +
    "\203\102\077\103\076\104\074\105\075\106\073\110\uff98" +
    "\001\002\000\010\011\044\066\203\110\uff98\001\002\000" +
    "\012\011\044\066\203\110\uff98\114\064\001\002\000\004" +
    "\110\uff9f\001\002\000\012\011\207\012\065\103\070\107" +
    "\067\001\002\000\010\011\044\066\203\110\uff98\001\002" +
    "\000\004\110\uff99\001\002\000\022\011\044\066\203\102" +
    "\077\103\076\104\074\105\075\106\073\110\uff98\001\002" +
    "\000\010\011\044\066\203\110\uff98\001\002\000\004\110" +
    "\uff9b\001\002\000\004\110\uff9a\001\002\000\004\110\uff9d" +
    "\001\002\000\004\110\uff9e\001\002\000\004\067\215\001" +
    "\002\000\060\003\uff8e\011\uff8e\012\uff8e\013\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\022\uff8e\025\uff8e\030\uff8e\034" +
    "\uff8e\036\uff8e\046\uff8e\051\uff8e\055\uff8e\056\uff8e\061\uff8e" +
    "\076\uff8e\103\uff8e\107\uff8e\111\uff8e\113\uff8e\001\002\000" +
    "\060\003\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\022\uffee\025\uffee\030\uffee\034\uffee\036" +
    "\uffee\046\uffee\051\uffee\055\uffee\056\uffee\061\uffee\076\uffee" +
    "\103\uffee\107\uffee\111\uffee\113\uffee\001\002\000\060\003" +
    "\153\011\162\012\065\013\027\015\023\016\141\017\012" +
    "\020\031\022\161\025\157\030\151\034\135\036\015\046" +
    "\143\051\033\055\017\056\025\061\145\076\ufff9\103\070" +
    "\107\140\111\155\113\152\001\002\000\004\076\221\001" +
    "\002\000\004\061\222\001\002\000\004\107\223\001\002" +
    "\000\016\011\173\012\065\103\070\107\140\111\155\113" +
    "\152\001\002\000\004\110\225\001\002\000\004\067\uffe6" +
    "\001\002\000\010\012\065\103\070\107\067\001\002\000" +
    "\016\074\230\102\077\103\076\104\074\105\075\106\073" +
    "\001\002\000\010\012\065\103\070\107\067\001\002\000" +
    "\016\067\232\102\077\103\076\104\074\105\075\106\073" +
    "\001\002\000\060\003\uffe4\011\uffe4\012\uffe4\013\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4\025\uffe4\030\uffe4" +
    "\034\uffe4\036\uffe4\046\uffe4\051\uffe4\055\uffe4\056\uffe4\061" +
    "\uffe4\076\uffe4\103\uffe4\107\uffe4\111\uffe4\113\uffe4\001\002" +
    "\000\060\003\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\022\uffec\025\uffec\030\uffec\034\uffec" +
    "\036\uffec\046\uffec\051\uffec\055\uffec\056\uffec\061\uffec\076" +
    "\uffec\103\uffec\107\uffec\111\uffec\113\uffec\001\002\000\060" +
    "\003\uffed\011\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\022\uffed\025\uffed\030\uffed\034\uffed\036\uffed" +
    "\046\uffed\051\uffed\055\uffed\056\uffed\061\uffed\076\uffed\103" +
    "\uffed\107\uffed\111\uffed\113\uffed\001\002\000\012\067\uffe2" +
    "\073\uffe2\076\uffe2\110\uffe2\001\002\000\016\011\173\012" +
    "\065\103\070\107\140\111\155\113\152\001\002\000\004" +
    "\110\240\001\002\000\014\067\uffe1\073\uffe1\076\uffe1\110" +
    "\uffe1\112\241\001\002\000\010\012\065\103\070\107\067" +
    "\001\002\000\024\067\uffde\073\uffde\076\uffde\102\077\103" +
    "\076\104\074\105\075\106\073\110\uffde\001\002\000\022" +
    "\013\027\015\023\017\012\020\031\036\015\051\033\055" +
    "\017\056\025\001\002\000\016\011\173\012\065\103\070" +
    "\107\140\111\155\113\152\001\002\000\004\067\246\001" +
    "\002\000\006\011\250\115\251\001\002\000\004\110\254" +
    "\001\002\000\004\115\253\001\002\000\004\011\252\001" +
    "\002\000\004\110\uffd4\001\002\000\004\110\uffd3\001\002" +
    "\000\004\075\255\001\002\000\060\003\153\011\162\012" +
    "\065\013\027\015\023\016\141\017\012\020\031\022\161" +
    "\025\157\030\151\034\135\036\015\046\143\051\033\055" +
    "\017\056\025\061\145\076\ufff9\103\070\107\140\111\155" +
    "\113\152\001\002\000\004\076\257\001\002\000\060\003" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\022\uffe5\025\uffe5\030\uffe5\034\uffe5\036\uffe5\046" +
    "\uffe5\051\uffe5\055\uffe5\056\uffe5\061\uffe5\076\uffe5\103\uffe5" +
    "\107\uffe5\111\uffe5\113\uffe5\001\002\000\006\032\uffa3\076" +
    "\uffa3\001\002\000\016\011\173\012\065\103\070\107\140" +
    "\111\155\113\152\001\002\000\004\110\263\001\002\000" +
    "\004\075\264\001\002\000\060\003\153\011\162\012\065" +
    "\013\027\015\023\016\141\017\012\020\031\022\161\025" +
    "\157\030\151\034\135\036\015\046\143\051\033\055\017" +
    "\056\025\061\145\076\ufff9\103\070\107\140\111\155\113" +
    "\152\001\002\000\004\076\266\001\002\000\060\003\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\022\uffe7\025\uffe7\030\uffe7\034\uffe7\036\uffe7\046\uffe7" +
    "\051\uffe7\055\uffe7\056\uffe7\061\uffe7\076\uffe7\103\uffe7\107" +
    "\uffe7\111\uffe7\113\uffe7\001\002\000\060\003\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\022" +
    "\ufff1\025\ufff1\030\ufff1\034\ufff1\036\ufff1\046\ufff1\051\ufff1" +
    "\055\ufff1\056\ufff1\061\ufff1\076\ufff1\103\ufff1\107\ufff1\111" +
    "\ufff1\113\ufff1\001\002\000\062\003\uffa0\011\uffa0\012\uffa0" +
    "\013\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\022\uffa0\025" +
    "\uffa0\030\uffa0\034\uffa0\036\uffa0\046\uffa0\051\uffa0\055\uffa0" +
    "\056\uffa0\061\uffa0\067\271\076\uffa0\103\uffa0\107\uffa0\111" +
    "\uffa0\113\uffa0\001\002\000\060\003\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\022\uffa1\025" +
    "\uffa1\030\uffa1\034\uffa1\036\uffa1\046\uffa1\051\uffa1\055\uffa1" +
    "\056\uffa1\061\uffa1\076\uffa1\103\uffa1\107\uffa1\111\uffa1\113" +
    "\uffa1\001\002\000\060\003\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\022\ufff6\025\ufff6\030" +
    "\ufff6\034\ufff6\036\ufff6\046\ufff6\051\ufff6\055\ufff6\056\ufff6" +
    "\061\ufff6\076\ufff6\103\ufff6\107\ufff6\111\ufff6\113\ufff6\001" +
    "\002\000\060\003\uffef\011\uffef\012\uffef\013\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\022\uffef\025\uffef\030\uffef\034" +
    "\uffef\036\uffef\046\uffef\051\uffef\055\uffef\056\uffef\061\uffef" +
    "\076\uffef\103\uffef\107\uffef\111\uffef\113\uffef\001\002\000" +
    "\004\110\275\001\002\000\004\112\241\001\002\000\004" +
    "\076\ufffa\001\002\000\016\011\173\012\065\103\070\107" +
    "\140\111\155\113\152\001\002\000\016\011\173\012\065" +
    "\103\070\107\140\111\155\113\152\001\002\000\004\110" +
    "\302\001\002\000\004\075\303\001\002\000\060\003\153" +
    "\011\162\012\065\013\027\015\023\016\141\017\012\020" +
    "\031\022\161\025\157\030\151\034\135\036\015\046\143" +
    "\051\033\055\017\056\025\061\145\076\ufff9\103\070\107" +
    "\140\111\155\113\152\001\002\000\004\076\305\001\002" +
    "\000\062\003\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\022\uffeb\025\uffeb\026\307\030\uffeb" +
    "\034\uffeb\036\uffeb\046\uffeb\051\uffeb\055\uffeb\056\uffeb\061" +
    "\uffeb\076\uffeb\103\uffeb\107\uffeb\111\uffeb\113\uffeb\001\002" +
    "\000\060\003\uffea\011\uffea\012\uffea\013\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\022\uffea\025\uffea\030\uffea\034\uffea" +
    "\036\uffea\046\uffea\051\uffea\055\uffea\056\uffea\061\uffea\076" +
    "\uffea\103\uffea\107\uffea\111\uffea\113\uffea\001\002\000\004" +
    "\075\310\001\002\000\060\003\153\011\162\012\065\013" +
    "\027\015\023\016\141\017\012\020\031\022\161\025\157" +
    "\030\151\034\135\036\015\046\143\051\033\055\017\056" +
    "\025\061\145\076\ufff9\103\070\107\140\111\155\113\152" +
    "\001\002\000\004\076\312\001\002\000\060\003\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\022\uffe8\025\uffe8\030\uffe8\034\uffe8\036\uffe8\046\uffe8\051" +
    "\uffe8\055\uffe8\056\uffe8\061\uffe8\076\uffe8\103\uffe8\107\uffe8" +
    "\111\uffe8\113\uffe8\001\002\000\004\076\314\001\002\000" +
    "\004\075\315\001\002\000\060\003\153\011\162\012\065" +
    "\013\027\015\023\016\141\017\012\020\031\022\161\025" +
    "\157\030\151\034\135\036\015\046\143\051\033\055\017" +
    "\056\025\061\145\076\ufff9\103\070\107\140\111\155\113" +
    "\152\001\002\000\004\076\317\001\002\000\060\003\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\022\uffe9\025\uffe9\030\uffe9\034\uffe9\036\uffe9\046\uffe9" +
    "\051\uffe9\055\uffe9\056\uffe9\061\uffe9\076\uffe9\103\uffe9\107" +
    "\uffe9\111\uffe9\113\uffe9\001\002\000\006\003\uffa5\075\uffa5" +
    "\001\002\000\034\002\uffbe\003\uffbe\013\uffbe\015\uffbe\017" +
    "\uffbe\020\uffbe\023\uffbe\027\uffbe\036\uffbe\051\uffbe\052\uffbe" +
    "\055\uffbe\056\uffbe\001\002\000\006\003\324\075\323\001" +
    "\002\000\004\011\327\001\002\000\004\076\326\001\002" +
    "\000\042\002\uffb4\003\uffb4\011\uffb4\013\uffb4\015\uffb4\017" +
    "\uffb4\020\uffb4\023\uffb4\027\uffb4\032\uffb4\036\uffb4\051\uffb4" +
    "\052\uffb4\055\uffb4\056\uffb4\076\uffb4\001\002\000\042\002" +
    "\uffb2\003\uffb2\011\uffb2\013\uffb2\015\uffb2\017\uffb2\020\uffb2" +
    "\023\uffb2\027\uffb2\032\uffb2\036\uffb2\051\uffb2\052\uffb2\055" +
    "\uffb2\056\uffb2\076\uffb2\001\002\000\006\066\331\076\uffb0" +
    "\001\002\000\004\076\335\001\002\000\004\011\333\001" +
    "\002\000\004\076\uffb1\001\002\000\006\066\331\076\uffb0" +
    "\001\002\000\004\076\uffaf\001\002\000\042\002\uffb3\003" +
    "\uffb3\011\uffb3\013\uffb3\015\uffb3\017\uffb3\020\uffb3\023\uffb3" +
    "\027\uffb3\032\uffb3\036\uffb3\051\uffb3\052\uffb3\055\uffb3\056" +
    "\uffb3\076\uffb3\001\002\000\004\075\340\001\002\000\040" +
    "\002\uffd2\003\uffd2\013\uffd2\015\uffd2\017\uffd2\020\uffd2\023" +
    "\uffd2\027\uffd2\032\uffd2\036\uffd2\051\uffd2\052\uffd2\055\uffd2" +
    "\056\uffd2\076\uffd2\001\002\000\022\013\027\015\023\017" +
    "\012\020\031\036\015\051\033\055\017\056\025\001\002" +
    "\000\004\076\342\001\002\000\004\067\343\001\002\000" +
    "\040\002\uffd1\003\uffd1\013\uffd1\015\uffd1\017\uffd1\020\uffd1" +
    "\023\uffd1\027\uffd1\032\uffd1\036\uffd1\051\uffd1\052\uffd1\055" +
    "\uffd1\056\uffd1\076\uffd1\001\002\000\004\002\ufffd\001\002" +
    "\000\004\011\uffc3\001\002\000\004\072\366\001\002\000" +
    "\004\067\365\001\002\000\004\011\352\001\002\000\004" +
    "\011\uffc2\001\002\000\010\066\354\067\uffcb\114\353\001" +
    "\002\000\012\011\362\012\065\103\070\107\067\001\002" +
    "\000\004\011\357\001\002\000\004\067\356\001\002\000" +
    "\072\002\uffd0\003\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\022\uffd0\023\uffd0\025\uffd0\027" +
    "\uffd0\030\uffd0\032\uffd0\034\uffd0\036\uffd0\046\uffd0\051\uffd0" +
    "\052\uffd0\055\uffd0\056\uffd0\061\uffd0\076\uffd0\103\uffd0\107" +
    "\uffd0\111\uffd0\113\uffd0\001\002\000\006\066\354\067\uffcb" +
    "\001\002\000\004\067\uffcc\001\002\000\016\067\364\102" +
    "\077\103\076\104\074\105\075\106\073\001\002\000\004" +
    "\067\363\001\002\000\072\002\uffce\003\uffce\011\uffce\012" +
    "\uffce\013\uffce\015\uffce\016\uffce\017\uffce\020\uffce\022\uffce" +
    "\023\uffce\025\uffce\027\uffce\030\uffce\032\uffce\034\uffce\036" +
    "\uffce\046\uffce\051\uffce\052\uffce\055\uffce\056\uffce\061\uffce" +
    "\076\uffce\103\uffce\107\uffce\111\uffce\113\uffce\001\002\000" +
    "\072\002\uffcf\003\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\025\uffcf\027" +
    "\uffcf\030\uffcf\032\uffcf\034\uffcf\036\uffcf\046\uffcf\051\uffcf" +
    "\052\uffcf\055\uffcf\056\uffcf\061\uffcf\076\uffcf\103\uffcf\107" +
    "\uffcf\111\uffcf\113\uffcf\001\002\000\004\011\uffc1\001\002" +
    "\000\004\011\367\001\002\000\010\066\371\067\uffc6\114" +
    "\370\001\002\000\012\011\377\012\065\103\070\107\067" +
    "\001\002\000\004\011\374\001\002\000\004\067\373\001" +
    "\002\000\072\002\uffca\003\uffca\011\uffca\012\uffca\013\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\022\uffca\023\uffca\025" +
    "\uffca\027\uffca\030\uffca\032\uffca\034\uffca\036\uffca\046\uffca" +
    "\051\uffca\052\uffca\055\uffca\056\uffca\061\uffca\076\uffca\103" +
    "\uffca\107\uffca\111\uffca\113\uffca\001\002\000\006\066\371" +
    "\067\uffc6\001\002\000\004\067\uffc7\001\002\000\016\067" +
    "\u0101\102\077\103\076\104\074\105\075\106\073\001\002" +
    "\000\004\067\u0100\001\002\000\072\002\uffc8\003\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\022\uffc8\023\uffc8\025\uffc8\027\uffc8\030\uffc8\032\uffc8\034" +
    "\uffc8\036\uffc8\046\uffc8\051\uffc8\052\uffc8\055\uffc8\056\uffc8" +
    "\061\uffc8\076\uffc8\103\uffc8\107\uffc8\111\uffc8\113\uffc8\001" +
    "\002\000\072\002\uffc9\003\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9\023\uffc9\025" +
    "\uffc9\027\uffc9\030\uffc9\032\uffc9\034\uffc9\036\uffc9\046\uffc9" +
    "\051\uffc9\052\uffc9\055\uffc9\056\uffc9\061\uffc9\076\uffc9\103" +
    "\uffc9\107\uffc9\111\uffc9\113\uffc9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\033\023\031\025\027\045\013\046" +
    "\012\047\023\051\015\055\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\347\001\001\000\002\001" +
    "\001\000\022\003\343\023\031\025\027\045\013\046\012" +
    "\047\023\051\015\055\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\037\023\031\025\027" +
    "\045\013\046\012\047\023\051\015\055\034\001\001\000" +
    "\002\001\001\000\022\003\036\023\031\025\027\045\013" +
    "\046\012\047\023\051\015\055\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\035\023\031\025\027" +
    "\045\013\046\012\047\023\051\015\055\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\023\050\025\047\030\052\042\044\045" +
    "\013\046\012\047\023\051\045\056\046\057\054\060\053" +
    "\061\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\023\050\025\047\030\052\042\044\045\013\046\012" +
    "\047\023\057\062\060\053\061\051\001\001\000\032\023" +
    "\050\025\047\030\052\042\044\045\013\046\012\047\023" +
    "\051\045\056\061\057\054\060\053\061\051\001\001\000" +
    "\002\001\001\000\026\023\050\025\047\030\052\042\044" +
    "\045\013\046\012\047\023\057\057\060\053\061\051\001" +
    "\001\000\012\023\050\030\052\060\056\061\051\001\001" +
    "\000\002\001\001\000\006\030\052\061\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\104\001\001\000" +
    "\004\017\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\103\001\001\000\004\017\102\001\001\000" +
    "\004\017\101\001\001\000\004\017\100\001\001\000\004" +
    "\017\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\107\001\001\000" +
    "\004\033\125\001\001\000\006\045\111\046\012\001\001" +
    "\000\002\001\001\000\004\032\115\001\001\000\002\001" +
    "\001\000\006\045\116\046\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\127\001\001\000\004\031" +
    "\317\001\001\000\004\035\132\001\001\000\042\005\136" +
    "\010\135\012\153\013\141\014\157\015\146\016\155\017" +
    "\163\025\145\037\162\040\164\042\143\045\013\046\012" +
    "\047\023\062\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\136\010\135\012\153\013\141\014\157\015" +
    "\146\016\155\017\163\025\145\037\162\040\164\042\143" +
    "\045\013\046\012\047\023\062\275\001\001\000\006\016" +
    "\273\017\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\234\017\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\166\001\001\000\002\001\001\000" +
    "\006\016\171\017\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\176\041\175\042\177\001\001\000\002\001\001\000\006" +
    "\027\212\042\203\001\001\000\006\027\211\042\203\001" +
    "\001\000\006\027\201\042\203\001\001\000\002\001\001" +
    "\000\004\017\205\001\001\000\006\027\204\042\203\001" +
    "\001\000\002\001\001\000\006\027\210\042\203\001\001" +
    "\000\006\027\207\042\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\136\010\135\012\153\013\141\014\157\015\146\016\155" +
    "\017\163\025\145\037\162\040\164\042\143\045\013\046" +
    "\012\047\023\062\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\223\017\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\226" +
    "\001\001\000\002\001\001\000\004\017\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\236\017\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\241" +
    "\001\001\000\002\001\001\000\012\025\243\045\013\046" +
    "\012\047\023\001\001\000\006\016\244\017\163\001\001" +
    "\000\002\001\001\000\004\020\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\136\010" +
    "\135\012\153\013\141\014\157\015\146\016\155\017\163" +
    "\025\145\037\162\040\164\042\143\045\013\046\012\047" +
    "\023\062\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\261\017\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\005\136\010\135" +
    "\012\153\013\141\014\157\015\146\016\155\017\163\025" +
    "\145\037\162\040\164\042\143\045\013\046\012\047\023" +
    "\062\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\312\017\163\001\001" +
    "\000\006\016\300\017\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\005\136\010\135\012\153\013\141" +
    "\014\157\015\146\016\155\017\163\025\145\037\162\040" +
    "\164\042\143\045\013\046\012\047\023\062\303\001\001" +
    "\000\002\001\001\000\004\011\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\005\136\010\135\012\153" +
    "\013\141\014\157\015\146\016\155\017\163\025\145\037" +
    "\162\040\164\042\143\045\013\046\012\047\023\062\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\005\136\010\135\012\153" +
    "\013\141\014\157\015\146\016\155\017\163\025\145\037" +
    "\162\040\164\042\143\045\013\046\012\047\023\062\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\327\001\001\000\002\001\001\000\004" +
    "\054\331\001\001\000\002\001\001\000\004\053\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\336" +
    "\001\001\000\002\001\001\000\012\025\340\045\013\046" +
    "\012\047\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\354\001\001\000\004\017\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\357\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\371\001" +
    "\001\000\004\017\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\374\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static boolean fatalError = false;
    public static boolean specError = false;
    public static Symbol fatalErrorSym;
    public static String specErrorDetail = "";

    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public static void informar_Error_Especifico(String tipoError){
        String specErrorStr = "ERROR: "+tipoError;//+". Línea: "+specErrorSym.right+". Columna: "+specErrorSym.left;
        specErrorDetail = specErrorStr;
        specError = true;

        System.err.println(specErrorStr);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PARAMFUNCFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMFUNCFILA ::= ASIGVARIABLE PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMFUNCFILA ::= Coma EXPRECION_ARITMETICA PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMFUNCFILA ::= Coma Identificador PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMFUNC ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAMFUNC ::= ASIGVARIABLE PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMFUNC ::= EXPRECION_ARITMETICA PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMFUNC ::= Identificador PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_RETURN ::= Return Identificador 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Return de función sin punto y coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_RETURN ::= Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUNCIONCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNCIONCONTEN ::= LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCIONRETURNS ::= Returns FUNCIONATRIB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNATRIBDOS ::= ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ENUMCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTRACTPART3 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTRACTPART2 ::= CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTRACTPART1 ::= CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTRACTPART1 ::= ASIGVARIABLE CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTRACTPART1 ::= DECLARVARIABLE CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONTRACTPART ::= CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTRACTDEF ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ACCESSMOD ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGVARIABLE ::= Identificador Op_atribucion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGVARIABLE ::= Identificador Op_atribucion EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARRAYDECLARFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARRAYDECLARFILA ::= Coma Identificador ARRAYDECLARFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion EXPRECION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador ARRAYDECLARFILA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARVARIABLEFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARVARIABLEFILA ::= Coma Identificador DECLARVARIABLEFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion EXPRECION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador DECLARVARIABLEFILA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRUCTCONTEN ::= LlaveAbre DECLARVARIABLE LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRUCTDEF ::= Struct Identificador STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_INCREMENTAL ::= Identificador Op_Incremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_INCREMENTAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_INCREMENTAL ::= Op_Incremental Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_INCREMENTAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRECION_ARITMETICA ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRECION_ARITMETICA ::= ParentAbre EXPRECION_ARITMETICA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRECION_ARITMETICA ::= Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mod EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Div EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mult EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Suma EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION_BOOLEANA ::= ParentAbre EXPRESION_BOOLEANA ParentCierre Op_relacional EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION_BOOLEANA ::= EXPRECION_ARITMETICA Op_relacional ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION_BOOLEANA ::= EXPRECION_ARITMETICA Op_relacional EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION_BOOLEANA ::= Not ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION_BOOLEANA ::= Not EXPRESION_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_TERNARIA ::= EXPRESION_BOOLEANA SignoPregunta EXPRECION_ARITMETICA DosPuntos EXPRECION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_TERNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_FOR ::= For ParentAbre DECLARVARIABLE EXPRESION_BOOLEANA PuntoComa EXPRESION_INCREMENTAL ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra While ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_WHILE ::= While ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_ELSE ::= Else LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_IF ::= If LlaveAbre EXPRESION_BOOLEANA LlaveCierra LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;
		Sintax.informar_Error_Especifico("ERROR: If con llaves");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_IF ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra SENTENCIA_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_IF ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ASIGVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DECLARVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_TERNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_SENTENCIAPRIMA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIODOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIODOS ::= DECLARVARIABLE INICIODOS 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Declaración fuera de función"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIODOS ::= ENUMDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIODOS ::= CONTRACTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIODOS ::= STRUCTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Version PuntoComa INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

