
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 15 12:56:23 CST 2020
//----------------------------------------------------

package codigo;

import java.io.InputStreamReader;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.parser;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 15 12:56:23 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\002\000\002\065\004\000\002\065\002\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\066\004\000\002\066\002\000\002" +
    "\067\003\000\002\067\003\000\002\067\004\000\002\067" +
    "\003\000\002\067\003\000\002\067\004\000\002\067\004" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\067\004\000\002\067\004\000\002\067\004\000\002" +
    "\010\011\000\002\071\002\000\002\010\013\000\002\011" +
    "\006\000\002\012\011\000\002\013\012\000\002\014\015" +
    "\000\002\014\015\000\002\015\007\000\002\022\005\000" +
    "\002\022\005\000\002\022\004\000\002\022\003\000\002" +
    "\022\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\004" +
    "\000\002\022\003\000\002\022\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\003\000\002\022\004\000\002" +
    "\022\004\000\002\022\003\000\002\025\007\000\002\026" +
    "\005\000\002\026\005\000\002\026\002\000\002\072\002" +
    "\000\002\027\007\000\002\027\007\000\002\027\003\000" +
    "\002\027\005\000\002\073\002\000\002\046\006\000\002" +
    "\046\002\000\002\052\007\000\002\052\010\000\002\047" +
    "\005\000\002\047\002\000\002\044\005\000\002\045\005" +
    "\000\002\053\003\000\002\053\003\000\002\053\004\000" +
    "\002\053\002\000\002\060\007\000\002\060\004\000\002" +
    "\061\004\000\002\061\003\000\002\062\005\000\002\062" +
    "\005\000\002\062\003\000\002\063\004\000\002\063\003" +
    "\000\002\064\004\000\002\064\002\000\002\054\005\000" +
    "\002\055\006\000\002\055\004\000\002\056\004\000\002" +
    "\056\002\000\002\057\004\000\002\032\010\000\002\033" +
    "\007\000\002\033\004\000\002\033\004\000\002\034\006" +
    "\000\002\034\002\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\002\000\002" +
    "\036\004\000\002\036\002\000\002\037\005\000\002\037" +
    "\004\000\002\037\004\000\002\070\005\000\002\070\003" +
    "\000\002\041\005\000\002\041\004\000\002\043\004\000" +
    "\002\043\004\000\002\043\002\000\002\031\005\000\002" +
    "\031\005\000\002\031\002\000\002\050\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\042\006\000\002\042\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\004\043\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\004\067\011\001\002\000" +
    "\034\002\ufffb\003\022\013\027\015\023\017\012\020\031" +
    "\023\026\027\021\036\015\051\033\052\020\055\017\056" +
    "\025\001\002\000\014\003\uff7c\011\uff7c\044\uff7c\045\uff7c" +
    "\071\uff7c\001\002\000\014\003\uff7e\011\uff7e\044\uff7e\045" +
    "\uff7e\071\uff7e\001\002\000\014\003\u010d\011\uffaa\044\u010b" +
    "\045\u010f\071\u010c\001\002\000\014\003\uff79\011\uff79\044" +
    "\uff79\045\uff79\071\uff79\001\002\000\034\002\ufffb\003\022" +
    "\013\027\015\023\017\012\020\031\023\026\027\021\036" +
    "\015\051\033\052\020\055\017\056\025\001\002\000\014" +
    "\003\uff77\011\uff77\044\uff77\045\uff77\071\uff77\001\002\000" +
    "\004\011\u0100\001\002\000\004\011\364\001\002\000\004" +
    "\076\363\001\002\000\014\003\uff7d\011\uff7d\044\uff7d\045" +
    "\uff7d\071\uff7d\001\002\000\004\067\uffb8\001\002\000\014" +
    "\003\uff76\011\uff76\044\uff76\045\uff76\071\uff76\001\002\000" +
    "\004\011\042\001\002\000\014\003\uff7a\011\uff7a\044\uff7a" +
    "\045\uff7a\071\uff7a\001\002\000\004\067\040\001\002\000" +
    "\014\003\uff7b\011\uff7b\044\uff7b\045\uff7b\071\uff7b\001\002" +
    "\000\034\002\ufffb\003\022\013\027\015\023\017\012\020" +
    "\031\023\026\027\021\036\015\051\033\052\020\055\017" +
    "\056\025\001\002\000\014\003\uff78\011\uff78\044\uff78\045" +
    "\uff78\071\uff78\001\002\000\004\002\000\001\002\000\034" +
    "\002\ufffb\003\022\013\027\015\023\017\012\020\031\023" +
    "\026\027\021\036\015\051\033\052\020\055\017\056\025" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\uffff\001" +
    "\002\000\034\002\ufffb\003\022\013\027\015\023\017\012" +
    "\020\031\023\026\027\021\036\015\051\033\052\020\055" +
    "\017\056\025\001\002\000\004\002\ufffc\001\002\000\004" +
    "\075\043\001\002\000\034\011\045\013\027\015\023\017" +
    "\012\020\031\027\021\032\044\036\015\051\033\052\020" +
    "\055\017\056\025\076\uff9f\001\002\000\004\011\157\001" +
    "\002\000\004\114\067\001\002\000\004\067\065\001\002" +
    "\000\034\011\045\013\027\015\023\017\012\020\031\027" +
    "\021\032\044\036\015\051\033\052\020\055\017\056\025" +
    "\076\uff9f\001\002\000\004\076\063\001\002\000\004\067" +
    "\061\001\002\000\010\032\044\052\020\076\uff9f\001\002" +
    "\000\004\076\uffa1\001\002\000\004\076\uffa3\001\002\000" +
    "\006\032\044\076\uff9f\001\002\000\004\076\uffa6\001\002" +
    "\000\004\076\uffa0\001\002\000\004\076\uffa2\001\002\000" +
    "\032\011\045\013\027\015\023\017\012\020\031\032\044" +
    "\036\015\051\033\052\020\055\017\056\025\076\uff9f\001" +
    "\002\000\004\076\uffa5\001\002\000\034\002\uffa9\003\uffa9" +
    "\013\uffa9\015\uffa9\017\uffa9\020\uffa9\023\uffa9\027\uffa9\036" +
    "\uffa9\051\uffa9\052\uffa9\055\uffa9\056\uffa9\001\002\000\004" +
    "\076\uffa7\001\002\000\032\011\045\013\027\015\023\017" +
    "\012\020\031\032\044\036\015\051\033\052\020\055\017" +
    "\056\025\076\uff9f\001\002\000\004\076\uffa4\001\002\000" +
    "\022\011\100\012\073\053\072\103\103\107\070\111\071" +
    "\113\074\115\101\001\002\000\022\011\100\012\073\053" +
    "\072\103\103\107\070\111\071\113\074\115\101\001\002" +
    "\000\034\066\uffce\067\uffce\070\uffce\073\uffce\074\uffce\102" +
    "\uffce\103\uffce\104\uffce\105\uffce\106\uffce\110\uffce\112\uffce" +
    "\114\uffce\001\002\000\006\070\151\107\150\001\002\000" +
    "\034\066\uffc3\067\uffc3\070\uffc3\073\uffc3\074\uffc3\102\uffc3" +
    "\103\uffc3\104\uffc3\105\uffc3\106\uffc3\110\uffc3\112\uffc3\114" +
    "\uffc3\001\002\000\022\011\100\012\073\053\072\103\103" +
    "\107\070\111\071\113\074\115\101\001\002\000\034\066" +
    "\uffc0\067\uffc0\070\uffc0\073\uffc0\074\uffc0\102\uffc0\103\uffc0" +
    "\104\uffc0\105\uffc0\106\uffc0\110\uffc0\112\uffc0\114\uffc0\001" +
    "\002\000\034\066\uffc7\067\uffc7\070\uffc7\073\uffc7\074\uffc7" +
    "\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\110\uffc7\112" +
    "\uffc7\114\uffc7\001\002\000\034\066\uffc6\067\uffc6\070\uffc6" +
    "\073\uffc6\074\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106" +
    "\uffc6\110\uffc6\112\uffc6\114\uffc6\001\002\000\040\066\uffcf" +
    "\067\uffcf\070\uffcf\073\uffcf\074\uffcf\102\uffcf\103\uffcf\104" +
    "\uffcf\105\uffcf\106\uffcf\107\130\110\uffcf\112\uffcf\114\uffcf" +
    "\115\131\001\002\000\004\011\127\001\002\000\024\067" +
    "\uffaf\070\113\073\107\102\114\103\112\104\110\105\111" +
    "\106\105\112\106\001\002\000\022\011\100\012\073\053" +
    "\072\103\103\107\070\111\071\113\074\115\101\001\002" +
    "\000\034\066\uffc8\067\uffc8\070\113\073\107\074\uffc8\102" +
    "\uffc8\103\uffc8\104\110\105\111\106\105\110\uffc8\112\106" +
    "\114\uffc8\001\002\000\022\011\100\012\073\053\072\103" +
    "\103\107\070\111\071\113\074\115\101\001\002\000\022" +
    "\011\100\012\073\053\072\103\103\107\070\111\071\113" +
    "\074\115\101\001\002\000\022\011\100\012\073\053\072" +
    "\103\103\107\070\111\071\113\074\115\101\001\002\000" +
    "\022\011\100\012\073\053\072\103\103\107\070\111\071" +
    "\113\074\115\101\001\002\000\022\011\100\012\073\053" +
    "\072\103\103\107\070\111\071\113\074\115\101\001\002" +
    "\000\022\011\100\012\073\053\072\103\103\107\070\111" +
    "\071\113\074\115\101\001\002\000\022\011\100\012\073" +
    "\053\072\103\103\107\070\111\071\113\074\115\101\001" +
    "\002\000\022\011\100\012\073\053\072\103\103\107\070" +
    "\111\071\113\074\115\101\001\002\000\034\066\uffcd\067" +
    "\uffcd\070\113\073\107\074\uffcd\102\uffcd\103\uffcd\104\110" +
    "\105\111\106\105\110\uffcd\112\106\114\uffcd\001\002\000" +
    "\034\066\uffc4\067\uffc4\070\uffc4\073\107\074\uffc4\102\uffc4" +
    "\103\uffc4\104\uffc4\105\uffc4\106\uffc4\110\uffc4\112\uffc4\114" +
    "\uffc4\001\002\000\034\066\uffcc\067\uffcc\070\113\073\107" +
    "\074\uffcc\102\uffcc\103\uffcc\104\110\105\111\106\105\110" +
    "\uffcc\112\106\114\uffcc\001\002\000\034\066\uffca\067\uffca" +
    "\070\113\073\107\074\uffca\102\uffca\103\uffca\104\uffca\105" +
    "\uffca\106\uffca\110\uffca\112\106\114\uffca\001\002\000\034" +
    "\066\uffcb\067\uffcb\070\113\073\107\074\uffcb\102\uffcb\103" +
    "\uffcb\104\uffcb\105\uffcb\106\uffcb\110\uffcb\112\106\114\uffcb" +
    "\001\002\000\024\070\113\073\107\074\123\102\114\103" +
    "\112\104\110\105\111\106\105\112\106\001\002\000\022" +
    "\011\100\012\073\053\072\103\103\107\070\111\071\113" +
    "\074\115\101\001\002\000\034\066\uffd3\067\uffd3\070\uffd3" +
    "\073\uffd3\074\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106" +
    "\uffd3\110\uffd3\112\uffd3\114\uffd3\001\002\000\034\066\uffd2" +
    "\067\uffd2\070\113\073\107\074\uffd2\102\uffd2\103\uffd2\104" +
    "\uffd2\105\uffd2\106\uffd2\110\uffd2\112\uffd2\114\uffd2\001\002" +
    "\000\034\066\uffc9\067\uffc9\070\113\073\107\074\uffc9\102" +
    "\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\110\uffc9\112\106" +
    "\114\uffc9\001\002\000\034\066\uffc2\067\uffc2\070\uffc2\073" +
    "\uffc2\074\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2" +
    "\110\uffc2\112\uffc2\114\uffc2\001\002\000\024\011\100\012" +
    "\073\053\072\103\103\107\070\110\uff82\111\071\113\074" +
    "\115\101\001\002\000\034\066\uffc1\067\uffc1\070\uffc1\073" +
    "\uffc1\074\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1" +
    "\110\uffc1\112\uffc1\114\uffc1\001\002\000\004\110\146\001" +
    "\002\000\006\066\137\110\uff7f\001\002\000\030\066\137" +
    "\070\113\073\107\102\114\103\112\104\110\105\111\106" +
    "\105\110\uff7f\112\106\114\135\001\002\000\022\011\100" +
    "\012\073\053\072\103\103\107\070\111\071\113\074\115" +
    "\101\001\002\000\004\110\uff84\001\002\000\022\011\100" +
    "\012\073\053\072\103\103\107\070\111\071\113\074\115" +
    "\101\001\002\000\006\066\137\110\uff7f\001\002\000\030" +
    "\066\137\070\113\073\107\102\114\103\112\104\110\105" +
    "\111\106\105\110\uff7f\112\106\114\135\001\002\000\004" +
    "\110\uff81\001\002\000\004\110\uff80\001\002\000\026\066" +
    "\uffae\070\113\073\107\102\114\103\112\104\110\105\111" +
    "\106\105\110\uffae\112\106\001\002\000\004\110\uff83\001" +
    "\002\000\034\066\uff75\067\uff75\070\uff75\073\uff75\074\uff75" +
    "\102\uff75\103\uff75\104\uff75\105\uff75\106\uff75\110\uff75\112" +
    "\uff75\114\uff75\001\002\000\034\066\uffd0\067\uffd0\070\113" +
    "\073\107\074\uffd0\102\114\103\112\104\110\105\111\106" +
    "\105\110\uffd0\112\106\114\uffd0\001\002\000\024\011\100" +
    "\012\073\053\072\103\103\107\070\110\uff82\111\071\113" +
    "\074\115\101\001\002\000\022\011\100\012\073\053\072" +
    "\103\103\107\070\111\071\113\074\115\101\001\002\000" +
    "\034\066\uffc5\067\uffc5\070\uffc5\073\107\074\uffc5\102\uffc5" +
    "\103\uffc5\104\uffc5\105\uffc5\106\uffc5\110\uffc5\112\uffc5\114" +
    "\uffc5\001\002\000\004\110\154\001\002\000\034\066\uff74" +
    "\067\uff74\070\uff74\073\uff74\074\uff74\102\uff74\103\uff74\104" +
    "\uff74\105\uff74\106\uff74\110\uff74\112\uff74\114\uff74\001\002" +
    "\000\024\070\113\073\107\102\114\103\112\104\110\105" +
    "\111\106\105\110\156\112\106\001\002\000\034\066\uffd1" +
    "\067\uffd1\070\uffd1\073\uffd1\074\uffd1\102\uffd1\103\uffd1\104" +
    "\uffd1\105\uffd1\106\uffd1\110\uffd1\112\uffd1\114\uffd1\001\002" +
    "\000\006\003\160\107\162\001\002\000\004\110\362\001" +
    "\002\000\020\003\uff8e\037\176\042\175\044\174\045\177" +
    "\047\uff8e\075\uff8e\001\002\000\024\013\027\015\023\017" +
    "\012\020\031\036\015\051\033\055\017\056\025\110\164" +
    "\001\002\000\004\011\165\001\002\000\020\003\uff96\037" +
    "\uff96\042\uff96\044\uff96\045\uff96\047\uff96\075\uff96\001\002" +
    "\000\006\066\166\110\uff93\001\002\000\022\013\027\015" +
    "\023\017\012\020\031\036\015\051\033\055\017\056\025" +
    "\001\002\000\004\110\170\001\002\000\020\003\uff97\037" +
    "\uff97\042\uff97\044\uff97\045\uff97\047\uff97\075\uff97\001\002" +
    "\000\004\011\172\001\002\000\006\066\166\110\uff93\001" +
    "\002\000\004\110\uff94\001\002\000\010\003\uff91\047\uff91" +
    "\075\uff91\001\002\000\010\003\uff92\047\uff92\075\uff92\001" +
    "\002\000\010\003\uff8f\047\uff8f\075\uff8f\001\002\000\010" +
    "\003\uff90\047\uff90\075\uff90\001\002\000\010\003\uff8c\047" +
    "\201\075\uff8c\001\002\000\006\003\160\107\162\001\002" +
    "\000\006\003\204\075\203\001\002\000\064\003\225\011" +
    "\232\012\073\013\027\015\023\016\214\017\012\020\031" +
    "\022\231\025\227\030\224\034\212\036\015\046\217\051" +
    "\033\053\072\055\017\056\025\061\221\076\uffe9\103\103" +
    "\107\070\111\071\113\074\115\101\001\002\000\006\067" +
    "\207\076\206\001\002\000\006\032\uff98\076\uff98\001\002" +
    "\000\006\032\uff8a\076\uff8a\001\002\000\006\032\uff89\076" +
    "\uff89\001\002\000\044\003\225\011\232\012\073\016\214" +
    "\022\231\025\227\030\224\034\212\046\217\053\072\061" +
    "\221\076\uffe9\103\103\107\070\111\071\113\074\115\101" +
    "\001\002\000\004\076\uff87\001\002\000\004\107\344\001" +
    "\002\000\044\003\uffe8\011\uffe8\012\uffe8\016\uffe8\022\uffe8" +
    "\025\uffe8\030\uffe8\034\uffe8\046\uffe8\053\uffe8\061\uffe8\076" +
    "\uffe8\103\uffe8\107\uffe8\111\uffe8\113\uffe8\115\uffe8\001\002" +
    "\000\004\067\343\001\002\000\004\067\342\001\002\000" +
    "\004\076\341\001\002\000\004\011\337\001\002\000\004" +
    "\067\336\001\002\000\004\107\330\001\002\000\004\067" +
    "\326\001\002\000\024\067\325\070\uffc0\073\uffc0\102\uffc0" +
    "\103\uffc0\104\uffc0\105\uffc0\106\uffc0\112\uffc0\001\002\000" +
    "\004\107\302\001\002\000\010\067\301\076\277\110\300" +
    "\001\002\000\044\003\uffe7\011\uffe7\012\uffe7\016\uffe7\022" +
    "\uffe7\025\uffe7\030\uffe7\034\uffe7\046\uffe7\053\uffe7\061\uffe7" +
    "\076\uffe7\103\uffe7\107\uffe7\111\uffe7\113\uffe7\115\uffe7\001" +
    "\002\000\004\075\240\001\002\000\044\003\uffe5\011\uffe5" +
    "\012\uffe5\016\uffe5\022\uffe5\025\uffe5\030\uffe5\034\uffe5\046" +
    "\uffe5\053\uffe5\061\uffe5\076\uffe5\103\uffe5\107\uffe5\111\uffe5" +
    "\113\uffe5\115\uffe5\001\002\000\004\067\237\001\002\000" +
    "\030\070\uffcf\073\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf" +
    "\106\uffcf\107\130\112\uffcf\114\067\115\131\001\002\000" +
    "\044\003\uffe4\011\uffe4\012\uffe4\016\uffe4\022\uffe4\025\uffe4" +
    "\030\uffe4\034\uffe4\046\uffe4\053\uffe4\061\uffe4\076\uffe4\103" +
    "\uffe4\107\uffe4\111\uffe4\113\uffe4\115\uffe4\001\002\000\022" +
    "\070\113\073\107\102\114\103\112\104\110\105\111\106" +
    "\105\112\106\001\002\000\024\067\236\070\uffc6\073\uffc6" +
    "\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\112\uffc6\001" +
    "\002\000\044\003\uffe1\011\uffe1\012\uffe1\016\uffe1\022\uffe1" +
    "\025\uffe1\030\uffe1\034\uffe1\046\uffe1\053\uffe1\061\uffe1\076" +
    "\uffe1\103\uffe1\107\uffe1\111\uffe1\113\uffe1\115\uffe1\001\002" +
    "\000\044\003\uffdf\011\uffdf\012\uffdf\016\uffdf\022\uffdf\025" +
    "\uffdf\030\uffdf\034\uffdf\046\uffdf\053\uffdf\061\uffdf\076\uffdf" +
    "\103\uffdf\107\uffdf\111\uffdf\113\uffdf\115\uffdf\001\002\000" +
    "\064\003\251\011\232\012\073\013\027\015\023\016\243" +
    "\017\012\020\031\022\254\025\227\030\224\034\212\036" +
    "\015\046\217\051\033\053\072\055\017\056\025\061\221" +
    "\076\ufff9\103\103\107\070\111\071\113\074\115\101\001" +
    "\002\000\064\003\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\022\ufff8\025\ufff8\030\ufff8\034" +
    "\ufff8\036\ufff8\046\ufff8\051\ufff8\053\ufff8\055\ufff8\056\ufff8" +
    "\061\ufff8\076\ufff8\103\ufff8\107\ufff8\111\ufff8\113\ufff8\115" +
    "\ufff8\001\002\000\064\003\251\011\232\012\073\013\027" +
    "\015\023\016\243\017\012\020\031\022\254\025\227\030" +
    "\224\034\212\036\015\046\217\051\033\053\072\055\017" +
    "\056\025\061\221\076\ufff9\103\103\107\070\111\071\113" +
    "\074\115\101\001\002\000\004\067\275\001\002\000\004" +
    "\067\274\001\002\000\004\067\273\001\002\000\004\067" +
    "\272\001\002\000\024\067\271\070\uffc0\073\uffc0\102\uffc0" +
    "\103\uffc0\104\uffc0\105\uffc0\106\uffc0\112\uffc0\001\002\000" +
    "\004\076\264\001\002\000\010\067\263\076\261\110\262" +
    "\001\002\000\064\003\ufff7\011\ufff7\012\ufff7\013\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\025\ufff7\030\ufff7" +
    "\034\ufff7\036\ufff7\046\ufff7\051\ufff7\053\ufff7\055\ufff7\056" +
    "\ufff7\061\ufff7\076\ufff7\103\ufff7\107\ufff7\111\ufff7\113\ufff7" +
    "\115\ufff7\001\002\000\064\003\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\025\ufff5" +
    "\030\ufff5\034\ufff5\036\ufff5\046\ufff5\051\ufff5\053\ufff5\055" +
    "\ufff5\056\ufff5\061\ufff5\076\ufff5\103\ufff5\107\ufff5\111\ufff5" +
    "\113\ufff5\115\ufff5\001\002\000\004\067\260\001\002\000" +
    "\064\003\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\022\ufff4\025\ufff4\030\ufff4\034\ufff4\036" +
    "\ufff4\046\ufff4\051\ufff4\053\ufff4\055\ufff4\056\ufff4\061\ufff4" +
    "\076\ufff4\103\ufff4\107\ufff4\111\ufff4\113\ufff4\115\ufff4\001" +
    "\002\000\024\067\257\070\uffc6\073\uffc6\102\uffc6\103\uffc6" +
    "\104\uffc6\105\uffc6\106\uffc6\112\uffc6\001\002\000\064\003" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\022\ufff0\025\ufff0\030\ufff0\034\ufff0\036\ufff0\046" +
    "\ufff0\051\ufff0\053\ufff0\055\ufff0\056\ufff0\061\ufff0\076\ufff0" +
    "\103\ufff0\107\ufff0\111\ufff0\113\ufff0\115\ufff0\001\002\000" +
    "\064\003\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\022\uffee\025\uffee\030\uffee\034\uffee\036" +
    "\uffee\046\uffee\051\uffee\053\uffee\055\uffee\056\uffee\061\uffee" +
    "\076\uffee\103\uffee\107\uffee\111\uffee\113\uffee\115\uffee\001" +
    "\002\000\064\003\uffec\011\uffec\012\uffec\013\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\022\uffec\025\uffec\030\uffec\034" +
    "\uffec\036\uffec\046\uffec\051\uffec\053\uffec\055\uffec\056\uffec" +
    "\061\uffec\076\uffec\103\uffec\107\uffec\111\uffec\113\uffec\115" +
    "\uffec\001\002\000\064\003\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\022\uffeb\025\uffeb\030" +
    "\uffeb\034\uffeb\036\uffeb\046\uffeb\051\uffeb\053\uffeb\055\uffeb" +
    "\056\uffeb\061\uffeb\076\uffeb\103\uffeb\107\uffeb\111\uffeb\113" +
    "\uffeb\115\uffeb\001\002\000\064\003\uffed\011\uffed\012\uffed" +
    "\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed\022\uffed\025" +
    "\uffed\030\uffed\034\uffed\036\uffed\046\uffed\051\uffed\053\uffed" +
    "\055\uffed\056\uffed\061\uffed\076\uffed\103\uffed\107\uffed\111" +
    "\uffed\113\uffed\115\uffed\001\002\000\004\061\265\001\002" +
    "\000\004\107\266\001\002\000\022\011\100\012\073\053" +
    "\072\103\103\107\070\111\071\113\074\115\101\001\002" +
    "\000\024\070\113\073\107\102\114\103\112\104\110\105" +
    "\111\106\105\110\270\112\106\001\002\000\004\067\uffd6" +
    "\001\002\000\064\003\ufff3\011\ufff3\012\ufff3\013\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\025\ufff3\030\ufff3" +
    "\034\ufff3\036\ufff3\046\ufff3\051\ufff3\053\ufff3\055\ufff3\056" +
    "\ufff3\061\ufff3\076\ufff3\103\ufff3\107\ufff3\111\ufff3\113\ufff3" +
    "\115\ufff3\001\002\000\064\003\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\025\ufff2" +
    "\030\ufff2\034\ufff2\036\ufff2\046\ufff2\051\ufff2\053\ufff2\055" +
    "\ufff2\056\ufff2\061\ufff2\076\ufff2\103\ufff2\107\ufff2\111\ufff2" +
    "\113\ufff2\115\ufff2\001\002\000\064\003\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\022\ufff1" +
    "\025\ufff1\030\ufff1\034\ufff1\036\ufff1\046\ufff1\051\ufff1\053" +
    "\ufff1\055\ufff1\056\ufff1\061\ufff1\076\ufff1\103\ufff1\107\ufff1" +
    "\111\ufff1\113\ufff1\115\ufff1\001\002\000\064\003\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\022\ufff6\025\ufff6\030\ufff6\034\ufff6\036\ufff6\046\ufff6\051" +
    "\ufff6\053\ufff6\055\ufff6\056\ufff6\061\ufff6\076\ufff6\103\ufff6" +
    "\107\ufff6\111\ufff6\113\ufff6\115\ufff6\001\002\000\064\003" +
    "\uffef\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\022\uffef\025\uffef\030\uffef\034\uffef\036\uffef\046" +
    "\uffef\051\uffef\053\uffef\055\uffef\056\uffef\061\uffef\076\uffef" +
    "\103\uffef\107\uffef\111\uffef\113\uffef\115\uffef\001\002\000" +
    "\004\076\ufffa\001\002\000\044\003\uffdd\011\uffdd\012\uffdd" +
    "\016\uffdd\022\uffdd\025\uffdd\030\uffdd\034\uffdd\046\uffdd\053" +
    "\uffdd\061\uffdd\076\uffdd\103\uffdd\107\uffdd\111\uffdd\113\uffdd" +
    "\115\uffdd\001\002\000\044\003\uffdc\011\uffdc\012\uffdc\016" +
    "\uffdc\022\uffdc\025\uffdc\030\uffdc\034\uffdc\046\uffdc\053\uffdc" +
    "\061\uffdc\076\uffdc\103\uffdc\107\uffdc\111\uffdc\113\uffdc\115" +
    "\uffdc\001\002\000\044\003\uffde\011\uffde\012\uffde\016\uffde" +
    "\022\uffde\025\uffde\030\uffde\034\uffde\046\uffde\053\uffde\061" +
    "\uffde\076\uffde\103\uffde\107\uffde\111\uffde\113\uffde\115\uffde" +
    "\001\002\000\024\011\045\013\027\015\023\017\012\020" +
    "\031\036\015\051\033\055\017\056\025\001\002\000\004" +
    "\067\315\001\002\000\004\067\305\001\002\000\022\011" +
    "\100\012\073\053\072\103\103\107\070\111\071\113\074" +
    "\115\101\001\002\000\024\067\307\070\113\073\107\102" +
    "\114\103\112\104\110\105\111\106\105\112\106\001\002" +
    "\000\022\011\100\012\073\053\072\103\103\107\070\111" +
    "\071\113\074\115\101\001\002\000\024\070\113\073\107" +
    "\102\114\103\112\104\110\105\111\106\105\110\311\112" +
    "\106\001\002\000\004\075\312\001\002\000\064\003\251" +
    "\011\232\012\073\013\027\015\023\016\243\017\012\020" +
    "\031\022\254\025\227\030\224\034\212\036\015\046\217" +
    "\051\033\053\072\055\017\056\025\061\221\076\ufff9\103" +
    "\103\107\070\111\071\113\074\115\101\001\002\000\004" +
    "\076\314\001\002\000\064\003\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4\025\uffd4" +
    "\030\uffd4\034\uffd4\036\uffd4\046\uffd4\051\uffd4\053\uffd4\055" +
    "\uffd4\056\uffd4\061\uffd4\076\uffd4\103\uffd4\107\uffd4\111\uffd4" +
    "\113\uffd4\115\uffd4\001\002\000\022\011\100\012\073\053" +
    "\072\103\103\107\070\111\071\113\074\115\101\001\002" +
    "\000\024\067\317\070\113\073\107\102\114\103\112\104" +
    "\110\105\111\106\105\112\106\001\002\000\022\011\100" +
    "\012\073\053\072\103\103\107\070\111\071\113\074\115" +
    "\101\001\002\000\024\070\113\073\107\102\114\103\112" +
    "\104\110\105\111\106\105\110\321\112\106\001\002\000" +
    "\004\075\322\001\002\000\064\003\251\011\232\012\073" +
    "\013\027\015\023\016\243\017\012\020\031\022\254\025" +
    "\227\030\224\034\212\036\015\046\217\051\033\053\072" +
    "\055\017\056\025\061\221\076\ufff9\103\103\107\070\111" +
    "\071\113\074\115\101\001\002\000\004\076\324\001\002" +
    "\000\064\003\uffd5\011\uffd5\012\uffd5\013\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\022\uffd5\025\uffd5\030\uffd5\034\uffd5" +
    "\036\uffd5\046\uffd5\051\uffd5\053\uffd5\055\uffd5\056\uffd5\061" +
    "\uffd5\076\uffd5\103\uffd5\107\uffd5\111\uffd5\113\uffd5\115\uffd5" +
    "\001\002\000\044\003\uffe3\011\uffe3\012\uffe3\016\uffe3\022" +
    "\uffe3\025\uffe3\030\uffe3\034\uffe3\046\uffe3\053\uffe3\061\uffe3" +
    "\076\uffe3\103\uffe3\107\uffe3\111\uffe3\113\uffe3\115\uffe3\001" +
    "\002\000\064\003\225\011\232\012\073\013\027\015\023" +
    "\016\214\017\012\020\031\022\231\025\227\030\224\034" +
    "\212\036\015\046\217\051\033\053\072\055\017\056\025" +
    "\061\221\076\uffe9\103\103\107\070\111\071\113\074\115" +
    "\101\001\002\000\004\076\uff88\001\002\000\022\011\100" +
    "\012\073\053\072\103\103\107\070\111\071\113\074\115" +
    "\101\001\002\000\024\070\113\073\107\102\114\103\112" +
    "\104\110\105\111\106\105\110\332\112\106\001\002\000" +
    "\004\075\333\001\002\000\064\003\251\011\232\012\073" +
    "\013\027\015\023\016\243\017\012\020\031\022\254\025" +
    "\227\030\224\034\212\036\015\046\217\051\033\053\072" +
    "\055\017\056\025\061\221\076\ufff9\103\103\107\070\111" +
    "\071\113\074\115\101\001\002\000\004\076\335\001\002" +
    "\000\064\003\uffd7\011\uffd7\012\uffd7\013\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\022\uffd7\025\uffd7\030\uffd7\034\uffd7" +
    "\036\uffd7\046\uffd7\051\uffd7\053\uffd7\055\uffd7\056\uffd7\061" +
    "\uffd7\076\uffd7\103\uffd7\107\uffd7\111\uffd7\113\uffd7\115\uffd7" +
    "\001\002\000\044\003\uffe2\011\uffe2\012\uffe2\016\uffe2\022" +
    "\uffe2\025\uffe2\030\uffe2\034\uffe2\046\uffe2\053\uffe2\061\uffe2" +
    "\076\uffe2\103\uffe2\107\uffe2\111\uffe2\113\uffe2\115\uffe2\001" +
    "\002\000\066\003\uff85\011\uff85\012\uff85\013\uff85\015\uff85" +
    "\016\uff85\017\uff85\020\uff85\022\uff85\025\uff85\030\uff85\034" +
    "\uff85\036\uff85\046\uff85\051\uff85\053\uff85\055\uff85\056\uff85" +
    "\061\uff85\067\340\076\uff85\103\uff85\107\uff85\111\uff85\113" +
    "\uff85\115\uff85\001\002\000\064\003\uff86\011\uff86\012\uff86" +
    "\013\uff86\015\uff86\016\uff86\017\uff86\020\uff86\022\uff86\025" +
    "\uff86\030\uff86\034\uff86\036\uff86\046\uff86\051\uff86\053\uff86" +
    "\055\uff86\056\uff86\061\uff86\076\uff86\103\uff86\107\uff86\111" +
    "\uff86\113\uff86\115\uff86\001\002\000\006\032\uff8b\076\uff8b" +
    "\001\002\000\044\003\uffe6\011\uffe6\012\uffe6\016\uffe6\022" +
    "\uffe6\025\uffe6\030\uffe6\034\uffe6\046\uffe6\053\uffe6\061\uffe6" +
    "\076\uffe6\103\uffe6\107\uffe6\111\uffe6\113\uffe6\115\uffe6\001" +
    "\002\000\044\003\uffe0\011\uffe0\012\uffe0\016\uffe0\022\uffe0" +
    "\025\uffe0\030\uffe0\034\uffe0\046\uffe0\053\uffe0\061\uffe0\076" +
    "\uffe0\103\uffe0\107\uffe0\111\uffe0\113\uffe0\115\uffe0\001\002" +
    "\000\022\011\100\012\073\053\072\103\103\107\070\111" +
    "\071\113\074\115\101\001\002\000\024\070\113\073\107" +
    "\102\114\103\112\104\110\105\111\106\105\110\346\112" +
    "\106\001\002\000\004\075\347\001\002\000\064\003\251" +
    "\011\232\012\073\013\027\015\023\016\243\017\012\020" +
    "\031\022\254\025\227\030\224\034\212\036\015\046\217" +
    "\051\033\053\072\055\017\056\025\061\221\076\ufff9\103" +
    "\103\107\070\111\071\113\074\115\101\001\002\000\004" +
    "\076\351\001\002\000\066\003\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\025\uffdb" +
    "\026\uffda\030\uffdb\034\uffdb\036\uffdb\046\uffdb\051\uffdb\053" +
    "\uffdb\055\uffdb\056\uffdb\061\uffdb\076\uffdb\103\uffdb\107\uffdb" +
    "\111\uffdb\113\uffdb\115\uffdb\001\002\000\004\026\354\001" +
    "\002\000\064\003\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\022\uffd9\025\uffd9\030\uffd9\034" +
    "\uffd9\036\uffd9\046\uffd9\051\uffd9\053\uffd9\055\uffd9\056\uffd9" +
    "\061\uffd9\076\uffd9\103\uffd9\107\uffd9\111\uffd9\113\uffd9\115" +
    "\uffd9\001\002\000\004\075\355\001\002\000\064\003\251" +
    "\011\232\012\073\013\027\015\023\016\243\017\012\020" +
    "\031\022\254\025\227\030\224\034\212\036\015\046\217" +
    "\051\033\053\072\055\017\056\025\061\221\076\ufff9\103" +
    "\103\107\070\111\071\113\074\115\101\001\002\000\004" +
    "\076\357\001\002\000\064\003\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8\025\uffd8" +
    "\030\uffd8\034\uffd8\036\uffd8\046\uffd8\051\uffd8\053\uffd8\055" +
    "\uffd8\056\uffd8\061\uffd8\076\uffd8\103\uffd8\107\uffd8\111\uffd8" +
    "\113\uffd8\115\uffd8\001\002\000\004\076\uffea\001\002\000" +
    "\006\003\uff8d\075\uff8d\001\002\000\020\003\uff95\037\uff95" +
    "\042\uff95\044\uff95\045\uff95\047\uff95\075\uff95\001\002\000" +
    "\034\002\uffa8\003\uffa8\013\uffa8\015\uffa8\017\uffa8\020\uffa8" +
    "\023\uffa8\027\uffa8\036\uffa8\051\uffa8\052\uffa8\055\uffa8\056" +
    "\uffa8\001\002\000\006\003\366\075\365\001\002\000\004" +
    "\011\371\001\002\000\004\076\370\001\002\000\042\002" +
    "\uff9e\003\uff9e\011\uff9e\013\uff9e\015\uff9e\017\uff9e\020\uff9e" +
    "\023\uff9e\027\uff9e\032\uff9e\036\uff9e\051\uff9e\052\uff9e\055" +
    "\uff9e\056\uff9e\076\uff9e\001\002\000\042\002\uff9c\003\uff9c" +
    "\011\uff9c\013\uff9c\015\uff9c\017\uff9c\020\uff9c\023\uff9c\027" +
    "\uff9c\032\uff9c\036\uff9c\051\uff9c\052\uff9c\055\uff9c\056\uff9c" +
    "\076\uff9c\001\002\000\006\066\373\076\uff9a\001\002\000" +
    "\004\076\377\001\002\000\004\011\375\001\002\000\004" +
    "\076\uff9b\001\002\000\006\066\373\076\uff9a\001\002\000" +
    "\004\076\uff99\001\002\000\042\002\uff9d\003\uff9d\011\uff9d" +
    "\013\uff9d\015\uff9d\017\uff9d\020\uff9d\023\uff9d\027\uff9d\032" +
    "\uff9d\036\uff9d\051\uff9d\052\uff9d\055\uff9d\056\uff9d\076\uff9d" +
    "\001\002\000\004\075\u0101\001\002\000\026\011\045\013" +
    "\027\015\023\017\012\020\031\036\015\051\033\055\017" +
    "\056\025\076\uffbc\001\002\000\004\076\u0109\001\002\000" +
    "\004\067\u0107\001\002\000\004\067\u0105\001\002\000\026" +
    "\011\045\013\027\015\023\017\012\020\031\036\015\051" +
    "\033\055\017\056\025\076\uffbc\001\002\000\004\076\uffbd" +
    "\001\002\000\026\011\045\013\027\015\023\017\012\020" +
    "\031\036\015\051\033\055\017\056\025\076\uffbc\001\002" +
    "\000\004\076\uffbe\001\002\000\040\002\uffbf\003\uffbf\013" +
    "\uffbf\015\uffbf\017\uffbf\020\uffbf\023\uffbf\027\uffbf\032\uffbf" +
    "\036\uffbf\051\uffbf\052\uffbf\055\uffbf\056\uffbf\076\uffbf\001" +
    "\002\000\004\002\ufffd\001\002\000\004\011\uffad\001\002" +
    "\000\004\072\u011b\001\002\000\024\011\100\012\073\053" +
    "\072\067\u0119\103\103\107\070\111\071\113\074\115\101" +
    "\001\002\000\004\011\u0110\001\002\000\004\011\uffac\001" +
    "\002\000\010\066\uffbb\067\uffbb\114\u0111\001\002\000\022" +
    "\011\100\012\073\053\072\103\103\107\070\111\071\113" +
    "\074\115\101\001\002\000\006\066\u0113\067\uffb4\001\002" +
    "\000\004\011\u0115\001\002\000\004\067\uffba\001\002\000" +
    "\006\066\uffb6\067\uffb6\001\002\000\006\066\u0113\067\uffb4" +
    "\001\002\000\004\067\uffb5\001\002\000\024\067\uffb9\070" +
    "\113\073\107\102\114\103\112\104\110\105\111\106\105" +
    "\112\106\001\002\000\004\011\uffab\001\002\000\024\067" +
    "\uffb7\070\113\073\107\102\114\103\112\104\110\105\111" +
    "\106\105\112\106\001\002\000\004\011\u011c\001\002\000" +
    "\010\066\u011e\067\uffb0\114\u011d\001\002\000\022\011\100" +
    "\012\073\053\072\103\103\107\070\111\071\113\074\115" +
    "\101\001\002\000\004\011\u0120\001\002\000\004\067\uffb3" +
    "\001\002\000\006\066\u011e\067\uffb0\001\002\000\004\067" +
    "\uffb1\001\002\000\024\067\uffb2\070\113\073\107\102\114" +
    "\103\112\104\110\105\111\106\105\112\106\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\033\025\031\027\027\050\013\051" +
    "\012\052\023\054\015\060\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\u010d\001\001\000\002\001" +
    "\001\000\022\003\u0109\025\031\027\027\050\013\051\012" +
    "\052\023\054\015\060\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\036\025\031\027\027\050\013\051\012\052" +
    "\023\054\015\060\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\035\025\031\027\027\050\013\051" +
    "\012\052\023\054\015\060\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\040\025\031\027\027\050" +
    "\013\051\012\052\023\054\015\060\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\025\051\027\050\032" +
    "\054\044\045\050\013\051\012\052\023\054\046\061\047" +
    "\062\055\063\053\064\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\025\051\027\050" +
    "\032\054\044\045\050\013\051\012\052\023\054\046\061" +
    "\063\062\055\063\053\064\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\051\032\054\063\057\064" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\054\064\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\025\051\027\050\032\054" +
    "\044\045\050\013\051\012\052\023\062\061\063\053\064" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\025\051\027\050\032\054\044\045\050" +
    "\013\051\012\052\023\062\065\063\053\064\052\001\001" +
    "\000\002\001\001\000\012\015\074\021\075\022\101\042" +
    "\076\001\001\000\012\015\074\021\075\022\154\042\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\074\021\075\022\146\042\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\074\021\075\022\103\042\076\001\001\000\002\001" +
    "\001\000\012\015\074\021\075\022\125\042\076\001\001" +
    "\000\012\015\074\021\075\022\124\042\076\001\001\000" +
    "\012\015\074\021\075\022\121\042\076\001\001\000\012" +
    "\015\074\021\075\022\120\042\076\001\001\000\012\015" +
    "\074\021\075\022\117\042\076\001\001\000\012\015\074" +
    "\021\075\022\116\042\076\001\001\000\012\015\074\021" +
    "\075\022\115\042\076\001\001\000\012\015\074\021\075" +
    "\022\114\042\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\074\021\075\022\123\042" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\074\021\075\022" +
    "\133\042\076\043\131\045\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\144\001\001\000\004\031" +
    "\135\001\001\000\012\015\074\021\075\022\143\042\076" +
    "\001\001\000\002\001\001\000\014\015\074\021\075\022" +
    "\140\042\076\045\137\001\001\000\004\031\142\001\001" +
    "\000\004\031\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\015\074\021\075\022\133\042" +
    "\076\043\152\045\132\001\001\000\012\015\074\021\075" +
    "\022\151\042\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\160\001\001\000\002\001\001\000\004\035" +
    "\177\001\001\000\006\050\162\051\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\166\001\001\000" +
    "\006\050\170\051\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\201\001\001\000" +
    "\004\033\360\001\001\000\004\037\204\001\001\000\044" +
    "\010\212\012\225\013\214\014\227\015\222\021\075\022" +
    "\233\027\221\041\232\042\234\044\217\050\013\051\012" +
    "\052\023\066\210\067\207\070\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\010\212\012\225\013\214\014\227\015\222\021" +
    "\075\022\233\041\232\042\234\044\217\066\357\067\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\005\241\010\240\012\251\013\243" +
    "\014\252\015\246\021\075\022\233\027\245\041\254\042" +
    "\255\044\244\050\013\051\012\052\023\065\247\001\001" +
    "\000\002\001\001\000\042\005\241\010\240\012\251\013" +
    "\243\014\252\015\246\021\075\022\233\027\245\041\254" +
    "\042\255\044\244\050\013\051\012\052\023\065\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\074\021\075\022\266\042\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\027\302\044\303\050\013\051\012" +
    "\052\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\074\021\075\022\305\042\076\001\001\000\002" +
    "\001\001\000\012\015\074\021\075\022\307\042\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\241" +
    "\010\240\012\251\013\243\014\252\015\246\021\075\022" +
    "\233\027\245\041\254\042\255\044\244\050\013\051\012" +
    "\052\023\065\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\074\021\075\022\315\042\076\001\001" +
    "\000\002\001\001\000\012\015\074\021\075\022\317\042" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\241\010\240\012\251\013\243\014\252\015\246\021" +
    "\075\022\233\027\245\041\254\042\255\044\244\050\013" +
    "\051\012\052\023\065\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\010\212\012\225" +
    "\013\214\014\227\015\222\021\075\022\233\027\221\041" +
    "\232\042\234\044\217\050\013\051\012\052\023\066\210" +
    "\067\207\070\326\001\001\000\002\001\001\000\012\015" +
    "\074\021\075\022\330\042\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\241\010\240\012\251\013" +
    "\243\014\252\015\246\021\075\022\233\027\245\041\254" +
    "\042\255\044\244\050\013\051\012\052\023\065\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\074\021\075" +
    "\022\344\042\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\241\010\240\012\251\013\243\014\252" +
    "\015\246\021\075\022\233\027\245\041\254\042\255\044" +
    "\244\050\013\051\012\052\023\065\347\001\001\000\002" +
    "\001\001\000\004\071\351\001\001\000\004\011\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\241" +
    "\010\240\012\251\013\243\014\252\015\246\021\075\022" +
    "\233\027\245\041\254\042\255\044\244\050\013\051\012" +
    "\052\023\065\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\371\001\001\000\002\001\001\000\004\057" +
    "\373\001\001\000\002\001\001\000\004\056\375\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\026\u0101\027\u0102\044\u0103\050\013\051\012\052\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\026\u0105\027\u0102\044\u0103\050\013\051\012" +
    "\052\023\001\001\000\002\001\001\000\016\026\u0107\027" +
    "\u0102\044\u0103\050\013\051\012\052\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\074\021\075\022\u0119" +
    "\042\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\u0111\001\001\000\012\015\074\021\075\022\u0117" +
    "\042\076\001\001\000\004\046\u0113\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\073\u0115\001\001\000\004" +
    "\046\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\u011e\001\001\000\012\015\074\021\075\022\u0121\042" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\u0120\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static ArrayList<String> erroresEspec = new ArrayList<String>();
    public static boolean fatalError = false;
    public static boolean specError = false;
    public static Symbol fatalErrorSym;
    public static String specErrorDetail = "";

    

    static TablaSimbolos tabla = new TablaSimbolos();


    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public static void informar_Error_Especifico(String tipoError){
        String specErrorStr = "ERROR: "+tipoError;
        specErrorDetail = specErrorStr;
        erroresEspec.add(specErrorStr);
        specError = true;

        System.err.println(specErrorStr);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FUNCCALL ::= This ParentAbre PARAMFUNC ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PARAMFUNCFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PARAMFUNCFILA ::= Coma ASIGVARIABLEFUN PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PARAMFUNCFILA ::= Coma EXPRESION PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PARAMFUNC ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PARAMFUNC ::= ASIGVARIABLEFUN PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PARAMFUNC ::= EXPRESION PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA_RETURN ::= Return Identificador 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Return de función sin punto y coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA_RETURN ::= Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FUNCIONCONTENVARLIS ::= LISTA_SENTENCIAPRIMAFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTENVARLIS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FUNCIONCONTENVARLIS ::= DECLARVARIABLE PuntoComa FUNCIONCONTENVARLIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTENVARLIS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FUNCIONCONTEN ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FUNCIONCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FUNCIONCONTEN ::= LlaveAbre FUNCIONCONTENVARLIS LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FUNCIONRETURNS ::= Returns FUNCIONATRIB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUNATRIBDOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCIONATRIB ::= error ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCIONATRIB ::= ParentAbre ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ENUMCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONTRACTPART3 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONTRACTPART2 ::= CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTRACTPART1 ::= CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTRACTPART1 ::= ASIGVARIABLE PuntoComa CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTRACTPART1 ::= DECLARVARIABLE PuntoComa CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTRACTPART ::= CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTRACTDEF ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ACCESSMOD ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGVARIABLEFUN ::= EXPRESION Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLEFUN",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGVARIABLE ::= Identificador Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ARRAYDECLARFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ARRAYDECLARFILA ::= Coma Identificador ARRAYDECLARFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador ARRAYDECLARFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARVARIABLEFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARVARIABLEFILA ::= Coma Identificador NT$2 DECLARVARIABLEFILA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$2 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
EscritorASM.escribeVariable(i.toString());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARVARIABLE ::= TYPENAME error EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion EXPRESION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                                                                                                                            EscritorASM.escribeExp(i.toString(),op.toString(),ex.toString());
                                                                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador NT$1 DECLARVARIABLEFILA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
EscritorASM.escribeVariable(i.toString());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STRUCTCONTEN ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STRUCTCONTEN ::= ASIGVARIABLE PuntoComa STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STRUCTCONTEN ::= DECLARVARIABLE PuntoComa STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STRUCTDEF ::= Struct Identificador LlaveAbre STRUCTCONTEN LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= SENTENCIA_TERNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= Identificador Op_Incremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= Op_Incremental Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= Literal 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = li; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION Punto EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= This Punto EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION_INCREMENTAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION Mod EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION Div EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION Mult EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                            String t = EscritorASM.temp();
                                                            EscritorASM.escribeExp(ex1.toString(),op.toString(),ex2.toString());
                                                            RESULT = t;
                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                            String t = EscritorASM.temp();
                                                            EscritorASM.escribeExp(ex1.toString(),op.toString(),ex2.toString());
                                                            RESULT = t;
                                                           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= Op_Booleano 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = op; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = id; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= Not EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= ParentAbre EXPRESION ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		String t = EscritorASM.etiq();
                                                                    EscritorASM.escribeExp(ex1.toString(),op.toString(),ex2.toString());
                                                                    RESULT = t;
                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_TERNARIA ::= EXPRESION SignoPregunta EXPRESION DosPuntos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_TERNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_FOR ::= For ParentAbre ASIGVARIABLE PuntoComa EXPRESION PuntoComa EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_FOR ::= For ParentAbre DECLARVARIABLE PuntoComa EXPRESION PuntoComa EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra While ParentAbre EXPRESION ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_WHILE ::= While ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_ELSE ::= Else LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;
		
                                                                    EscritorASM.escribeExp(null,"elseEnd",null);                                                                                                    
                                                                   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_IF ::= If ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra NT$0 SENTENCIA_ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$0 ::= 
            {
              Object RESULT =null;

                                                                                                    EscritorASM.escribeExp(null,"ifEnd",null);
                                                                                                    String t = EscritorASM.etiq();
                                                                                                  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_IF ::= If ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;
		
                                                                                                    EscritorASM.escribeExp(null,"ifExit",null);                                                                                                    
                                                                                                  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIAFUN ::= error ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAFUN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIAFUN ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAFUN ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAFUN ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAFUN ::= FUNCCALL PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAFUN ::= ASIGVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAFUN ::= SENTENCIA_TERNARIA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAFUN ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAFUN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAFUN ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAFUN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAFUN ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_SENTENCIAPRIMAFUN ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMAFUN",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_SENTENCIAPRIMAFUN ::= SENTENCIAFUN LISTA_SENTENCIAPRIMAFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMAFUN",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= error ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FUNCCALL PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ASIGVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DECLARVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_TERNARIA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_SENTENCIAPRIMA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIODOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIODOS ::= DECLARVARIABLE PuntoComa INICIODOS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Sintax.informar_Error_Especifico("Declaración fuera de función. En línea: "+pright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIODOS ::= ENUMDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIODOS ::= CONTRACTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIODOS ::= STRUCTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Version PuntoComa INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

