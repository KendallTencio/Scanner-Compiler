
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 17 19:58:29 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 17 19:58:29 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\002" +
    "\000\002\056\004\000\002\056\002\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\007\011\000\002\007\012\000\002\010\006\000" +
    "\002\011\011\000\002\012\012\000\002\013\014\000\002" +
    "\014\010\000\002\015\003\000\002\015\004\000\002\015" +
    "\006\000\002\015\005\000\002\015\007\000\002\015\007" +
    "\000\002\015\003\000\002\017\003\000\002\017\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\004\000\002\016" +
    "\005\000\002\016\003\000\002\020\004\000\002\020\004" +
    "\000\002\023\005\000\002\024\006\000\002\025\006\000" +
    "\002\025\010\000\002\025\003\000\002\043\007\000\002" +
    "\043\011\000\002\044\003\000\002\044\003\000\002\044" +
    "\002\000\002\051\010\000\002\052\004\000\002\052\003" +
    "\000\002\053\004\000\002\053\003\000\002\054\004\000" +
    "\002\054\003\000\002\055\004\000\002\055\002\000\002" +
    "\045\005\000\002\046\007\000\002\047\004\000\002\047" +
    "\002\000\002\050\004\000\002\027\010\000\002\030\006" +
    "\000\002\031\006\000\002\031\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\002\000\002\033\004\000\002\033\002\000\002\034" +
    "\005\000\002\034\004\000\002\036\005\000\002\036\004" +
    "\000\002\040\004\000\002\041\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\037\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\026\002\ufffc\010\023\011\010\022\022\026" +
    "\015\051\021\102\024\106\004\110\005\112\012\001\002" +
    "\000\016\010\023\011\010\102\024\106\004\110\005\112" +
    "\012\001\002\000\010\066\uffe7\072\uffe7\107\uffe7\001\002" +
    "\000\004\111\316\001\002\000\026\002\ufffc\010\023\011" +
    "\010\022\022\026\015\051\021\102\024\106\004\110\005" +
    "\112\012\001\002\000\026\066\uffd7\072\uffd7\073\uffd7\101" +
    "\uffd7\102\uffd7\103\uffd7\104\uffd7\105\uffd7\107\uffd7\111\uffd7" +
    "\001\002\000\004\072\310\001\002\000\016\010\023\011" +
    "\010\102\024\106\300\110\005\112\012\001\002\000\004" +
    "\002\277\001\002\000\026\002\ufffc\010\023\011\010\022" +
    "\022\026\015\051\021\102\024\106\004\110\005\112\012" +
    "\001\002\000\004\010\263\001\002\000\026\002\ufffc\010" +
    "\023\011\010\022\022\026\015\051\021\102\024\106\004" +
    "\110\005\112\012\001\002\000\026\002\ufffc\010\023\011" +
    "\010\022\022\026\015\051\021\102\024\106\004\110\005" +
    "\112\012\001\002\000\026\066\uffe0\072\uffe0\073\uffe0\101" +
    "\035\102\033\103\032\104\034\105\030\107\uffe0\111\uffe0" +
    "\001\002\000\004\010\253\001\002\000\004\010\043\001" +
    "\002\000\012\066\uffe1\072\uffe1\107\uffe1\111\uffdf\001\002" +
    "\000\010\011\010\102\024\106\026\001\002\000\026\066" +
    "\uffd9\072\uffd9\073\uffd9\101\uffd9\102\uffd9\103\032\104\034" +
    "\105\030\107\uffd9\111\uffd9\001\002\000\010\011\010\102" +
    "\024\106\026\001\002\000\016\101\035\102\033\103\032" +
    "\104\034\105\030\107\031\001\002\000\010\011\010\102" +
    "\024\106\026\001\002\000\026\066\uffd8\072\uffd8\073\uffd8" +
    "\101\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8\107\uffd8\111" +
    "\uffd8\001\002\000\010\011\010\102\024\106\026\001\002" +
    "\000\010\011\010\102\024\106\026\001\002\000\010\011" +
    "\010\102\024\106\026\001\002\000\010\011\010\102\024" +
    "\106\026\001\002\000\026\066\uffde\072\uffde\073\uffde\101" +
    "\uffde\102\uffde\103\032\104\034\105\030\107\uffde\111\uffde" +
    "\001\002\000\026\066\uffdb\072\uffdb\073\uffdb\101\uffdb\102" +
    "\uffdb\103\uffdb\104\uffdb\105\uffdb\107\uffdb\111\uffdb\001\002" +
    "\000\026\066\uffdd\072\uffdd\073\uffdd\101\uffdd\102\uffdd\103" +
    "\032\104\034\105\030\107\uffdd\111\uffdd\001\002\000\026" +
    "\066\uffdc\072\uffdc\073\uffdc\101\uffdc\102\uffdc\103\uffdc\104" +
    "\uffdc\105\uffdc\107\uffdc\111\uffdc\001\002\000\026\066\uffda" +
    "\072\uffda\073\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105" +
    "\uffda\107\uffda\111\uffda\001\002\000\004\074\044\001\002" +
    "\000\032\012\060\014\056\016\045\017\062\026\015\031" +
    "\050\035\051\050\070\051\021\054\053\055\057\075\uffc2" +
    "\001\002\000\012\010\uffaa\043\uffaa\044\uffaa\070\uffaa\001" +
    "\002\000\012\010\uffac\043\uffac\044\uffac\070\uffac\001\002" +
    "\000\012\010\uffcb\043\234\044\237\070\235\001\002\000" +
    "\004\010\077\001\002\000\012\010\uffa7\043\uffa7\044\uffa7" +
    "\070\uffa7\001\002\000\032\012\060\014\056\016\045\017" +
    "\062\026\015\031\050\035\051\050\070\051\021\054\053" +
    "\055\057\075\uffc2\001\002\000\012\010\uffa5\043\uffa5\044" +
    "\uffa5\070\uffa5\001\002\000\004\075\074\001\002\000\064" +
    "\003\uffd0\010\uffd0\011\uffd0\012\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\021\uffd0\024\uffd0\027\uffd0\031\uffd0\033\uffd0" +
    "\035\uffd0\045\uffd0\050\uffd0\051\uffd0\054\uffd0\055\uffd0\060" +
    "\uffd0\075\uffd0\102\uffd0\106\uffd0\110\uffd0\112\uffd0\001\002" +
    "\000\012\010\uffab\043\uffab\044\uffab\070\uffab\001\002\000" +
    "\012\010\uffa4\043\uffa4\044\uffa4\070\uffa4\001\002\000\012" +
    "\010\uffa8\043\uffa8\044\uffa8\070\uffa8\001\002\000\030\012" +
    "\060\014\056\016\045\017\062\031\050\035\051\050\070" +
    "\051\021\054\053\055\057\075\uffc2\001\002\000\012\010" +
    "\uffa9\043\uffa9\044\uffa9\070\uffa9\001\002\000\010\031\050" +
    "\051\021\075\uffc2\001\002\000\004\075\uffc4\001\002\000" +
    "\004\075\uffc6\001\002\000\006\031\050\075\uffc2\001\002" +
    "\000\004\075\uffc8\001\002\000\012\010\uffa6\043\uffa6\044" +
    "\uffa6\070\uffa6\001\002\000\004\075\uffc3\001\002\000\004" +
    "\075\uffc5\001\002\000\004\075\uffc7\001\002\000\004\066" +
    "\075\001\002\000\026\002\uffca\010\uffca\011\uffca\022\uffca" +
    "\026\uffca\051\uffca\102\uffca\106\uffca\110\uffca\112\uffca\001" +
    "\002\000\004\075\uffc9\001\002\000\004\106\101\001\002" +
    "\000\020\003\uffb4\036\114\041\113\043\112\044\115\046" +
    "\uffb4\074\uffb4\001\002\000\022\012\060\014\056\016\045" +
    "\017\062\035\051\050\070\054\053\055\057\001\002\000" +
    "\004\010\103\001\002\000\006\065\105\107\104\001\002" +
    "\000\020\003\uffb9\036\uffb9\041\uffb9\043\uffb9\044\uffb9\046" +
    "\uffb9\074\uffb9\001\002\000\022\012\060\014\056\016\045" +
    "\017\062\035\051\050\070\054\053\055\057\001\002\000" +
    "\020\003\uffbb\036\uffbb\041\uffbb\043\uffbb\044\uffbb\046\uffbb" +
    "\074\uffbb\001\002\000\004\010\110\001\002\000\006\065" +
    "\105\107\104\001\002\000\020\003\uffba\036\uffba\041\uffba" +
    "\043\uffba\044\uffba\046\uffba\074\uffba\001\002\000\010\003" +
    "\uffb7\046\uffb7\074\uffb7\001\002\000\010\003\uffb8\046\uffb8" +
    "\074\uffb8\001\002\000\010\003\uffb5\046\uffb5\074\uffb5\001" +
    "\002\000\010\003\uffb6\046\uffb6\074\uffb6\001\002\000\010" +
    "\003\uffb2\046\117\074\uffb2\001\002\000\004\106\101\001" +
    "\002\000\006\003\122\074\121\001\002\000\046\003\143" +
    "\010\134\012\060\014\056\015\133\016\045\017\062\021" +
    "\126\024\144\027\127\033\141\035\051\045\142\050\070" +
    "\054\053\055\057\060\146\075\ufffa\001\002\000\004\075" +
    "\124\001\002\000\006\031\uffbc\075\uffbc\001\002\000\006" +
    "\031\uffb0\075\uffb0\001\002\000\004\075\232\001\002\000" +
    "\004\066\231\001\002\000\004\106\214\001\002\000\046" +
    "\003\ufff6\010\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\021\ufff6\024\ufff6\027\ufff6\033\ufff6\035\ufff6\045\ufff6" +
    "\050\ufff6\054\ufff6\055\ufff6\060\ufff6\075\ufff6\001\002\000" +
    "\046\003\143\010\134\012\060\014\056\015\133\016\045" +
    "\017\062\021\126\024\144\027\127\033\141\035\051\045" +
    "\142\050\070\054\053\055\057\060\146\075\ufffa\001\002" +
    "\000\046\003\ufff5\010\ufff5\012\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\021\ufff5\024\ufff5\027\ufff5\033\ufff5\035\ufff5" +
    "\045\ufff5\050\ufff5\054\ufff5\055\ufff5\060\ufff5\075\ufff5\001" +
    "\002\000\004\066\212\001\002\000\004\106\204\001\002" +
    "\000\046\003\ufff9\010\ufff9\012\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\021\ufff9\024\ufff9\027\ufff9\033\ufff9\035\ufff9" +
    "\045\ufff9\050\ufff9\054\ufff9\055\ufff9\060\ufff9\075\ufff9\001" +
    "\002\000\046\003\ufff3\010\ufff3\012\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\021\ufff3\024\ufff3\027\ufff3\033\ufff3\035" +
    "\ufff3\045\ufff3\050\ufff3\054\ufff3\055\ufff3\060\ufff3\075\ufff3" +
    "\001\002\000\004\066\203\001\002\000\046\003\ufff8\010" +
    "\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\021\ufff8" +
    "\024\ufff8\027\ufff8\033\ufff8\035\ufff8\045\ufff8\050\ufff8\054" +
    "\ufff8\055\ufff8\060\ufff8\075\ufff8\001\002\000\004\106\170" +
    "\001\002\000\004\010\166\001\002\000\006\066\165\075" +
    "\164\001\002\000\004\074\155\001\002\000\046\003\ufff4" +
    "\010\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021" +
    "\ufff4\024\ufff4\027\ufff4\033\ufff4\035\ufff4\045\ufff4\050\ufff4" +
    "\054\ufff4\055\ufff4\060\ufff4\075\ufff4\001\002\000\004\106" +
    "\147\001\002\000\016\010\023\011\010\102\024\106\004" +
    "\110\005\112\012\001\002\000\004\107\151\001\002\000" +
    "\004\074\152\001\002\000\046\003\143\010\134\012\060" +
    "\014\056\015\133\016\045\017\062\021\126\024\144\027" +
    "\127\033\141\035\051\045\142\050\070\054\053\055\057" +
    "\060\146\075\ufffa\001\002\000\004\075\154\001\002\000" +
    "\046\003\uffeb\010\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\021\uffeb\024\uffeb\027\uffeb\033\uffeb\035\uffeb\045" +
    "\uffeb\050\uffeb\054\uffeb\055\uffeb\060\uffeb\075\uffeb\001\002" +
    "\000\046\003\143\010\134\012\060\014\056\015\133\016" +
    "\045\017\062\021\126\024\144\027\127\033\141\035\051" +
    "\045\142\050\070\054\053\055\057\060\146\075\ufffa\001" +
    "\002\000\004\075\157\001\002\000\004\060\160\001\002" +
    "\000\004\106\161\001\002\000\016\010\023\011\010\102" +
    "\024\106\004\110\005\112\012\001\002\000\004\107\163" +
    "\001\002\000\004\066\uffea\001\002\000\046\003\uffef\010" +
    "\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\021\uffef" +
    "\024\uffef\027\uffef\033\uffef\035\uffef\045\uffef\050\uffef\054" +
    "\uffef\055\uffef\060\uffef\075\uffef\001\002\000\046\003\ufff0" +
    "\010\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021" +
    "\ufff0\024\ufff0\027\ufff0\033\ufff0\035\ufff0\045\ufff0\050\ufff0" +
    "\054\ufff0\055\ufff0\060\ufff0\075\ufff0\001\002\000\050\003" +
    "\uffae\010\uffae\012\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\021\uffae\024\uffae\027\uffae\033\uffae\035\uffae\045\uffae\050" +
    "\uffae\054\uffae\055\uffae\060\uffae\066\167\075\uffae\001\002" +
    "\000\046\003\uffaf\010\uffaf\012\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\021\uffaf\024\uffaf\027\uffaf\033\uffaf\035\uffaf" +
    "\045\uffaf\050\uffaf\054\uffaf\055\uffaf\060\uffaf\075\uffaf\001" +
    "\002\000\016\010\023\011\010\102\024\106\004\110\005" +
    "\112\012\001\002\000\004\107\172\001\002\000\004\074" +
    "\173\001\002\000\046\003\143\010\134\012\060\014\056" +
    "\015\133\016\045\017\062\021\126\024\144\027\127\033" +
    "\141\035\051\045\142\050\070\054\053\055\057\060\146" +
    "\075\ufffa\001\002\000\004\075\175\001\002\000\050\003" +
    "\uffee\010\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\021\uffee\024\uffee\025\177\027\uffee\033\uffee\035\uffee\045" +
    "\uffee\050\uffee\054\uffee\055\uffee\060\uffee\075\uffee\001\002" +
    "\000\046\003\uffed\010\uffed\012\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\021\uffed\024\uffed\027\uffed\033\uffed\035\uffed" +
    "\045\uffed\050\uffed\054\uffed\055\uffed\060\uffed\075\uffed\001" +
    "\002\000\004\074\200\001\002\000\046\003\143\010\134" +
    "\012\060\014\056\015\133\016\045\017\062\021\126\024" +
    "\144\027\127\033\141\035\051\045\142\050\070\054\053" +
    "\055\057\060\146\075\ufffa\001\002\000\004\075\202\001" +
    "\002\000\046\003\uffec\010\uffec\012\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\021\uffec\024\uffec\027\uffec\033\uffec\035" +
    "\uffec\045\uffec\050\uffec\054\uffec\055\uffec\060\uffec\075\uffec" +
    "\001\002\000\046\003\ufff7\010\ufff7\012\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\021\ufff7\024\ufff7\027\ufff7\033\ufff7" +
    "\035\ufff7\045\ufff7\050\ufff7\054\ufff7\055\ufff7\060\ufff7\075" +
    "\ufff7\001\002\000\022\012\060\014\056\016\045\017\062" +
    "\035\051\050\070\054\053\055\057\001\002\000\004\010" +
    "\211\001\002\000\004\107\207\001\002\000\004\066\210" +
    "\001\002\000\046\003\uffa3\010\uffa3\012\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\021\uffa3\024\uffa3\027\uffa3\033\uffa3" +
    "\035\uffa3\045\uffa3\050\uffa3\054\uffa3\055\uffa3\060\uffa3\075" +
    "\uffa3\001\002\000\004\107\uffad\001\002\000\046\003\ufff2" +
    "\010\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\021" +
    "\ufff2\024\ufff2\027\ufff2\033\ufff2\035\ufff2\045\ufff2\050\ufff2" +
    "\054\ufff2\055\ufff2\060\ufff2\075\ufff2\001\002\000\004\075" +
    "\ufffb\001\002\000\022\012\060\014\056\016\045\017\062" +
    "\035\051\050\070\054\053\055\057\001\002\000\016\010" +
    "\023\011\010\102\024\106\004\110\005\112\012\001\002" +
    "\000\004\066\217\001\002\000\006\010\221\114\222\001" +
    "\002\000\004\107\225\001\002\000\004\114\224\001\002" +
    "\000\004\010\223\001\002\000\004\107\uffd6\001\002\000" +
    "\004\107\uffd5\001\002\000\004\074\226\001\002\000\046" +
    "\003\143\010\134\012\060\014\056\015\133\016\045\017" +
    "\062\021\126\024\144\027\127\033\141\035\051\045\142" +
    "\050\070\054\053\055\057\060\146\075\ufffa\001\002\000" +
    "\004\075\230\001\002\000\046\003\uffe9\010\uffe9\012\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\024\uffe9\027" +
    "\uffe9\033\uffe9\035\uffe9\045\uffe9\050\uffe9\054\uffe9\055\uffe9" +
    "\060\uffe9\075\uffe9\001\002\000\046\003\ufff1\010\ufff1\012" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1\024\ufff1" +
    "\027\ufff1\033\ufff1\035\ufff1\045\ufff1\050\ufff1\054\ufff1\055" +
    "\ufff1\060\ufff1\075\ufff1\001\002\000\006\031\uffb1\075\uffb1" +
    "\001\002\000\006\003\uffb3\074\uffb3\001\002\000\004\010" +
    "\uffcd\001\002\000\004\071\245\001\002\000\004\010\240" +
    "\001\002\000\004\010\uffcc\001\002\000\006\066\242\113" +
    "\241\001\002\000\004\011\243\001\002\000\064\003\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\021\uffd2\024\uffd2\027\uffd2\031\uffd2\033\uffd2\035\uffd2" +
    "\045\uffd2\050\uffd2\051\uffd2\054\uffd2\055\uffd2\060\uffd2\075" +
    "\uffd2\102\uffd2\106\uffd2\110\uffd2\112\uffd2\001\002\000\004" +
    "\066\244\001\002\000\064\003\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\021\uffd1\024\uffd1" +
    "\027\uffd1\031\uffd1\033\uffd1\035\uffd1\045\uffd1\050\uffd1\051" +
    "\uffd1\054\uffd1\055\uffd1\060\uffd1\075\uffd1\102\uffd1\106\uffd1" +
    "\110\uffd1\112\uffd1\001\002\000\004\010\246\001\002\000" +
    "\006\066\250\113\247\001\002\000\004\011\251\001\002" +
    "\000\064\003\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\021\uffcf\024\uffcf\027\uffcf\031\uffcf" +
    "\033\uffcf\035\uffcf\045\uffcf\050\uffcf\051\uffcf\054\uffcf\055" +
    "\uffcf\060\uffcf\075\uffcf\102\uffcf\106\uffcf\110\uffcf\112\uffcf" +
    "\001\002\000\004\066\252\001\002\000\064\003\uffce\010" +
    "\uffce\011\uffce\012\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\021\uffce\024\uffce\027\uffce\031\uffce\033\uffce\035\uffce\045" +
    "\uffce\050\uffce\051\uffce\054\uffce\055\uffce\060\uffce\075\uffce" +
    "\102\uffce\106\uffce\110\uffce\112\uffce\001\002\000\004\074" +
    "\255\001\002\000\032\002\uffd4\010\uffd4\011\uffd4\022\uffd4" +
    "\026\uffd4\031\uffd4\051\uffd4\075\uffd4\102\uffd4\106\uffd4\110" +
    "\uffd4\112\uffd4\001\002\000\022\012\060\014\056\016\045" +
    "\017\062\035\051\050\070\054\053\055\057\001\002\000" +
    "\004\075\257\001\002\000\004\066\260\001\002\000\032" +
    "\002\uffd3\010\uffd3\011\uffd3\022\uffd3\026\uffd3\031\uffd3\051" +
    "\uffd3\075\uffd3\102\uffd3\106\uffd3\110\uffd3\112\uffd3\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\000\001\002\000" +
    "\004\074\264\001\002\000\004\010\266\001\002\000\052" +
    "\002\uffc1\010\uffc1\011\uffc1\012\uffc1\014\uffc1\016\uffc1\017" +
    "\uffc1\022\uffc1\026\uffc1\031\uffc1\035\uffc1\050\uffc1\051\uffc1" +
    "\054\uffc1\055\uffc1\075\uffc1\102\uffc1\106\uffc1\110\uffc1\112" +
    "\uffc1\001\002\000\006\065\270\075\uffbe\001\002\000\004" +
    "\075\274\001\002\000\004\010\272\001\002\000\004\075" +
    "\uffbf\001\002\000\006\065\270\075\uffbe\001\002\000\004" +
    "\075\uffbd\001\002\000\004\066\275\001\002\000\052\002" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\014\uffc0\016\uffc0\017\uffc0" +
    "\022\uffc0\026\uffc0\031\uffc0\035\uffc0\050\uffc0\051\uffc0\054" +
    "\uffc0\055\uffc0\075\uffc0\102\uffc0\106\uffc0\110\uffc0\112\uffc0" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\001\001" +
    "\002\000\016\010\023\011\010\102\024\106\004\110\005" +
    "\112\012\001\002\000\010\066\uffe6\072\uffe6\107\uffe6\001" +
    "\002\000\004\107\304\001\002\000\020\101\035\102\033" +
    "\103\032\104\034\105\030\107\031\111\uffe0\001\002\000" +
    "\012\066\uffe5\072\uffe5\107\uffe5\111\305\001\002\000\012" +
    "\010\306\011\010\102\024\106\026\001\002\000\012\066" +
    "\uffdf\072\uffdf\073\uffdf\107\uffdf\001\002\000\010\066\uffe2" +
    "\072\uffe2\107\uffe2\001\002\000\012\010\306\011\010\102" +
    "\024\106\026\001\002\000\004\073\312\001\002\000\012" +
    "\010\306\011\010\102\024\106\026\001\002\000\004\066" +
    "\314\001\002\000\026\002\uffe8\010\uffe8\011\uffe8\022\uffe8" +
    "\026\uffe8\051\uffe8\102\uffe8\106\uffe8\110\uffe8\112\uffe8\001" +
    "\002\000\004\002\ufffe\001\002\000\012\010\306\011\010" +
    "\102\024\106\317\001\002\000\016\010\023\011\010\102" +
    "\024\106\004\110\005\112\012\001\002\000\010\066\uffe4" +
    "\072\uffe4\107\uffe4\001\002\000\004\107\322\001\002\000" +
    "\010\066\uffe3\072\uffe3\107\uffe3\001\002\000\004\107\324" +
    "\001\002\000\004\111\305\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\022\002\012\014\015\015\010\016\017\017" +
    "\005\023\013\045\016\051\006\001\001\000\010\015\322" +
    "\016\302\017\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\314\014\015\015\010\016\017\017\005" +
    "\023\013\045\016\051\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\300\016\017\017\005\001\001" +
    "\000\002\001\001\000\022\002\275\014\015\015\010\016" +
    "\017\017\005\023\013\045\016\051\006\001\001\000\002" +
    "\001\001\000\022\002\261\014\015\015\010\016\017\017" +
    "\005\023\013\045\016\051\006\001\001\000\022\002\260" +
    "\014\015\015\010\016\017\017\005\023\013\045\016\051" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\024\001\001\000" +
    "\002\001\001\000\004\016\026\001\001\000\002\001\001" +
    "\000\004\016\041\001\001\000\002\001\001\000\004\016" +
    "\040\001\001\000\004\016\037\001\001\000\004\016\036" +
    "\001\001\000\004\016\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\023\062\025\060\027" +
    "\065\041\046\042\045\043\054\045\051\052\053\053\066" +
    "\054\064\055\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\023\062\025\060\027\065\041\046\042" +
    "\045\043\054\045\051\052\075\053\066\054\064\055\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\023\062\025\060\027\065\041\046\042\045\043" +
    "\054\053\072\054\064\055\063\001\001\000\002\001\001" +
    "\000\012\023\062\027\065\054\071\055\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\065\055\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\077\001" +
    "\001\000\004\032\115\001\001\000\006\041\101\042\045" +
    "\001\001\000\002\001\001\000\004\031\105\001\001\000" +
    "\002\001\001\000\006\041\106\042\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\117\001\001\000" +
    "\004\030\232\001\001\000\004\034\122\001\001\000\032" +
    "\004\130\007\134\011\137\012\136\013\127\025\144\036" +
    "\131\037\135\041\046\042\045\043\054\056\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\130\007\134\011\137\012\136\013" +
    "\127\025\144\036\131\037\135\041\046\042\045\043\054" +
    "\056\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\147\016\017\017\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\130" +
    "\007\134\011\137\012\136\013\127\025\144\036\131\037" +
    "\135\041\046\042\045\043\054\056\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\130\007\134\011" +
    "\137\012\136\013\127\025\144\036\131\037\135\041\046" +
    "\042\045\043\054\056\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\161\016\017" +
    "\017\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\170\016\017\017\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\130\007\134" +
    "\011\137\012\136\013\127\025\144\036\131\037\135\041" +
    "\046\042\045\043\054\056\173\001\001\000\002\001\001" +
    "\000\004\010\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\130\007\134\011\137\012\136\013\127" +
    "\025\144\036\131\037\135\041\046\042\045\043\054\056" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\040\205\041\204\042\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\214\041\046\042\045\043\054\001\001" +
    "\000\010\015\215\016\017\017\005\001\001\000\002\001" +
    "\001\000\004\020\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\130\007\134\011\137" +
    "\012\136\013\127\025\144\036\131\037\135\041\046\042" +
    "\045\043\054\056\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\253" +
    "\001\001\000\002\001\001\000\012\025\255\041\046\042" +
    "\045\043\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\266\001\001\000\002\001\001\000\004\050" +
    "\270\001\001\000\002\001\001\000\004\047\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\301\016\302" +
    "\017\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\017\017\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\017\017\310\001\001\000\002\001\001\000\006\016\017" +
    "\017\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\017\017\317\001\001\000\010" +
    "\015\320\016\302\017\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static boolean fatalError = false;
    public static boolean specError = false;
    public static Symbol fatalErrorSym;
    public static String specErrorDetail = "";

    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public static void informar_Error_Especifico(String tipoError){
        String specErrorStr = "ERROR: "+tipoError;//+". Línea: "+specErrorSym.right+". Columna: "+specErrorSym.left;
        specErrorDetail = specErrorStr;
        specError = true;

        System.err.println(specErrorStr);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMFUNC ::= TYPENAME Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_RETURN ::= Return Identificador 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Return de función sin punto y coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_RETURN ::= Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCIONCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCIONCONTEN ::= LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCIONRETURNS ::= Returns FUNCIONATRIB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNATRIBDOS ::= ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONTRACTPART3 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTRACTPART2 ::= CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTRACTPART1 ::= CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONTRACTPART1 ::= DECLARVARIABLE CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTRACTPART ::= CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STRUCTCONTEN ::= LlaveAbre DECLARVARIABLE LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STRUCTDEF ::= Struct Identificador STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION_INCREMENTAL ::= Identificador Op_Incremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_INCREMENTAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION_INCREMENTAL ::= Op_Incremental Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_INCREMENTAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRECION_ARITMETICA ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRECION_ARITMETICA ::= ParentAbre EXPRECION_ARITMETICA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRECION_ARITMETICA ::= Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mod EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Div EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mult EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Suma EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION_PRIMARIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION_PRIMARIA ::= EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION_BOOLEANA ::= ParentAbre EXPRESION_BOOLEANA ParentCierre Op_relacional EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_BOOLEANA ::= EXPRESION_PRIMARIA Op_relacional ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION_BOOLEANA ::= EXPRESION_PRIMARIA Op_relacional EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION_BOOLEANA ::= Not ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION_BOOLEANA ::= Not EXPRESION_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_TERNARIA ::= EXPRESION_BOOLEANA SignoPregunta EXPRESION_PRIMARIA DosPuntos EXPRESION_PRIMARIA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_TERNARIA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_FOR ::= For ParentAbre DECLARVARIABLE EXPRESION_BOOLEANA PuntoComa EXPRESION_INCREMENTAL ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra While ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_WHILE ::= While ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_ELSE ::= Else LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ELSE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_IF ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra SENTENCIA_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_IF ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DECLARVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_SENTENCIAPRIMA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= ENUMDEF INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CONTRACTDEF INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= STRUCTDEF INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA_TERNARIA INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

