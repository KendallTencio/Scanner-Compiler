
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 11 16:31:38 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 11 16:31:38 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\003\005\000" +
    "\002\004\006\000\002\005\006\000\002\005\010\000\002" +
    "\005\003\000\002\024\007\000\002\024\011\000\002\025" +
    "\003\000\002\025\003\000\002\025\002\000\002\032\010" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\002\000\002\026\005\000\002" +
    "\027\007\000\002\030\004\000\002\030\002\000\002\031" +
    "\004\000\002\007\010\000\002\010\006\000\002\011\006" +
    "\000\002\011\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\002\000\002" +
    "\013\004\000\002\013\002\000\002\014\007\000\002\015" +
    "\002\000\002\016\005\000\002\022\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\017\005\000\002\020\007\000\002\021" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\034\010\011\012\024\014\021\016\004\017" +
    "\026\022\023\026\017\031\007\035\012\050\031\051\016" +
    "\054\015\055\022\001\002\000\012\010\uffd4\043\uffd4\044" +
    "\uffd4\070\uffd4\001\002\000\012\010\uffd6\043\uffd6\044\uffd6" +
    "\070\uffd6\001\002\000\012\010\ufff0\043\137\044\142\070" +
    "\140\001\002\000\004\010\103\001\002\000\004\002\ufffe" +
    "\001\002\000\006\106\074\113\073\001\002\000\012\010" +
    "\uffd1\043\uffd1\044\uffd1\070\uffd1\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\ufffa\001\002\000\012\010\uffcf\043" +
    "\uffcf\044\uffcf\070\uffcf\001\002\000\004\010\065\001\002" +
    "\000\004\010\052\001\002\000\036\002\ufff5\012\ufff5\014" +
    "\ufff5\016\ufff5\017\ufff5\026\ufff5\031\ufff5\035\ufff5\045\ufff5" +
    "\050\ufff5\051\ufff5\054\ufff5\055\ufff5\075\ufff5\001\002\000" +
    "\012\010\uffd5\043\uffd5\044\uffd5\070\uffd5\001\002\000\012" +
    "\010\uffce\043\uffce\044\uffce\070\uffce\001\002\000\004\010" +
    "\035\001\002\000\012\010\uffd2\043\uffd2\044\uffd2\070\uffd2" +
    "\001\002\000\004\002\ufffd\001\002\000\012\010\uffd3\043" +
    "\uffd3\044\uffd3\070\uffd3\001\002\000\004\002\000\001\002" +
    "\000\004\002\uffff\001\002\000\012\010\uffd0\043\uffd0\044" +
    "\uffd0\070\uffd0\001\002\000\004\002\ufffb\001\002\000\004" +
    "\002\034\001\002\000\004\002\001\001\002\000\004\074" +
    "\036\001\002\000\032\012\024\014\021\016\004\017\026" +
    "\026\017\031\007\035\012\050\031\051\016\054\015\055" +
    "\022\075\uffea\001\002\000\032\012\024\014\021\016\004" +
    "\017\026\026\017\031\007\035\012\050\031\051\016\054" +
    "\015\055\022\075\uffea\001\002\000\004\075\047\001\002" +
    "\000\032\012\024\014\021\016\004\017\026\026\017\031" +
    "\007\035\012\050\031\051\016\054\015\055\022\075\uffea" +
    "\001\002\000\032\012\024\014\021\016\004\017\026\026" +
    "\017\031\007\035\012\050\031\051\016\054\015\055\022" +
    "\075\uffea\001\002\000\032\012\024\014\021\016\004\017" +
    "\026\026\017\031\007\035\012\050\031\051\016\054\015" +
    "\055\022\075\uffea\001\002\000\004\075\uffeb\001\002\000" +
    "\004\075\uffec\001\002\000\004\075\uffed\001\002\000\004" +
    "\066\050\001\002\000\004\002\uffef\001\002\000\004\075" +
    "\uffee\001\002\000\004\074\053\001\002\000\004\010\055" +
    "\001\002\000\034\002\uffe9\012\uffe9\014\uffe9\016\uffe9\017" +
    "\uffe9\026\uffe9\031\uffe9\035\uffe9\050\uffe9\051\uffe9\054\uffe9" +
    "\055\uffe9\075\uffe9\001\002\000\006\065\057\075\uffe6\001" +
    "\002\000\004\075\063\001\002\000\004\010\061\001\002" +
    "\000\004\075\uffe7\001\002\000\006\065\057\075\uffe6\001" +
    "\002\000\004\075\uffe5\001\002\000\004\066\064\001\002" +
    "\000\034\002\uffe8\012\uffe8\014\uffe8\016\uffe8\017\uffe8\026" +
    "\uffe8\031\uffe8\035\uffe8\050\uffe8\051\uffe8\054\uffe8\055\uffe8" +
    "\075\uffe8\001\002\000\004\074\067\001\002\000\034\002" +
    "\ufff9\012\ufff9\014\ufff9\016\ufff9\017\ufff9\026\ufff9\031\ufff9" +
    "\035\ufff9\050\ufff9\051\ufff9\054\ufff9\055\ufff9\075\ufff9\001" +
    "\002\000\022\012\024\014\021\016\004\017\026\035\012" +
    "\050\031\054\015\055\022\001\002\000\004\075\071\001" +
    "\002\000\004\066\072\001\002\000\034\002\ufff8\012\ufff8" +
    "\014\ufff8\016\ufff8\017\ufff8\026\ufff8\031\ufff8\035\ufff8\050" +
    "\ufff8\051\ufff8\054\ufff8\055\ufff8\075\ufff8\001\002\000\004" +
    "\011\102\001\002\000\022\012\024\014\021\016\004\017" +
    "\026\035\012\050\031\054\015\055\022\001\002\000\004" +
    "\010\101\001\002\000\004\107\077\001\002\000\004\066" +
    "\100\001\002\000\004\002\uffcc\001\002\000\004\107\uffcb" +
    "\001\002\000\004\002\uffcd\001\002\000\004\106\105\001" +
    "\002\000\016\036\120\041\117\043\116\044\121\046\uffdc" +
    "\074\uffdc\001\002\000\022\012\024\014\021\016\004\017" +
    "\026\035\012\050\031\054\015\055\022\001\002\000\004" +
    "\010\107\001\002\000\006\065\110\107\111\001\002\000" +
    "\022\012\024\014\021\016\004\017\026\035\012\050\031" +
    "\054\015\055\022\001\002\000\016\036\uffe1\041\uffe1\043" +
    "\uffe1\044\uffe1\046\uffe1\074\uffe1\001\002\000\016\036\uffe3" +
    "\041\uffe3\043\uffe3\044\uffe3\046\uffe3\074\uffe3\001\002\000" +
    "\004\010\114\001\002\000\006\065\110\107\111\001\002" +
    "\000\016\036\uffe2\041\uffe2\043\uffe2\044\uffe2\046\uffe2\074" +
    "\uffe2\001\002\000\006\046\uffdf\074\uffdf\001\002\000\006" +
    "\046\uffe0\074\uffe0\001\002\000\006\046\uffdd\074\uffdd\001" +
    "\002\000\006\046\uffde\074\uffde\001\002\000\006\046\123" +
    "\074\uffda\001\002\000\004\106\105\001\002\000\004\074" +
    "\125\001\002\000\022\012\024\014\021\016\004\017\026" +
    "\035\012\050\031\054\015\055\022\001\002\000\034\002" +
    "\uffe4\012\uffe4\014\uffe4\016\uffe4\017\uffe4\026\uffe4\031\uffe4" +
    "\035\uffe4\050\uffe4\051\uffe4\054\uffe4\055\uffe4\075\uffe4\001" +
    "\002\000\004\045\uffd8\001\002\000\004\045\131\001\002" +
    "\000\004\010\134\001\002\000\004\075\133\001\002\000" +
    "\034\002\uffd9\012\uffd9\014\uffd9\016\uffd9\017\uffd9\026\uffd9" +
    "\031\uffd9\035\uffd9\050\uffd9\051\uffd9\054\uffd9\055\uffd9\075" +
    "\uffd9\001\002\000\004\066\135\001\002\000\004\075\uffd7" +
    "\001\002\000\004\074\uffdb\001\002\000\004\010\ufff2\001" +
    "\002\000\004\071\150\001\002\000\004\010\143\001\002" +
    "\000\004\010\ufff1\001\002\000\006\066\145\113\144\001" +
    "\002\000\004\011\146\001\002\000\036\002\ufff7\012\ufff7" +
    "\014\ufff7\016\ufff7\017\ufff7\026\ufff7\031\ufff7\035\ufff7\045" +
    "\ufff7\050\ufff7\051\ufff7\054\ufff7\055\ufff7\075\ufff7\001\002" +
    "\000\004\066\147\001\002\000\036\002\ufff6\012\ufff6\014" +
    "\ufff6\016\ufff6\017\ufff6\026\ufff6\031\ufff6\035\ufff6\045\ufff6" +
    "\050\ufff6\051\ufff6\054\ufff6\055\ufff6\075\ufff6\001\002\000" +
    "\004\010\151\001\002\000\006\066\153\113\152\001\002" +
    "\000\004\011\154\001\002\000\036\002\ufff4\012\ufff4\014" +
    "\ufff4\016\ufff4\017\ufff4\026\ufff4\031\ufff4\035\ufff4\045\ufff4" +
    "\050\ufff4\051\ufff4\054\ufff4\055\ufff4\075\ufff4\001\002\000" +
    "\004\066\155\001\002\000\036\002\ufff3\012\ufff3\014\ufff3" +
    "\016\ufff3\017\ufff3\026\ufff3\031\ufff3\035\ufff3\045\ufff3\050" +
    "\ufff3\051\ufff3\054\ufff3\055\ufff3\075\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\030\002\032\003\026\005\024\007\027\017" +
    "\007\020\012\022\005\023\004\024\017\026\013\032\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\041\005\040\007\042\022" +
    "\005\023\004\024\017\026\036\033\037\001\001\000\022" +
    "\003\041\005\040\007\042\022\005\023\004\024\017\026" +
    "\036\033\050\001\001\000\002\001\001\000\022\003\041" +
    "\005\040\007\042\022\005\023\004\024\017\026\036\033" +
    "\045\001\001\000\022\003\041\005\040\007\042\022\005" +
    "\023\004\024\017\026\036\033\044\001\001\000\022\003" +
    "\041\005\040\007\042\022\005\023\004\024\017\026\036" +
    "\033\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\055\001\001\000\002\001\001" +
    "\000\004\031\057\001\001\000\002\001\001\000\004\030" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\065\001\001\000\002\001\001\000" +
    "\012\005\067\022\005\023\004\024\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\075\022\074\023\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\103" +
    "\001\001\000\004\012\121\001\001\000\006\022\105\023" +
    "\004\001\001\000\002\001\001\000\004\011\111\001\001" +
    "\000\006\022\112\023\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\123\001\001" +
    "\000\004\010\135\001\001\000\004\014\125\001\001\000" +
    "\012\005\126\022\005\023\004\024\017\001\001\000\002" +
    "\001\001\000\004\015\127\001\001\000\004\016\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMFUNC ::= TYPENAME Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARASIGNA ::= Identificador Op_atribucion Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARASIGNA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCIONRETURN ::= Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURN",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCIONCUERPO ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCUERPO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCIONCONTEN ::= LlaveAbre DECLARVARIABLE FUNCIONCUERPO FUNCIONRETURN LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCIONRETURNS ::= Returns FUNCIONATRIB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNATRIBDOS ::= ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTRACTPART ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTRACTPART ::= FUNCIONDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTRACTPART ::= STRUCTDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTRACTPART ::= DECLARVARIABLE CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STRUCTCONTEN ::= LlaveAbre DECLARVARIABLE LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STRUCTDEF ::= Struct Identificador STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= ENUMDEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= CONTRACTDEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= DECLARVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= VARASIGNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONDEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= STRUCTDEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

