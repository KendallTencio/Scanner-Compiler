
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 11 19:31:55 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 11 19:31:55 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\004\004\000\002\004\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\004\000\002\003\004\000\002\006\011\000\002\006\015" +
    "\000\002\007\011\000\002\010\012\000\002\011\015\000" +
    "\002\011\007\000\002\012\003\000\002\012\004\000\002" +
    "\012\006\000\002\012\005\000\002\012\007\000\002\012" +
    "\007\000\002\014\003\000\002\014\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\013\005\000\002" +
    "\013\003\000\002\015\005\000\002\020\005\000\002\021" +
    "\006\000\002\022\006\000\002\022\010\000\002\022\003" +
    "\000\002\041\007\000\002\041\011\000\002\042\003\000" +
    "\002\042\003\000\002\042\002\000\002\047\010\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\002\000\002\043\005\000\002\044\007" +
    "\000\002\045\004\000\002\045\002\000\002\046\004\000" +
    "\002\024\010\000\002\025\006\000\002\026\006\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\002\000\002\030\004" +
    "\000\002\030\002\000\002\031\007\000\002\032\002\000" +
    "\002\033\005\000\002\037\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\034\005\000\002\035\007\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\050\010\040\012\037\014\043\015\014\016" +
    "\010\017\004\021\035\022\030\024\032\026\013\027\023" +
    "\031\025\033\006\035\021\050\036\051\041\054\007\055" +
    "\031\060\017\001\002\000\012\010\uffb3\043\uffb3\044\uffb3" +
    "\070\uffb3\001\002\000\004\002\uffff\001\002\000\004\106" +
    "\276\001\002\000\012\010\uffaf\043\uffaf\044\uffaf\070\uffaf" +
    "\001\002\000\012\010\uffb4\043\uffb4\044\uffb4\070\uffb4\001" +
    "\002\000\022\002\ufff7\015\ufff7\021\ufff7\024\ufff7\027\ufff7" +
    "\033\ufff7\060\ufff7\075\ufff7\001\002\000\004\002\ufffa\001" +
    "\002\000\004\010\263\001\002\000\004\066\262\001\002" +
    "\000\022\002\ufff4\015\ufff4\021\ufff4\024\ufff4\027\ufff4\033" +
    "\ufff4\060\ufff4\075\ufff4\001\002\000\004\002\ufffd\001\002" +
    "\000\004\106\254\001\002\000\004\002\ufffc\001\002\000" +
    "\012\010\uffb1\043\uffb1\044\uffb1\070\uffb1\001\002\000\020" +
    "\002\000\015\014\021\035\024\032\027\023\033\006\060" +
    "\017\001\002\000\004\106\234\001\002\000\036\002\uffd5" +
    "\012\uffd5\014\uffd5\016\uffd5\017\uffd5\026\uffd5\031\uffd5\035" +
    "\uffd5\045\uffd5\050\uffd5\051\uffd5\054\uffd5\055\uffd5\075\uffd5" +
    "\001\002\000\004\010\200\001\002\000\022\002\ufff6\015" +
    "\ufff6\021\ufff6\024\ufff6\027\ufff6\033\ufff6\060\ufff6\075\ufff6" +
    "\001\002\000\022\002\ufff5\015\ufff5\021\ufff5\024\ufff5\027" +
    "\ufff5\033\ufff5\060\ufff5\075\ufff5\001\002\000\004\010\163" +
    "\001\002\000\012\010\uffae\043\uffae\044\uffae\070\uffae\001" +
    "\002\000\004\074\107\001\002\000\004\002\ufff9\001\002" +
    "\000\022\002\ufff3\015\ufff3\021\ufff3\024\ufff3\027\ufff3\033" +
    "\ufff3\060\ufff3\075\ufff3\001\002\000\004\066\106\001\002" +
    "\000\012\010\uffb0\043\uffb0\044\uffb0\070\uffb0\001\002\000" +
    "\012\010\uffb2\043\uffb2\044\uffb2\070\uffb2\001\002\000\006" +
    "\106\077\113\076\001\002\000\004\010\070\001\002\000" +
    "\012\010\uffd0\043\051\044\054\070\052\001\002\000\012" +
    "\010\uffb5\043\uffb5\044\uffb5\070\uffb5\001\002\000\004\002" +
    "\050\001\002\000\012\010\uffb6\043\uffb6\044\uffb6\070\uffb6" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\001\001\002\000\004\010\uffd2\001\002" +
    "\000\004\071\062\001\002\000\004\010\055\001\002\000" +
    "\004\010\uffd1\001\002\000\006\066\057\113\056\001\002" +
    "\000\004\011\060\001\002\000\036\002\uffd7\012\uffd7\014" +
    "\uffd7\016\uffd7\017\uffd7\026\uffd7\031\uffd7\035\uffd7\045\uffd7" +
    "\050\uffd7\051\uffd7\054\uffd7\055\uffd7\075\uffd7\001\002\000" +
    "\004\066\061\001\002\000\036\002\uffd6\012\uffd6\014\uffd6" +
    "\016\uffd6\017\uffd6\026\uffd6\031\uffd6\035\uffd6\045\uffd6\050" +
    "\uffd6\051\uffd6\054\uffd6\055\uffd6\075\uffd6\001\002\000\004" +
    "\010\063\001\002\000\006\066\065\113\064\001\002\000" +
    "\004\011\066\001\002\000\036\002\uffd4\012\uffd4\014\uffd4" +
    "\016\uffd4\017\uffd4\026\uffd4\031\uffd4\035\uffd4\045\uffd4\050" +
    "\uffd4\051\uffd4\054\uffd4\055\uffd4\075\uffd4\001\002\000\004" +
    "\066\067\001\002\000\036\002\uffd3\012\uffd3\014\uffd3\016" +
    "\uffd3\017\uffd3\026\uffd3\031\uffd3\035\uffd3\045\uffd3\050\uffd3" +
    "\051\uffd3\054\uffd3\055\uffd3\075\uffd3\001\002\000\004\074" +
    "\072\001\002\000\034\002\uffd9\012\uffd9\014\uffd9\016\uffd9" +
    "\017\uffd9\026\uffd9\031\uffd9\035\uffd9\050\uffd9\051\uffd9\054" +
    "\uffd9\055\uffd9\075\uffd9\001\002\000\022\012\037\014\043" +
    "\016\010\017\004\035\021\050\036\054\007\055\031\001" +
    "\002\000\004\075\074\001\002\000\004\066\075\001\002" +
    "\000\034\002\uffd8\012\uffd8\014\uffd8\016\uffd8\017\uffd8\026" +
    "\uffd8\031\uffd8\035\uffd8\050\uffd8\051\uffd8\054\uffd8\055\uffd8" +
    "\075\uffd8\001\002\000\004\011\105\001\002\000\022\012" +
    "\037\014\043\016\010\017\004\035\021\050\036\054\007" +
    "\055\031\001\002\000\004\010\104\001\002\000\004\107" +
    "\102\001\002\000\004\066\103\001\002\000\004\002\uffac" +
    "\001\002\000\004\107\uffab\001\002\000\004\002\uffad\001" +
    "\002\000\022\002\ufff1\015\ufff1\021\ufff1\024\ufff1\027\ufff1" +
    "\033\ufff1\060\ufff1\075\ufff1\001\002\000\016\015\014\021" +
    "\035\024\032\027\023\033\006\060\017\001\002\000\020" +
    "\015\014\021\035\024\032\027\023\033\006\060\017\075" +
    "\111\001\002\000\004\060\113\001\002\000\022\002\ufff8" +
    "\015\ufff8\021\ufff8\024\ufff8\027\ufff8\033\ufff8\060\ufff8\075" +
    "\ufff8\001\002\000\004\106\114\001\002\000\016\010\124" +
    "\011\120\102\125\106\115\110\116\112\122\001\002\000" +
    "\016\010\124\011\120\102\125\106\115\110\116\112\122" +
    "\001\002\000\006\065\uffea\107\uffea\001\002\000\004\111" +
    "\154\001\002\000\022\065\uffdb\101\uffdb\102\uffdb\103\uffdb" +
    "\104\uffdb\105\uffdb\107\uffdb\111\uffdb\001\002\000\004\107" +
    "\153\001\002\000\016\010\124\011\120\102\125\106\144" +
    "\110\116\112\122\001\002\000\022\065\uffe4\101\136\102" +
    "\135\103\133\104\134\105\131\107\uffe4\111\uffe4\001\002" +
    "\000\010\065\uffe3\107\uffe3\111\uffe3\001\002\000\010\011" +
    "\120\102\125\106\127\001\002\000\022\065\uffdd\101\uffdd" +
    "\102\uffdd\103\133\104\134\105\131\107\uffdd\111\uffdd\001" +
    "\002\000\010\011\120\102\125\106\127\001\002\000\016" +
    "\101\136\102\135\103\133\104\134\105\131\107\132\001" +
    "\002\000\010\011\120\102\125\106\127\001\002\000\022" +
    "\065\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc\105\uffdc\107" +
    "\uffdc\111\uffdc\001\002\000\010\011\120\102\125\106\127" +
    "\001\002\000\010\011\120\102\125\106\127\001\002\000" +
    "\010\011\120\102\125\106\127\001\002\000\010\011\120" +
    "\102\125\106\127\001\002\000\022\065\uffe2\101\uffe2\102" +
    "\uffe2\103\133\104\134\105\131\107\uffe2\111\uffe2\001\002" +
    "\000\022\065\uffe1\101\uffe1\102\uffe1\103\133\104\134\105" +
    "\131\107\uffe1\111\uffe1\001\002\000\022\065\uffdf\101\uffdf" +
    "\102\uffdf\103\uffdf\104\uffdf\105\uffdf\107\uffdf\111\uffdf\001" +
    "\002\000\022\065\uffe0\101\uffe0\102\uffe0\103\uffe0\104\uffe0" +
    "\105\uffe0\107\uffe0\111\uffe0\001\002\000\022\065\uffde\101" +
    "\uffde\102\uffde\103\uffde\104\uffde\105\uffde\107\uffde\111\uffde" +
    "\001\002\000\016\010\124\011\120\102\125\106\115\110" +
    "\116\112\122\001\002\000\006\065\uffe9\107\uffe9\001\002" +
    "\000\004\107\150\001\002\000\020\101\136\102\135\103" +
    "\133\104\134\105\131\107\132\111\uffe4\001\002\000\010" +
    "\065\uffe8\107\uffe8\111\151\001\002\000\012\010\124\011" +
    "\120\102\125\106\127\001\002\000\006\065\uffe5\107\uffe5" +
    "\001\002\000\022\002\uffed\015\uffed\021\uffed\024\uffed\027" +
    "\uffed\033\uffed\060\uffed\075\uffed\001\002\000\012\010\124" +
    "\011\120\102\125\106\155\001\002\000\016\010\124\011" +
    "\120\102\125\106\115\110\116\112\122\001\002\000\006" +
    "\065\uffe7\107\uffe7\001\002\000\004\107\160\001\002\000" +
    "\006\065\uffe6\107\uffe6\001\002\000\004\107\162\001\002" +
    "\000\004\111\151\001\002\000\004\074\164\001\002\000" +
    "\032\012\037\014\043\016\010\017\004\026\013\031\025" +
    "\035\021\050\036\051\041\054\007\055\031\075\uffca\001" +
    "\002\000\032\012\037\014\043\016\010\017\004\026\013" +
    "\031\025\035\021\050\036\051\041\054\007\055\031\075" +
    "\uffca\001\002\000\004\075\175\001\002\000\032\012\037" +
    "\014\043\016\010\017\004\026\013\031\025\035\021\050" +
    "\036\051\041\054\007\055\031\075\uffca\001\002\000\032" +
    "\012\037\014\043\016\010\017\004\026\013\031\025\035" +
    "\021\050\036\051\041\054\007\055\031\075\uffca\001\002" +
    "\000\032\012\037\014\043\016\010\017\004\026\013\031" +
    "\025\035\021\050\036\051\041\054\007\055\031\075\uffca" +
    "\001\002\000\004\075\uffcb\001\002\000\004\075\uffcc\001" +
    "\002\000\004\075\uffcd\001\002\000\004\066\176\001\002" +
    "\000\004\002\uffcf\001\002\000\004\075\uffce\001\002\000" +
    "\004\106\202\001\002\000\016\036\215\041\214\043\213" +
    "\044\216\046\uffbc\074\uffbc\001\002\000\022\012\037\014" +
    "\043\016\010\017\004\035\021\050\036\054\007\055\031" +
    "\001\002\000\004\010\204\001\002\000\006\065\206\107" +
    "\205\001\002\000\016\036\uffc1\041\uffc1\043\uffc1\044\uffc1" +
    "\046\uffc1\074\uffc1\001\002\000\022\012\037\014\043\016" +
    "\010\017\004\035\021\050\036\054\007\055\031\001\002" +
    "\000\016\036\uffc3\041\uffc3\043\uffc3\044\uffc3\046\uffc3\074" +
    "\uffc3\001\002\000\004\010\211\001\002\000\006\065\206" +
    "\107\205\001\002\000\016\036\uffc2\041\uffc2\043\uffc2\044" +
    "\uffc2\046\uffc2\074\uffc2\001\002\000\006\046\uffbf\074\uffbf" +
    "\001\002\000\006\046\uffc0\074\uffc0\001\002\000\006\046" +
    "\uffbd\074\uffbd\001\002\000\006\046\uffbe\074\uffbe\001\002" +
    "\000\006\046\220\074\uffba\001\002\000\004\106\202\001" +
    "\002\000\004\074\222\001\002\000\022\012\037\014\043" +
    "\016\010\017\004\035\021\050\036\054\007\055\031\001" +
    "\002\000\034\002\uffc4\012\uffc4\014\uffc4\016\uffc4\017\uffc4" +
    "\026\uffc4\031\uffc4\035\uffc4\050\uffc4\051\uffc4\054\uffc4\055" +
    "\uffc4\075\uffc4\001\002\000\004\045\uffb8\001\002\000\004" +
    "\045\227\001\002\000\004\075\232\001\002\000\004\010" +
    "\230\001\002\000\004\066\231\001\002\000\004\075\uffb7" +
    "\001\002\000\034\002\uffb9\012\uffb9\014\uffb9\016\uffb9\017" +
    "\uffb9\026\uffb9\031\uffb9\035\uffb9\050\uffb9\051\uffb9\054\uffb9" +
    "\055\uffb9\075\uffb9\001\002\000\004\074\uffbb\001\002\000" +
    "\006\010\237\107\236\001\002\000\004\065\244\001\002" +
    "\000\004\074\242\001\002\000\004\113\240\001\002\000" +
    "\004\011\241\001\002\000\006\065\uffda\107\uffda\001\002" +
    "\000\004\075\243\001\002\000\022\002\uffeb\015\uffeb\021" +
    "\uffeb\024\uffeb\027\uffeb\033\uffeb\060\uffeb\075\uffeb\001\002" +
    "\000\016\010\124\011\120\102\125\106\115\110\116\112" +
    "\122\001\002\000\004\065\246\001\002\000\004\010\237" +
    "\001\002\000\004\107\250\001\002\000\004\074\251\001" +
    "\002\000\016\015\014\021\035\024\032\027\023\033\006" +
    "\060\017\001\002\000\020\015\014\021\035\024\032\027" +
    "\023\033\006\060\017\075\253\001\002\000\022\002\uffec" +
    "\015\uffec\021\uffec\024\uffec\027\uffec\033\uffec\060\uffec\075" +
    "\uffec\001\002\000\016\010\124\011\120\102\125\106\115" +
    "\110\116\112\122\001\002\000\004\107\256\001\002\000" +
    "\004\074\257\001\002\000\016\015\014\021\035\024\032" +
    "\027\023\033\006\060\017\001\002\000\020\015\014\021" +
    "\035\024\032\027\023\033\006\060\017\075\261\001\002" +
    "\000\022\002\uffee\015\uffee\021\uffee\024\uffee\027\uffee\033" +
    "\uffee\060\uffee\075\uffee\001\002\000\022\002\ufff2\015\ufff2" +
    "\021\ufff2\024\ufff2\027\ufff2\033\ufff2\060\ufff2\075\ufff2\001" +
    "\002\000\004\074\264\001\002\000\004\010\266\001\002" +
    "\000\034\002\uffc9\012\uffc9\014\uffc9\016\uffc9\017\uffc9\026" +
    "\uffc9\031\uffc9\035\uffc9\050\uffc9\051\uffc9\054\uffc9\055\uffc9" +
    "\075\uffc9\001\002\000\006\065\270\075\uffc6\001\002\000" +
    "\004\075\274\001\002\000\004\010\272\001\002\000\004" +
    "\075\uffc7\001\002\000\006\065\270\075\uffc6\001\002\000" +
    "\004\075\uffc5\001\002\000\004\066\275\001\002\000\034" +
    "\002\uffc8\012\uffc8\014\uffc8\016\uffc8\017\uffc8\026\uffc8\031" +
    "\uffc8\035\uffc8\050\uffc8\051\uffc8\054\uffc8\055\uffc8\075\uffc8" +
    "\001\002\000\016\010\124\011\120\102\125\106\115\110" +
    "\116\112\122\001\002\000\004\107\300\001\002\000\004" +
    "\074\301\001\002\000\016\015\014\021\035\024\032\027" +
    "\023\033\006\060\017\001\002\000\020\015\014\021\035" +
    "\024\032\027\023\033\006\060\017\075\303\001\002\000" +
    "\024\002\ufff0\015\ufff0\021\ufff0\024\ufff0\025\304\027\ufff0" +
    "\033\ufff0\060\ufff0\075\ufff0\001\002\000\004\074\305\001" +
    "\002\000\016\015\014\021\035\024\032\027\023\033\006" +
    "\060\017\001\002\000\020\015\014\021\035\024\032\027" +
    "\023\033\006\060\017\075\307\001\002\000\022\002\uffef" +
    "\015\uffef\021\uffef\024\uffef\027\uffef\033\uffef\060\uffef\075" +
    "\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\044\002\043\003\010\004\021\006\025\007" +
    "\026\010\014\011\033\020\004\022\017\024\045\034\015" +
    "\035\046\037\041\040\044\041\023\043\032\047\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\111\006\025\007\026" +
    "\010\014\011\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\070\001\001\000\002\001\001\000\012\022" +
    "\072\037\041\040\044\041\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\036\100\037\077\040\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\010\004\107\006\025\007\026\010\014\011\033\001" +
    "\001\000\014\003\111\006\025\007\026\010\014\011\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\120\013\122\014\116\001\001\000\010" +
    "\012\160\013\146\014\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\144\013\122\014\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\125\001\001\000\002\001\001" +
    "\000\004\013\127\001\001\000\002\001\001\000\004\013" +
    "\142\001\001\000\002\001\001\000\004\013\141\001\001" +
    "\000\004\013\140\001\001\000\004\013\137\001\001\000" +
    "\004\013\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\145\013\146\014\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\122\014\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\122\014\155\001\001\000\010\012" +
    "\156\013\146\014\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\020\167\022\166\024\170" +
    "\037\041\040\044\041\023\043\164\050\165\001\001\000" +
    "\022\020\167\022\166\024\170\037\041\040\044\041\023" +
    "\043\164\050\176\001\001\000\002\001\001\000\022\020" +
    "\167\022\166\024\170\037\041\040\044\041\023\043\164" +
    "\050\173\001\001\000\022\020\167\022\166\024\170\037" +
    "\041\040\044\041\023\043\164\050\172\001\001\000\022" +
    "\020\167\022\166\024\170\037\041\040\044\041\023\043" +
    "\164\050\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\200\001\001\000\004\027\216" +
    "\001\001\000\006\037\202\040\044\001\001\000\002\001" +
    "\001\000\004\026\206\001\001\000\002\001\001\000\006" +
    "\037\207\040\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\220\001\001\000\004\025\232\001\001" +
    "\000\004\031\222\001\001\000\012\022\223\037\041\040" +
    "\044\041\023\001\001\000\002\001\001\000\004\032\224" +
    "\001\001\000\004\033\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\244\013\122\014\116\001\001\000\002" +
    "\001\001\000\004\015\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\010\004\251\006\025\007\026" +
    "\010\014\011\033\001\001\000\014\003\111\006\025\007" +
    "\026\010\014\011\033\001\001\000\002\001\001\000\010" +
    "\012\254\013\122\014\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\010\004\257\006\025\007\026" +
    "\010\014\011\033\001\001\000\014\003\111\006\025\007" +
    "\026\010\014\011\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\266\001\001\000\002\001\001" +
    "\000\004\046\270\001\001\000\002\001\001\000\004\045" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\276\013\122\014\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\010\004\301" +
    "\006\025\007\026\010\014\011\033\001\001\000\014\003" +
    "\111\006\025\007\026\010\014\011\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\010\004\305\006" +
    "\025\007\026\010\014\011\033\001\001\000\014\003\111" +
    "\006\025\007\026\010\014\011\033\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMFUNC ::= TYPENAME Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARASIGNA ::= Identificador Op_atribucion Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARASIGNA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCIONRETURN ::= Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCIONCUERPO ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCUERPO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCIONCONTEN ::= LlaveAbre DECLARVARIABLE FUNCIONCUERPO FUNCIONRETURN LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCIONRETURNS ::= Returns FUNCIONATRIB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNATRIBDOS ::= ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTRACTPART ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTRACTPART ::= FUNCIONDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTRACTPART ::= STRUCTDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTRACTPART ::= DECLARVARIABLE CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRUCTCONTEN ::= LlaveAbre DECLARVARIABLE LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRUCTDEF ::= Struct Identificador STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION_ATRIBUCION ::= Identificador Op_atribucion Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ATRIBUCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRECION_ARITMETICA ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRECION_ARITMETICA ::= ParentAbre EXPRECION_ARITMETICA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRECION_ARITMETICA ::= Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mod EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Div EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mult EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Suma EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_PRIMARIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION_PRIMARIA ::= EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION_BOOLEANA ::= ParentAbre EXPRESION_BOOLEANA ParentCierre Op_relacional EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION_BOOLEANA ::= EXPRESION_PRIMARIA Op_relacional ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION_BOOLEANA ::= EXPRESION_PRIMARIA Op_relacional EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION_BOOLEANA ::= Not ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION_BOOLEANA ::= Not EXPRESION_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_FOR ::= For ParentAbre ParentCierre LlaveAbre LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_FOR ::= For ParentAbre EXPRESION_ATRIBUCION Coma EXPRESION_BOOLEANA Coma EXPRESION_ATRIBUCION ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIA LlaveCierra While ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_WHILE ::= While ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA_IFELSE ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra Else LlaveAbre LISTA_SENTENCIA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IFELSE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA_IFELSE ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IFELSE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_IFELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_SENTENCIA ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_SENTENCIA ::= LISTA_SENTENCIA SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= ENUMDEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= CONTRACTDEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= DECLARVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= VARASIGNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= FUNCIONDEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= STRUCTDEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

