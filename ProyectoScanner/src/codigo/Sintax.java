
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 16 10:52:34 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 16 10:52:34 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\002\000\002\004\004\000\002" +
    "\055\004\000\002\055\002\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\006\011\000\002\006\015\000\002\007\011\000\002" +
    "\010\012\000\002\011\015\000\002\011\007\000\002\012" +
    "\010\000\002\013\003\000\002\013\004\000\002\013\006" +
    "\000\002\013\005\000\002\013\007\000\002\013\007\000" +
    "\002\015\003\000\002\015\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\004\000\002\014\005\000\002\014\003" +
    "\000\002\016\005\000\002\016\006\000\002\021\005\000" +
    "\002\022\006\000\002\023\006\000\002\023\010\000\002" +
    "\023\003\000\002\042\007\000\002\042\011\000\002\043" +
    "\003\000\002\043\003\000\002\043\002\000\002\050\010" +
    "\000\002\051\004\000\002\051\003\000\002\052\004\000" +
    "\002\052\003\000\002\053\004\000\002\053\003\000\002" +
    "\054\004\000\002\054\002\000\002\044\005\000\002\045" +
    "\007\000\002\046\004\000\002\046\002\000\002\047\004" +
    "\000\002\025\010\000\002\026\006\000\002\027\006\000" +
    "\002\027\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\002\000\002\031" +
    "\004\000\002\031\002\000\002\032\007\000\002\033\002" +
    "\000\002\034\005\000\002\040\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\035\005\000\002\036\007\000\002\037\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\066\002\ufff7\003\033\010\050\011\006\012" +
    "\047\014\054\015\015\016\011\017\004\021\045\022\037" +
    "\024\043\026\016\027\027\031\032\033\007\035\024\050" +
    "\046\051\051\054\010\055\041\060\022\102\052\106\013" +
    "\110\036\112\031\001\002\000\012\010\uffa9\043\uffa9\044" +
    "\uffa9\070\uffa9\001\002\000\066\002\ufff7\003\033\010\050" +
    "\011\006\012\047\014\054\015\015\016\011\017\004\021" +
    "\045\022\037\024\043\026\016\027\027\031\032\033\007" +
    "\035\024\050\046\051\051\054\010\055\041\060\022\102" +
    "\052\106\013\110\036\112\031\001\002\000\030\065\uffd5" +
    "\066\uffd5\072\uffd5\073\uffd5\101\uffd5\102\uffd5\103\uffd5\104" +
    "\uffd5\105\uffd5\107\uffd5\111\uffd5\001\002\000\004\106\330" +
    "\001\002\000\012\010\uffa5\043\uffa5\044\uffa5\070\uffa5\001" +
    "\002\000\012\010\uffaa\043\uffaa\044\uffaa\070\uffaa\001\002" +
    "\000\024\002\ufff4\003\033\015\015\021\045\024\043\027" +
    "\027\033\007\060\022\075\ufff4\001\002\000\016\010\147" +
    "\011\006\102\052\106\013\110\036\112\031\001\002\000" +
    "\066\002\ufff7\003\033\010\050\011\006\012\047\014\054" +
    "\015\015\016\011\017\004\021\045\022\037\024\043\026" +
    "\016\027\027\031\032\033\007\035\024\050\046\051\051" +
    "\054\010\055\041\060\022\102\052\106\013\110\036\112" +
    "\031\001\002\000\004\066\321\001\002\000\004\010\306" +
    "\001\002\000\024\002\ufff1\003\ufff1\015\ufff1\021\ufff1\024" +
    "\ufff1\027\ufff1\033\ufff1\060\ufff1\075\ufff1\001\002\000\004" +
    "\111\301\001\002\000\066\002\ufff7\003\033\010\050\011" +
    "\006\012\047\014\054\015\015\016\011\017\004\021\045" +
    "\022\037\024\043\026\016\027\027\031\032\033\007\035" +
    "\024\050\046\051\051\054\010\055\041\060\022\102\052" +
    "\106\013\110\036\112\031\001\002\000\004\106\272\001" +
    "\002\000\066\002\ufff7\003\033\010\050\011\006\012\047" +
    "\014\054\015\015\016\011\017\004\021\045\022\037\024" +
    "\043\026\016\027\027\031\032\033\007\035\024\050\046" +
    "\051\051\054\010\055\041\060\022\102\052\106\013\110" +
    "\036\112\031\001\002\000\012\010\uffa7\043\uffa7\044\uffa7" +
    "\070\uffa7\001\002\000\066\002\ufff7\003\033\010\050\011" +
    "\006\012\047\014\054\015\015\016\011\017\004\021\045" +
    "\022\037\024\043\026\016\027\027\031\032\033\007\035" +
    "\024\050\046\051\051\054\010\055\041\060\022\102\052" +
    "\106\013\110\036\112\031\001\002\000\004\002\uffff\001" +
    "\002\000\004\106\244\001\002\000\072\002\uffce\003\uffce" +
    "\010\uffce\011\uffce\012\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\021\uffce\022\uffce\024\uffce\026\uffce\027\uffce\031\uffce" +
    "\033\uffce\035\uffce\045\uffce\050\uffce\051\uffce\054\uffce\055" +
    "\uffce\060\uffce\075\uffce\102\uffce\106\uffce\110\uffce\112\uffce" +
    "\001\002\000\016\010\147\011\006\102\052\106\235\110" +
    "\036\112\031\001\002\000\004\010\201\001\002\000\006" +
    "\066\200\075\177\001\002\000\024\002\ufff3\003\ufff3\015" +
    "\ufff3\021\ufff3\024\ufff3\027\ufff3\033\ufff3\060\ufff3\075\ufff3" +
    "\001\002\000\024\002\ufff2\003\ufff2\015\ufff2\021\ufff2\024" +
    "\ufff2\027\ufff2\033\ufff2\060\ufff2\075\ufff2\001\002\000\010" +
    "\065\uffe4\072\uffe4\107\uffe4\001\002\000\004\010\157\001" +
    "\002\000\004\072\152\001\002\000\012\010\uffa4\043\uffa4" +
    "\044\uffa4\070\uffa4\001\002\000\066\002\ufff7\003\033\010" +
    "\050\011\006\012\047\014\054\015\015\016\011\017\004" +
    "\021\045\022\037\024\043\026\016\027\027\031\032\033" +
    "\007\035\024\050\046\051\051\054\010\055\041\060\022" +
    "\102\052\106\013\110\036\112\031\001\002\000\004\074" +
    "\141\001\002\000\024\002\ufff0\003\ufff0\015\ufff0\021\ufff0" +
    "\024\ufff0\027\ufff0\033\ufff0\060\ufff0\075\ufff0\001\002\000" +
    "\004\066\140\001\002\000\012\010\uffa6\043\uffa6\044\uffa6" +
    "\070\uffa6\001\002\000\012\010\uffa8\043\uffa8\044\uffa8\070" +
    "\uffa8\001\002\000\010\106\131\111\uffdd\113\130\001\002" +
    "\000\004\010\122\001\002\000\010\011\006\102\052\106" +
    "\073\001\002\000\012\010\uffc9\043\102\044\105\070\103" +
    "\001\002\000\012\010\uffab\043\uffab\044\uffab\070\uffab\001" +
    "\002\000\030\065\uffde\066\uffde\072\uffde\073\uffde\101\071" +
    "\102\070\103\066\104\067\105\065\107\uffde\111\uffde\001" +
    "\002\000\004\002\064\001\002\000\012\010\uffac\043\uffac" +
    "\044\uffac\070\uffac\001\002\000\066\002\ufff7\003\033\010" +
    "\050\011\006\012\047\014\054\015\015\016\011\017\004" +
    "\021\045\022\037\024\043\026\016\027\027\031\032\033" +
    "\007\035\024\050\046\051\051\054\010\055\041\060\022" +
    "\102\052\106\013\110\036\112\031\001\002\000\066\002" +
    "\ufff7\003\033\010\050\011\006\012\047\014\054\015\015" +
    "\016\011\017\004\021\045\022\037\024\043\026\016\027" +
    "\027\031\032\033\007\035\024\050\046\051\051\054\010" +
    "\055\041\060\022\102\052\106\013\110\036\112\031\001" +
    "\002\000\004\002\ufffa\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\001\001\002\000\010\011\006\102\052\106" +
    "\073\001\002\000\010\011\006\102\052\106\073\001\002" +
    "\000\010\011\006\102\052\106\073\001\002\000\010\011" +
    "\006\102\052\106\073\001\002\000\010\011\006\102\052" +
    "\106\073\001\002\000\030\065\uffdc\066\uffdc\072\uffdc\073" +
    "\uffdc\101\uffdc\102\uffdc\103\066\104\067\105\065\107\uffdc" +
    "\111\uffdc\001\002\000\010\011\006\102\052\106\073\001" +
    "\002\000\016\101\071\102\070\103\066\104\067\105\065" +
    "\107\075\001\002\000\030\065\uffd6\066\uffd6\072\uffd6\073" +
    "\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\107\uffd6" +
    "\111\uffd6\001\002\000\030\065\uffdb\066\uffdb\072\uffdb\073" +
    "\uffdb\101\uffdb\102\uffdb\103\066\104\067\105\065\107\uffdb" +
    "\111\uffdb\001\002\000\030\065\uffd9\066\uffd9\072\uffd9\073" +
    "\uffd9\101\uffd9\102\uffd9\103\uffd9\104\uffd9\105\uffd9\107\uffd9" +
    "\111\uffd9\001\002\000\030\065\uffda\066\uffda\072\uffda\073" +
    "\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda\107\uffda" +
    "\111\uffda\001\002\000\030\065\uffd8\066\uffd8\072\uffd8\073" +
    "\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8\107\uffd8" +
    "\111\uffd8\001\002\000\004\010\uffcb\001\002\000\004\071" +
    "\113\001\002\000\004\010\106\001\002\000\004\010\uffca" +
    "\001\002\000\006\066\110\113\107\001\002\000\004\011" +
    "\111\001\002\000\072\002\uffd0\003\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\021\uffd0\022" +
    "\uffd0\024\uffd0\026\uffd0\027\uffd0\031\uffd0\033\uffd0\035\uffd0" +
    "\045\uffd0\050\uffd0\051\uffd0\054\uffd0\055\uffd0\060\uffd0\075" +
    "\uffd0\102\uffd0\106\uffd0\110\uffd0\112\uffd0\001\002\000\004" +
    "\066\112\001\002\000\072\002\uffcf\003\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021\uffcf" +
    "\022\uffcf\024\uffcf\026\uffcf\027\uffcf\031\uffcf\033\uffcf\035" +
    "\uffcf\045\uffcf\050\uffcf\051\uffcf\054\uffcf\055\uffcf\060\uffcf" +
    "\075\uffcf\102\uffcf\106\uffcf\110\uffcf\112\uffcf\001\002\000" +
    "\004\010\114\001\002\000\006\066\116\113\115\001\002" +
    "\000\004\011\117\001\002\000\072\002\uffcd\003\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\021\uffcd\022\uffcd\024\uffcd\026\uffcd\027\uffcd\031\uffcd\033" +
    "\uffcd\035\uffcd\045\uffcd\050\uffcd\051\uffcd\054\uffcd\055\uffcd" +
    "\060\uffcd\075\uffcd\102\uffcd\106\uffcd\110\uffcd\112\uffcd\001" +
    "\002\000\004\066\120\001\002\000\072\002\uffcc\003\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\021\uffcc\022\uffcc\024\uffcc\026\uffcc\027\uffcc\031\uffcc" +
    "\033\uffcc\035\uffcc\045\uffcc\050\uffcc\051\uffcc\054\uffcc\055" +
    "\uffcc\060\uffcc\075\uffcc\102\uffcc\106\uffcc\110\uffcc\112\uffcc" +
    "\001\002\000\030\065\uffd7\066\uffd7\072\uffd7\073\uffd7\101" +
    "\uffd7\102\uffd7\103\066\104\067\105\065\107\uffd7\111\uffd7" +
    "\001\002\000\004\074\124\001\002\000\070\002\uffd2\003" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\021\uffd2\022\uffd2\024\uffd2\026\uffd2\027\uffd2\031" +
    "\uffd2\033\uffd2\035\uffd2\050\uffd2\051\uffd2\054\uffd2\055\uffd2" +
    "\060\uffd2\075\uffd2\102\uffd2\106\uffd2\110\uffd2\112\uffd2\001" +
    "\002\000\022\012\047\014\054\016\011\017\004\035\024" +
    "\050\046\054\010\055\041\001\002\000\004\075\126\001" +
    "\002\000\004\066\127\001\002\000\070\002\uffd1\003\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\021\uffd1\022\uffd1\024\uffd1\026\uffd1\027\uffd1\031\uffd1" +
    "\033\uffd1\035\uffd1\050\uffd1\051\uffd1\054\uffd1\055\uffd1\060" +
    "\uffd1\075\uffd1\102\uffd1\106\uffd1\110\uffd1\112\uffd1\001\002" +
    "\000\004\011\137\001\002\000\022\012\047\014\054\016" +
    "\011\017\004\035\024\050\046\054\010\055\041\001\002" +
    "\000\004\010\136\001\002\000\004\107\134\001\002\000" +
    "\004\066\135\001\002\000\066\002\uffa2\003\uffa2\010\uffa2" +
    "\011\uffa2\012\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\021" +
    "\uffa2\022\uffa2\024\uffa2\026\uffa2\027\uffa2\031\uffa2\033\uffa2" +
    "\035\uffa2\050\uffa2\051\uffa2\054\uffa2\055\uffa2\060\uffa2\102" +
    "\uffa2\106\uffa2\110\uffa2\112\uffa2\001\002\000\004\107\uffa1" +
    "\001\002\000\066\002\uffa3\003\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\021\uffa3\022\uffa3" +
    "\024\uffa3\026\uffa3\027\uffa3\031\uffa3\033\uffa3\035\uffa3\050" +
    "\uffa3\051\uffa3\054\uffa3\055\uffa3\060\uffa3\102\uffa3\106\uffa3" +
    "\110\uffa3\112\uffa3\001\002\000\024\002\uffee\003\uffee\015" +
    "\uffee\021\uffee\024\uffee\027\uffee\033\uffee\060\uffee\075\uffee" +
    "\001\002\000\020\003\033\015\015\021\045\024\043\027" +
    "\027\033\007\060\022\001\002\000\004\075\143\001\002" +
    "\000\004\060\144\001\002\000\004\106\145\001\002\000" +
    "\016\010\147\011\006\102\052\106\013\110\036\112\031" +
    "\001\002\000\004\107\150\001\002\000\016\065\uffdd\066" +
    "\uffdd\072\uffdd\073\uffdd\107\uffdd\111\uffdd\001\002\000\024" +
    "\002\uffe8\003\uffe8\015\uffe8\021\uffe8\024\uffe8\027\uffe8\033" +
    "\uffe8\060\uffe8\075\uffe8\001\002\000\004\002\ufff8\001\002" +
    "\000\012\010\147\011\006\102\052\106\073\001\002\000" +
    "\004\073\154\001\002\000\012\010\147\011\006\102\052" +
    "\106\073\001\002\000\004\066\156\001\002\000\066\002" +
    "\uffe5\003\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5\027" +
    "\uffe5\031\uffe5\033\uffe5\035\uffe5\050\uffe5\051\uffe5\054\uffe5" +
    "\055\uffe5\060\uffe5\102\uffe5\106\uffe5\110\uffe5\112\uffe5\001" +
    "\002\000\004\074\160\001\002\000\032\012\047\014\054" +
    "\016\011\017\004\026\016\031\032\035\024\050\046\051" +
    "\051\054\010\055\041\075\uffc0\001\002\000\032\012\047" +
    "\014\054\016\011\017\004\026\016\031\032\035\024\050" +
    "\046\051\051\054\010\055\041\075\uffc0\001\002\000\004" +
    "\075\174\001\002\000\030\012\047\014\054\016\011\017" +
    "\004\031\032\035\024\050\046\051\051\054\010\055\041" +
    "\075\uffc0\001\002\000\010\031\032\051\051\075\uffc0\001" +
    "\002\000\004\075\uffc2\001\002\000\006\031\032\075\uffc0" +
    "\001\002\000\004\075\uffc4\001\002\000\004\075\uffc6\001" +
    "\002\000\004\075\uffc1\001\002\000\004\075\uffc3\001\002" +
    "\000\004\075\uffc5\001\002\000\004\066\175\001\002\000" +
    "\066\002\uffc8\003\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8\024\uffc8\026" +
    "\uffc8\027\uffc8\031\uffc8\033\uffc8\035\uffc8\050\uffc8\051\uffc8" +
    "\054\uffc8\055\uffc8\060\uffc8\102\uffc8\106\uffc8\110\uffc8\112" +
    "\uffc8\001\002\000\004\075\uffc7\001\002\000\024\002\uffec" +
    "\003\uffec\015\uffec\021\uffec\024\uffec\027\uffec\033\uffec\060" +
    "\uffec\075\uffec\001\002\000\024\002\uffed\003\uffed\015\uffed" +
    "\021\uffed\024\uffed\027\uffed\033\uffed\060\uffed\075\uffed\001" +
    "\002\000\004\106\203\001\002\000\016\036\216\041\215" +
    "\043\214\044\217\046\uffb2\074\uffb2\001\002\000\022\012" +
    "\047\014\054\016\011\017\004\035\024\050\046\054\010" +
    "\055\041\001\002\000\004\010\205\001\002\000\006\065" +
    "\206\107\207\001\002\000\022\012\047\014\054\016\011" +
    "\017\004\035\024\050\046\054\010\055\041\001\002\000" +
    "\016\036\uffb7\041\uffb7\043\uffb7\044\uffb7\046\uffb7\074\uffb7" +
    "\001\002\000\016\036\uffb9\041\uffb9\043\uffb9\044\uffb9\046" +
    "\uffb9\074\uffb9\001\002\000\004\010\212\001\002\000\006" +
    "\065\206\107\207\001\002\000\016\036\uffb8\041\uffb8\043" +
    "\uffb8\044\uffb8\046\uffb8\074\uffb8\001\002\000\006\046\uffb5" +
    "\074\uffb5\001\002\000\006\046\uffb6\074\uffb6\001\002\000" +
    "\006\046\uffb3\074\uffb3\001\002\000\006\046\uffb4\074\uffb4" +
    "\001\002\000\006\046\221\074\uffb0\001\002\000\004\106" +
    "\203\001\002\000\004\074\223\001\002\000\022\012\047" +
    "\014\054\016\011\017\004\035\024\050\046\054\010\055" +
    "\041\001\002\000\070\002\uffba\003\uffba\010\uffba\011\uffba" +
    "\012\uffba\014\uffba\015\uffba\016\uffba\017\uffba\021\uffba\022" +
    "\uffba\024\uffba\026\uffba\027\uffba\031\uffba\033\uffba\035\uffba" +
    "\050\uffba\051\uffba\054\uffba\055\uffba\060\uffba\075\uffba\102" +
    "\uffba\106\uffba\110\uffba\112\uffba\001\002\000\004\045\uffae" +
    "\001\002\000\004\045\230\001\002\000\004\075\233\001" +
    "\002\000\004\010\231\001\002\000\004\066\232\001\002" +
    "\000\004\075\uffad\001\002\000\070\002\uffaf\003\uffaf\010" +
    "\uffaf\011\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\021\uffaf\022\uffaf\024\uffaf\026\uffaf\027\uffaf\031\uffaf\033" +
    "\uffaf\035\uffaf\050\uffaf\051\uffaf\054\uffaf\055\uffaf\060\uffaf" +
    "\075\uffaf\102\uffaf\106\uffaf\110\uffaf\112\uffaf\001\002\000" +
    "\004\074\uffb1\001\002\000\016\010\147\011\006\102\052" +
    "\106\013\110\036\112\031\001\002\000\010\065\uffe3\072" +
    "\uffe3\107\uffe3\001\002\000\004\107\241\001\002\000\020" +
    "\101\071\102\070\103\066\104\067\105\065\107\075\111" +
    "\uffde\001\002\000\012\065\uffe2\072\uffe2\107\uffe2\111\242" +
    "\001\002\000\012\010\147\011\006\102\052\106\073\001" +
    "\002\000\010\065\uffdf\072\uffdf\107\uffdf\001\002\000\026" +
    "\010\246\012\047\014\054\016\011\017\004\035\024\050" +
    "\046\054\010\055\041\107\250\001\002\000\004\065\260" +
    "\001\002\000\004\113\256\001\002\000\004\010\253\001" +
    "\002\000\004\074\251\001\002\000\004\075\252\001\002" +
    "\000\024\002\uffe6\003\uffe6\015\uffe6\021\uffe6\024\uffe6\027" +
    "\uffe6\033\uffe6\060\uffe6\075\uffe6\001\002\000\004\113\254" +
    "\001\002\000\004\011\255\001\002\000\006\065\uffd3\107" +
    "\uffd3\001\002\000\004\011\257\001\002\000\006\065\uffd4" +
    "\107\uffd4\001\002\000\016\010\147\011\006\102\052\106" +
    "\013\110\036\112\031\001\002\000\004\065\262\001\002" +
    "\000\024\010\246\012\047\014\054\016\011\017\004\035" +
    "\024\050\046\054\010\055\041\001\002\000\004\107\264" +
    "\001\002\000\004\074\265\001\002\000\020\003\033\015" +
    "\015\021\045\024\043\027\027\033\007\060\022\001\002" +
    "\000\004\075\267\001\002\000\024\002\uffe7\003\uffe7\015" +
    "\uffe7\021\uffe7\024\uffe7\027\uffe7\033\uffe7\060\uffe7\075\uffe7" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufffb\001" +
    "\002\000\016\010\147\011\006\102\052\106\013\110\036" +
    "\112\031\001\002\000\004\107\274\001\002\000\004\074" +
    "\275\001\002\000\020\003\033\015\015\021\045\024\043" +
    "\027\027\033\007\060\022\001\002\000\004\075\277\001" +
    "\002\000\024\002\uffe9\003\uffe9\015\uffe9\021\uffe9\024\uffe9" +
    "\027\uffe9\033\uffe9\060\uffe9\075\uffe9\001\002\000\004\002" +
    "\ufffc\001\002\000\012\010\147\011\006\102\052\106\302" +
    "\001\002\000\016\010\147\011\006\102\052\106\013\110" +
    "\036\112\031\001\002\000\010\065\uffe1\072\uffe1\107\uffe1" +
    "\001\002\000\004\107\305\001\002\000\010\065\uffe0\072" +
    "\uffe0\107\uffe0\001\002\000\004\074\307\001\002\000\004" +
    "\010\311\001\002\000\070\002\uffbf\003\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\021\uffbf" +
    "\022\uffbf\024\uffbf\026\uffbf\027\uffbf\031\uffbf\033\uffbf\035" +
    "\uffbf\050\uffbf\051\uffbf\054\uffbf\055\uffbf\060\uffbf\075\uffbf" +
    "\102\uffbf\106\uffbf\110\uffbf\112\uffbf\001\002\000\006\065" +
    "\313\075\uffbc\001\002\000\004\075\317\001\002\000\004" +
    "\010\315\001\002\000\004\075\uffbd\001\002\000\006\065" +
    "\313\075\uffbc\001\002\000\004\075\uffbb\001\002\000\004" +
    "\066\320\001\002\000\070\002\uffbe\003\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\021\uffbe" +
    "\022\uffbe\024\uffbe\026\uffbe\027\uffbe\031\uffbe\033\uffbe\035" +
    "\uffbe\050\uffbe\051\uffbe\054\uffbe\055\uffbe\060\uffbe\075\uffbe" +
    "\102\uffbe\106\uffbe\110\uffbe\112\uffbe\001\002\000\024\002" +
    "\uffef\003\uffef\015\uffef\021\uffef\024\uffef\027\uffef\033\uffef" +
    "\060\uffef\075\uffef\001\002\000\004\002\ufff9\001\002\000" +
    "\004\107\324\001\002\000\004\111\242\001\002\000\024" +
    "\002\ufff4\003\033\015\015\021\045\024\043\027\027\033" +
    "\007\060\022\075\ufff4\001\002\000\006\002\ufff6\075\ufff6" +
    "\001\002\000\006\002\ufff5\075\ufff5\001\002\000\016\010" +
    "\147\011\006\102\052\106\013\110\036\112\031\001\002" +
    "\000\004\107\332\001\002\000\004\074\333\001\002\000" +
    "\020\003\033\015\015\021\045\024\043\027\027\033\007" +
    "\060\022\001\002\000\004\075\335\001\002\000\026\002" +
    "\uffeb\003\uffeb\015\uffeb\021\uffeb\024\uffeb\025\336\027\uffeb" +
    "\033\uffeb\060\uffeb\075\uffeb\001\002\000\004\074\337\001" +
    "\002\000\020\003\033\015\015\021\045\024\043\027\027" +
    "\033\007\060\022\001\002\000\004\075\341\001\002\000" +
    "\024\002\uffea\003\uffea\015\uffea\021\uffea\024\uffea\027\uffea" +
    "\033\uffea\060\uffea\075\uffea\001\002\000\004\002\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\054\002\055\003\011\004\025\006\033\007" +
    "\034\010\016\011\043\012\024\013\037\014\054\015\017" +
    "\021\004\023\022\025\057\035\020\036\060\040\052\041" +
    "\056\042\027\044\041\050\013\001\001\000\002\001\001" +
    "\000\054\002\341\003\011\004\025\006\033\007\034\010" +
    "\016\011\043\012\024\013\037\014\054\015\017\021\004" +
    "\023\022\025\057\035\020\036\060\040\052\041\056\042" +
    "\027\044\041\050\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\324\006\033\007\034\010\016\011\043\055\325\001\001" +
    "\000\010\013\322\014\237\015\017\001\001\000\054\002" +
    "\321\003\011\004\025\006\033\007\034\010\016\011\043" +
    "\012\024\013\037\014\054\015\017\021\004\023\022\025" +
    "\057\035\020\036\060\040\052\041\056\042\027\044\041" +
    "\050\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\002\277\003\011" +
    "\004\025\006\033\007\034\010\016\011\043\012\024\013" +
    "\037\014\054\015\017\021\004\023\022\025\057\035\020" +
    "\036\060\040\052\041\056\042\027\044\041\050\013\001" +
    "\001\000\002\001\001\000\054\002\270\003\011\004\025" +
    "\006\033\007\034\010\016\011\043\012\024\013\037\014" +
    "\054\015\017\021\004\023\022\025\057\035\020\036\060" +
    "\040\052\041\056\042\027\044\041\050\013\001\001\000" +
    "\002\001\001\000\054\002\267\003\011\004\025\006\033" +
    "\007\034\010\016\011\043\012\024\013\037\014\054\015" +
    "\017\021\004\023\022\025\057\035\020\036\060\040\052" +
    "\041\056\042\027\044\041\050\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\235" +
    "\014\054\015\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\002\150\003\011\004\025\006\033\007\034\010\016" +
    "\011\043\012\024\013\037\014\054\015\017\021\004\023" +
    "\022\025\057\035\020\036\060\040\052\041\056\042\027" +
    "\044\041\050\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\120\001" +
    "\001\000\004\043\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\002" +
    "\062\003\011\004\025\006\033\007\034\010\016\011\043" +
    "\012\024\013\037\014\054\015\017\021\004\023\022\025" +
    "\057\035\020\036\060\040\052\041\056\042\027\044\041" +
    "\050\013\001\001\000\054\002\061\003\011\004\025\006" +
    "\033\007\034\010\016\011\043\012\024\013\037\014\054" +
    "\015\017\021\004\023\022\025\057\035\020\036\060\040" +
    "\052\041\056\042\027\044\041\050\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\100\001\001\000\004\014\077\001\001\000\004\014\076" +
    "\001\001\000\004\014\075\001\001\000\004\014\071\001" +
    "\001\000\002\001\001\000\004\014\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\122\001" +
    "\001\000\002\001\001\000\012\023\124\040\052\041\056" +
    "\042\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\037\132\040\131" +
    "\041\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\011\004\141\006" +
    "\033\007\034\010\016\011\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\145\014" +
    "\054\015\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\054\015" +
    "\152\001\001\000\002\001\001\000\006\014\054\015\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\021\163\023\162\025\165\040\052\041\056" +
    "\042\027\044\160\051\161\052\167\053\166\054\164\001" +
    "\001\000\030\021\163\023\162\025\165\040\052\041\056" +
    "\042\027\044\160\051\175\052\167\053\166\054\164\001" +
    "\001\000\002\001\001\000\024\021\163\023\162\025\165" +
    "\040\052\041\056\042\027\052\172\053\166\054\164\001" +
    "\001\000\012\021\163\025\165\053\171\054\164\001\001" +
    "\000\002\001\001\000\006\025\165\054\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\201\001\001\000\004\030\217\001\001\000" +
    "\006\040\203\041\056\001\001\000\002\001\001\000\004" +
    "\027\207\001\001\000\006\040\210\041\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\221\001\001\000\004\026\233\001\001\000\004\032" +
    "\223\001\001\000\012\023\224\040\052\041\056\042\027" +
    "\001\001\000\002\001\001\000\004\033\225\001\001\000" +
    "\004\034\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\236\014\237\015\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\054\015\242\001\001\000\002" +
    "\001\001\000\010\016\244\040\246\041\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\260\014\054\015\017\001" +
    "\001\000\002\001\001\000\010\016\262\040\246\041\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\011\004\265\006\033\007\034\010\016\011\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\272\014\054\015\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\011\004" +
    "\275\006\033\007\034\010\016\011\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\054\015\302\001\001\000\010\013\303\014\237\015\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\311\001\001\000\002\001\001\000" +
    "\004\047\313\001\001\000\002\001\001\000\004\046\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\324\006\033\007\034\010" +
    "\016\011\043\055\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\330\014\054\015\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\011\004\333" +
    "\006\033\007\034\010\016\011\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\011" +
    "\004\337\006\033\007\034\010\016\011\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static boolean fatalError = false;
    public static Symbol fatalErrorSym;

    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public void informar_Error_Especifico(String tipoError, Symbol s){
        System.err.println("Error: "+tipoError+". Línea: "+s.right+". Columna: "+s.left);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMFUNC ::= TYPENAME Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VARASIGNA ::= Identificador Op_atribucion Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARASIGNA",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNCIONRETURN ::= Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNCIONCUERPO ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCUERPO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCIONCONTEN ::= LlaveAbre DECLARVARIABLE FUNCIONCUERPO FUNCIONRETURN LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCIONRETURNS ::= Returns FUNCIONATRIB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNATRIBDOS ::= ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTRACTPART3 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONTRACTPART2 ::= CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTRACTPART1 ::= CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTRACTPART1 ::= DECLARVARIABLE CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTRACTPART ::= CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRUCTCONTEN ::= LlaveAbre DECLARVARIABLE LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRUCTDEF ::= Struct Identificador STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_ATRIBUCION ::= TYPENAME Identificador Op_atribucion Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ATRIBUCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_ATRIBUCION ::= Identificador Op_atribucion Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ATRIBUCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRECION_ARITMETICA ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRECION_ARITMETICA ::= ParentAbre EXPRECION_ARITMETICA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRECION_ARITMETICA ::= Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mod EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Div EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mult EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Suma EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION_PRIMARIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION_PRIMARIA ::= EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION_BOOLEANA ::= ParentAbre EXPRESION_BOOLEANA ParentCierre Op_relacional EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION_BOOLEANA ::= EXPRESION_PRIMARIA Op_relacional ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION_BOOLEANA ::= EXPRESION_PRIMARIA Op_relacional EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION_BOOLEANA ::= Not ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_BOOLEANA ::= Not EXPRESION_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_TERNARIA ::= EXPRESION_BOOLEANA SignoPregunta EXPRESION_PRIMARIA DosPuntos EXPRESION_PRIMARIA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_TERNARIA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_FOR ::= For ParentAbre ParentCierre LlaveAbre LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_FOR ::= For ParentAbre EXPRESION_ATRIBUCION Coma EXPRESION_BOOLEANA Coma EXPRESION_ATRIBUCION ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIA LlaveCierra While ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_WHILE ::= While ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_IFELSE ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra Else LlaveAbre LISTA_SENTENCIA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IFELSE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_IFELSE ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IFELSE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA_DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_IFELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_SENTENCIAPRIMA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_SENTENCIA ::= SENTENCIA LISTA_SENTENCIAPRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= ENUMDEF INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= CONTRACTDEF INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= FUNCCALL INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= DECLARVARIABLE INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= VARASIGNA INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= FUNCIONDEF INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= STRUCTDEF INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LISTA_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA_TERNARIA INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

