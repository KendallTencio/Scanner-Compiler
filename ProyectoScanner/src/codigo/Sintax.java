
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 22 22:48:59 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 22 22:48:59 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\060\004\000\002\060\002\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\010\011\000" +
    "\002\010\012\000\002\010\011\000\002\011\006\000\002" +
    "\012\011\000\002\013\012\000\002\014\014\000\002\015" +
    "\010\000\002\016\003\000\002\016\004\000\002\016\006" +
    "\000\002\016\005\000\002\016\007\000\002\016\007\000" +
    "\002\016\003\000\002\020\003\000\002\020\003\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\004\000\002\017\005" +
    "\000\002\017\003\000\002\021\004\000\002\021\004\000" +
    "\002\024\005\000\002\025\006\000\002\026\006\000\002" +
    "\026\010\000\002\026\010\000\002\026\003\000\002\045" +
    "\007\000\002\045\011\000\002\045\011\000\002\042\006" +
    "\000\002\042\006\000\002\046\003\000\002\046\003\000" +
    "\002\046\004\000\002\046\002\000\002\053\010\000\002" +
    "\054\004\000\002\054\003\000\002\054\004\000\002\054" +
    "\004\000\002\055\004\000\002\055\003\000\002\056\004" +
    "\000\002\056\003\000\002\057\004\000\002\057\002\000" +
    "\002\047\005\000\002\050\006\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\002\000\002\052" +
    "\004\000\002\030\010\000\002\031\006\000\002\032\006" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\002\000\002" +
    "\034\004\000\002\034\002\000\002\035\005\000\002\035" +
    "\004\000\002\037\005\000\002\037\004\000\002\041\004" +
    "\000\002\043\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\040" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\004\043\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\004\067\011\001\002\000" +
    "\012\002\ufffc\023\016\027\014\052\015\001\002\000\012" +
    "\002\ufffc\023\016\027\014\052\015\001\002\000\012\002" +
    "\ufffc\023\016\027\014\052\015\001\002\000\004\011\341" +
    "\001\002\000\004\011\333\001\002\000\004\011\022\001" +
    "\002\000\012\002\ufffc\023\016\027\014\052\015\001\002" +
    "\000\004\002\000\001\002\000\004\002\ufffe\001\002\000" +
    "\004\075\023\001\002\000\034\003\034\013\040\015\035" +
    "\017\024\020\042\027\014\032\027\036\030\051\050\052" +
    "\015\055\032\056\037\076\uffb8\001\002\000\014\003\uff9e" +
    "\011\uff9e\044\uff9e\045\uff9e\071\uff9e\001\002\000\014\003" +
    "\uffa0\011\uffa0\044\uffa0\045\uffa0\071\uffa0\001\002\000\014" +
    "\003\310\011\uffc3\044\306\045\312\071\307\001\002\000" +
    "\004\011\061\001\002\000\014\003\uff9b\011\uff9b\044\uff9b" +
    "\045\uff9b\071\uff9b\001\002\000\034\003\034\013\040\015" +
    "\035\017\024\020\042\027\014\032\027\036\030\051\050" +
    "\052\015\055\032\056\037\076\uffb8\001\002\000\014\003" +
    "\uff99\011\uff99\044\uff99\045\uff99\071\uff99\001\002\000\004" +
    "\076\056\001\002\000\006\067\055\076\054\001\002\000" +
    "\014\003\uff9f\011\uff9f\044\uff9f\045\uff9f\071\uff9f\001\002" +
    "\000\064\003\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\022\uffcc\025\uffcc\030\uffcc\032\uffcc" +
    "\034\uffcc\036\uffcc\046\uffcc\051\uffcc\052\uffcc\055\uffcc\056" +
    "\uffcc\061\uffcc\076\uffcc\103\uffcc\107\uffcc\111\uffcc\113\uffcc" +
    "\001\002\000\014\003\uff98\011\uff98\044\uff98\045\uff98\071" +
    "\uff98\001\002\000\014\003\uff9c\011\uff9c\044\uff9c\045\uff9c" +
    "\071\uff9c\001\002\000\030\013\040\015\035\017\024\020" +
    "\042\032\027\036\030\051\050\052\015\055\032\056\037" +
    "\076\uffb8\001\002\000\014\003\uff9d\011\uff9d\044\uff9d\045" +
    "\uff9d\071\uff9d\001\002\000\010\032\027\052\015\076\uffb8" +
    "\001\002\000\004\076\uffba\001\002\000\004\076\uffbc\001" +
    "\002\000\006\032\027\076\uffb8\001\002\000\004\076\uffc0" +
    "\001\002\000\014\003\uff9a\011\uff9a\044\uff9a\045\uff9a\071" +
    "\uff9a\001\002\000\004\076\uffb9\001\002\000\004\076\uffbb" +
    "\001\002\000\004\076\uffbd\001\002\000\004\076\uffbe\001" +
    "\002\000\004\076\uffbf\001\002\000\004\067\057\001\002" +
    "\000\012\002\uffc2\023\uffc2\027\uffc2\052\uffc2\001\002\000" +
    "\004\076\uffc1\001\002\000\004\107\063\001\002\000\020" +
    "\003\uffa8\037\075\042\076\044\074\045\077\047\uffa8\075" +
    "\uffa8\001\002\000\022\013\040\015\035\017\024\020\042" +
    "\036\030\051\050\055\032\056\037\001\002\000\004\011" +
    "\065\001\002\000\006\066\066\110\067\001\002\000\022" +
    "\013\040\015\035\017\024\020\042\036\030\051\050\055" +
    "\032\056\037\001\002\000\020\003\uffad\037\uffad\042\uffad" +
    "\044\uffad\045\uffad\047\uffad\075\uffad\001\002\000\020\003" +
    "\uffaf\037\uffaf\042\uffaf\044\uffaf\045\uffaf\047\uffaf\075\uffaf" +
    "\001\002\000\004\011\072\001\002\000\006\066\066\110" +
    "\067\001\002\000\020\003\uffae\037\uffae\042\uffae\044\uffae" +
    "\045\uffae\047\uffae\075\uffae\001\002\000\010\003\uffab\047" +
    "\uffab\075\uffab\001\002\000\010\003\uffa9\047\uffa9\075\uffa9" +
    "\001\002\000\010\003\uffac\047\uffac\075\uffac\001\002\000" +
    "\010\003\uffaa\047\uffaa\075\uffaa\001\002\000\010\003\uffa6" +
    "\047\101\075\uffa6\001\002\000\004\107\063\001\002\000" +
    "\006\003\104\075\103\001\002\000\060\003\127\011\136" +
    "\012\107\013\040\015\035\016\114\017\024\020\042\022" +
    "\135\025\133\030\125\034\110\036\030\046\117\051\050" +
    "\055\032\056\037\061\121\076\ufffa\103\140\107\113\111" +
    "\131\113\126\001\002\000\004\076\106\001\002\000\006" +
    "\032\uffb0\076\uffb0\001\002\000\006\032\uffa4\076\uffa4\001" +
    "\002\000\030\067\uffd4\073\uffd4\074\uffd4\076\uffd4\102\uffd4" +
    "\103\uffd4\104\uffd4\105\uffd4\106\uffd4\110\uffd4\112\uffd4\001" +
    "\002\000\006\075\264\107\265\001\002\000\060\003\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\022\ufff9\025\ufff9\030\ufff9\034\ufff9\036\ufff9\046\ufff9" +
    "\051\ufff9\055\ufff9\056\ufff9\061\ufff9\076\ufff9\103\ufff9\107" +
    "\ufff9\111\ufff9\113\ufff9\001\002\000\060\003\127\011\136" +
    "\012\107\013\040\015\035\016\114\017\024\020\042\022" +
    "\135\025\133\030\125\034\110\036\030\046\117\051\050" +
    "\055\032\056\037\061\121\076\ufffa\103\140\107\113\111" +
    "\131\113\126\001\002\000\016\011\203\012\107\103\140" +
    "\107\113\111\131\113\126\001\002\000\004\067\260\001" +
    "\002\000\004\067\257\001\002\000\004\112\252\001\002" +
    "\000\004\011\250\001\002\000\060\003\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2" +
    "\025\ufff2\030\ufff2\034\ufff2\036\ufff2\046\ufff2\051\ufff2\055" +
    "\ufff2\056\ufff2\061\ufff2\076\ufff2\103\ufff2\107\ufff2\111\ufff2" +
    "\113\ufff2\001\002\000\004\107\242\001\002\000\060\003" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\022\ufff3\025\ufff3\030\ufff3\034\ufff3\036\ufff3\046" +
    "\ufff3\051\ufff3\055\ufff3\056\ufff3\061\ufff3\076\ufff3\103\ufff3" +
    "\107\ufff3\111\ufff3\113\ufff3\001\002\000\060\003\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\022\ufff4\025\ufff4\030\ufff4\034\ufff4\036\ufff4\046\ufff4\051" +
    "\ufff4\055\ufff4\056\ufff4\061\ufff4\076\ufff4\103\ufff4\107\ufff4" +
    "\111\ufff4\113\ufff4\001\002\000\004\076\241\001\002\000" +
    "\004\107\224\001\002\000\016\011\203\012\107\103\140" +
    "\107\215\111\131\113\126\001\002\000\006\067\214\076" +
    "\213\001\002\000\060\003\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\022\ufff8\025\ufff8\030" +
    "\ufff8\034\ufff8\036\ufff8\046\ufff8\051\ufff8\055\ufff8\056\ufff8" +
    "\061\ufff8\076\ufff8\103\ufff8\107\ufff8\111\ufff8\113\ufff8\001" +
    "\002\000\012\067\uffe4\073\uffe4\076\uffe4\110\uffe4\001\002" +
    "\000\004\073\205\001\002\000\004\075\175\001\002\000" +
    "\060\003\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\022\ufff6\025\ufff6\030\ufff6\034\ufff6\036" +
    "\ufff6\046\ufff6\051\ufff6\055\ufff6\056\ufff6\061\ufff6\076\ufff6" +
    "\103\ufff6\107\ufff6\111\ufff6\113\ufff6\001\002\000\004\067" +
    "\174\001\002\000\012\073\uffde\107\162\112\uffdc\114\161" +
    "\001\002\000\060\003\ufff5\011\ufff5\012\ufff5\013\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\025\ufff5\030\ufff5" +
    "\034\ufff5\036\ufff5\046\ufff5\051\ufff5\055\ufff5\056\ufff5\061" +
    "\ufff5\076\ufff5\103\ufff5\107\ufff5\111\ufff5\113\ufff5\001\002" +
    "\000\010\012\107\103\140\107\151\001\002\000\030\067" +
    "\uffdd\073\uffdd\074\uffdd\076\uffdd\102\147\103\146\104\144" +
    "\105\145\106\143\110\uffdd\112\uffdd\001\002\000\060\003" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\022\ufff1\025\ufff1\030\ufff1\034\ufff1\036\ufff1\046" +
    "\ufff1\051\ufff1\055\ufff1\056\ufff1\061\ufff1\076\ufff1\103\ufff1" +
    "\107\ufff1\111\ufff1\113\ufff1\001\002\000\010\012\107\103" +
    "\140\107\151\001\002\000\010\012\107\103\140\107\151" +
    "\001\002\000\010\012\107\103\140\107\151\001\002\000" +
    "\010\012\107\103\140\107\151\001\002\000\010\012\107" +
    "\103\140\107\151\001\002\000\030\067\uffdb\073\uffdb\074" +
    "\uffdb\076\uffdb\102\uffdb\103\uffdb\104\144\105\145\106\143" +
    "\110\uffdb\112\uffdb\001\002\000\010\012\107\103\140\107" +
    "\151\001\002\000\016\102\147\103\146\104\144\105\145" +
    "\106\143\110\153\001\002\000\030\067\uffd5\073\uffd5\074" +
    "\uffd5\076\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5" +
    "\110\uffd5\112\uffd5\001\002\000\030\067\uffda\073\uffda\074" +
    "\uffda\076\uffda\102\uffda\103\uffda\104\144\105\145\106\143" +
    "\110\uffda\112\uffda\001\002\000\030\067\uffd8\073\uffd8\074" +
    "\uffd8\076\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8" +
    "\110\uffd8\112\uffd8\001\002\000\030\067\uffd9\073\uffd9\074" +
    "\uffd9\076\uffd9\102\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9" +
    "\110\uffd9\112\uffd9\001\002\000\030\067\uffd7\073\uffd7\074" +
    "\uffd7\076\uffd7\102\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7" +
    "\110\uffd7\112\uffd7\001\002\000\030\067\uffd6\073\uffd6\074" +
    "\uffd6\076\uffd6\102\uffd6\103\uffd6\104\144\105\145\106\143" +
    "\110\uffd6\112\uffd6\001\002\000\006\011\171\012\170\001" +
    "\002\000\022\013\040\015\035\017\024\020\042\036\030" +
    "\051\050\055\032\056\037\001\002\000\004\011\167\001" +
    "\002\000\004\110\165\001\002\000\004\067\166\001\002" +
    "\000\060\003\uff97\011\uff97\012\uff97\013\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\022\uff97\025\uff97\030\uff97\034\uff97" +
    "\036\uff97\046\uff97\051\uff97\055\uff97\056\uff97\061\uff97\076" +
    "\uff97\103\uff97\107\uff97\111\uff97\113\uff97\001\002\000\004" +
    "\110\uffa1\001\002\000\004\067\173\001\002\000\004\067" +
    "\172\001\002\000\060\003\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\022\uffc7\025\uffc7\030" +
    "\uffc7\034\uffc7\036\uffc7\046\uffc7\051\uffc7\055\uffc7\056\uffc7" +
    "\061\uffc7\076\uffc7\103\uffc7\107\uffc7\111\uffc7\113\uffc7\001" +
    "\002\000\060\003\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\022\uffc8\025\uffc8\030\uffc8\034" +
    "\uffc8\036\uffc8\046\uffc8\051\uffc8\055\uffc8\056\uffc8\061\uffc8" +
    "\076\uffc8\103\uffc8\107\uffc8\111\uffc8\113\uffc8\001\002\000" +
    "\060\003\uffef\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\022\uffef\025\uffef\030\uffef\034\uffef\036" +
    "\uffef\046\uffef\051\uffef\055\uffef\056\uffef\061\uffef\076\uffef" +
    "\103\uffef\107\uffef\111\uffef\113\uffef\001\002\000\060\003" +
    "\127\011\136\012\107\013\040\015\035\016\114\017\024" +
    "\020\042\022\135\025\133\030\125\034\110\036\030\046" +
    "\117\051\050\055\032\056\037\061\121\076\ufffa\103\140" +
    "\107\113\111\131\113\126\001\002\000\004\076\177\001" +
    "\002\000\004\061\200\001\002\000\004\107\201\001\002" +
    "\000\016\011\203\012\107\103\140\107\113\111\131\113" +
    "\126\001\002\000\004\110\204\001\002\000\014\067\uffde" +
    "\073\uffde\076\uffde\110\uffde\112\uffdc\001\002\000\004\067" +
    "\uffe7\001\002\000\012\011\207\012\107\103\140\107\151" +
    "\001\002\000\004\074\210\001\002\000\014\067\uffdc\073" +
    "\uffdc\074\uffdc\076\uffdc\110\uffdc\001\002\000\012\011\207" +
    "\012\107\103\140\107\151\001\002\000\004\067\212\001" +
    "\002\000\060\003\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\022\uffe5\025\uffe5\030\uffe5\034" +
    "\uffe5\036\uffe5\046\uffe5\051\uffe5\055\uffe5\056\uffe5\061\uffe5" +
    "\076\uffe5\103\uffe5\107\uffe5\111\uffe5\113\uffe5\001\002\000" +
    "\060\003\uffed\011\uffed\012\uffed\013\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\022\uffed\025\uffed\030\uffed\034\uffed\036" +
    "\uffed\046\uffed\051\uffed\055\uffed\056\uffed\061\uffed\076\uffed" +
    "\103\uffed\107\uffed\111\uffed\113\uffed\001\002\000\060\003" +
    "\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\022\uffee\025\uffee\030\uffee\034\uffee\036\uffee\046" +
    "\uffee\051\uffee\055\uffee\056\uffee\061\uffee\076\uffee\103\uffee" +
    "\107\uffee\111\uffee\113\uffee\001\002\000\016\011\203\012" +
    "\107\103\140\107\113\111\131\113\126\001\002\000\012" +
    "\067\uffe3\073\uffe3\076\uffe3\110\uffe3\001\002\000\004\110" +
    "\221\001\002\000\020\102\147\103\146\104\144\105\145" +
    "\106\143\110\153\112\uffdd\001\002\000\014\067\uffe2\073" +
    "\uffe2\076\uffe2\110\uffe2\112\222\001\002\000\012\011\207" +
    "\012\107\103\140\107\151\001\002\000\012\067\uffdf\073" +
    "\uffdf\076\uffdf\110\uffdf\001\002\000\022\013\040\015\035" +
    "\017\024\020\042\036\030\051\050\055\032\056\037\001" +
    "\002\000\016\011\203\012\107\103\140\107\113\111\131" +
    "\113\126\001\002\000\004\067\227\001\002\000\006\011" +
    "\231\115\232\001\002\000\004\110\235\001\002\000\004" +
    "\115\234\001\002\000\004\011\233\001\002\000\004\110" +
    "\uffd3\001\002\000\004\110\uffd2\001\002\000\004\075\236" +
    "\001\002\000\060\003\127\011\136\012\107\013\040\015" +
    "\035\016\114\017\024\020\042\022\135\025\133\030\125" +
    "\034\110\036\030\046\117\051\050\055\032\056\037\061" +
    "\121\076\ufffa\103\140\107\113\111\131\113\126\001\002" +
    "\000\004\076\240\001\002\000\060\003\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\022\uffe6" +
    "\025\uffe6\030\uffe6\034\uffe6\036\uffe6\046\uffe6\051\uffe6\055" +
    "\uffe6\056\uffe6\061\uffe6\076\uffe6\103\uffe6\107\uffe6\111\uffe6" +
    "\113\uffe6\001\002\000\006\032\uffa5\076\uffa5\001\002\000" +
    "\016\011\203\012\107\103\140\107\113\111\131\113\126" +
    "\001\002\000\004\110\244\001\002\000\004\075\245\001" +
    "\002\000\060\003\127\011\136\012\107\013\040\015\035" +
    "\016\114\017\024\020\042\022\135\025\133\030\125\034" +
    "\110\036\030\046\117\051\050\055\032\056\037\061\121" +
    "\076\ufffa\103\140\107\113\111\131\113\126\001\002\000" +
    "\004\076\247\001\002\000\060\003\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\025" +
    "\uffe8\030\uffe8\034\uffe8\036\uffe8\046\uffe8\051\uffe8\055\uffe8" +
    "\056\uffe8\061\uffe8\076\uffe8\103\uffe8\107\uffe8\111\uffe8\113" +
    "\uffe8\001\002\000\062\003\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\022\uffa2\025\uffa2\030" +
    "\uffa2\034\uffa2\036\uffa2\046\uffa2\051\uffa2\055\uffa2\056\uffa2" +
    "\061\uffa2\067\251\076\uffa2\103\uffa2\107\uffa2\111\uffa2\113" +
    "\uffa2\001\002\000\060\003\uffa3\011\uffa3\012\uffa3\013\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\022\uffa3\025\uffa3\030" +
    "\uffa3\034\uffa3\036\uffa3\046\uffa3\051\uffa3\055\uffa3\056\uffa3" +
    "\061\uffa3\076\uffa3\103\uffa3\107\uffa3\111\uffa3\113\uffa3\001" +
    "\002\000\012\011\207\012\107\103\140\107\253\001\002" +
    "\000\016\011\203\012\107\103\140\107\113\111\131\113" +
    "\126\001\002\000\012\067\uffe1\073\uffe1\076\uffe1\110\uffe1" +
    "\001\002\000\004\110\256\001\002\000\012\067\uffe0\073" +
    "\uffe0\076\uffe0\110\uffe0\001\002\000\060\003\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\022" +
    "\ufff7\025\ufff7\030\ufff7\034\ufff7\036\ufff7\046\ufff7\051\ufff7" +
    "\055\ufff7\056\ufff7\061\ufff7\076\ufff7\103\ufff7\107\ufff7\111" +
    "\ufff7\113\ufff7\001\002\000\060\003\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\022\ufff0\025" +
    "\ufff0\030\ufff0\034\ufff0\036\ufff0\046\ufff0\051\ufff0\055\ufff0" +
    "\056\ufff0\061\ufff0\076\ufff0\103\ufff0\107\ufff0\111\ufff0\113" +
    "\ufff0\001\002\000\004\110\262\001\002\000\004\112\222" +
    "\001\002\000\004\076\ufffb\001\002\000\016\011\203\012" +
    "\107\103\140\107\113\111\131\113\126\001\002\000\016" +
    "\011\203\012\107\103\140\107\113\111\131\113\126\001" +
    "\002\000\004\110\267\001\002\000\004\075\270\001\002" +
    "\000\060\003\127\011\136\012\107\013\040\015\035\016" +
    "\114\017\024\020\042\022\135\025\133\030\125\034\110" +
    "\036\030\046\117\051\050\055\032\056\037\061\121\076" +
    "\ufffa\103\140\107\113\111\131\113\126\001\002\000\004" +
    "\076\272\001\002\000\062\003\uffec\011\uffec\012\uffec\013" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\022\uffec\025\uffec" +
    "\026\274\030\uffec\034\uffec\036\uffec\046\uffec\051\uffec\055" +
    "\uffec\056\uffec\061\uffec\076\uffec\103\uffec\107\uffec\111\uffec" +
    "\113\uffec\001\002\000\060\003\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\022\uffeb\025\uffeb" +
    "\030\uffeb\034\uffeb\036\uffeb\046\uffeb\051\uffeb\055\uffeb\056" +
    "\uffeb\061\uffeb\076\uffeb\103\uffeb\107\uffeb\111\uffeb\113\uffeb" +
    "\001\002\000\004\075\275\001\002\000\060\003\127\011" +
    "\136\012\107\013\040\015\035\016\114\017\024\020\042" +
    "\022\135\025\133\030\125\034\110\036\030\046\117\051" +
    "\050\055\032\056\037\061\121\076\ufffa\103\140\107\113" +
    "\111\131\113\126\001\002\000\004\076\277\001\002\000" +
    "\060\003\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\022\uffe9\025\uffe9\030\uffe9\034\uffe9\036" +
    "\uffe9\046\uffe9\051\uffe9\055\uffe9\056\uffe9\061\uffe9\076\uffe9" +
    "\103\uffe9\107\uffe9\111\uffe9\113\uffe9\001\002\000\004\076" +
    "\301\001\002\000\004\075\302\001\002\000\060\003\127" +
    "\011\136\012\107\013\040\015\035\016\114\017\024\020" +
    "\042\022\135\025\133\030\125\034\110\036\030\046\117" +
    "\051\050\055\032\056\037\061\121\076\ufffa\103\140\107" +
    "\113\111\131\113\126\001\002\000\004\076\304\001\002" +
    "\000\060\003\uffea\011\uffea\012\uffea\013\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\022\uffea\025\uffea\030\uffea\034\uffea" +
    "\036\uffea\046\uffea\051\uffea\055\uffea\056\uffea\061\uffea\076" +
    "\uffea\103\uffea\107\uffea\111\uffea\113\uffea\001\002\000\006" +
    "\003\uffa7\075\uffa7\001\002\000\004\011\uffc6\001\002\000" +
    "\004\072\323\001\002\000\004\067\322\001\002\000\004" +
    "\011\313\001\002\000\004\011\uffc5\001\002\000\006\067" +
    "\315\114\314\001\002\000\006\011\317\012\316\001\002" +
    "\000\064\003\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\022\uffcf\025\uffcf\030\uffcf\032\uffcf" +
    "\034\uffcf\036\uffcf\046\uffcf\051\uffcf\052\uffcf\055\uffcf\056" +
    "\uffcf\061\uffcf\076\uffcf\103\uffcf\107\uffcf\111\uffcf\113\uffcf" +
    "\001\002\000\004\067\321\001\002\000\004\067\320\001" +
    "\002\000\064\003\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\022\uffcd\025\uffcd\030\uffcd\032" +
    "\uffcd\034\uffcd\036\uffcd\046\uffcd\051\uffcd\052\uffcd\055\uffcd" +
    "\056\uffcd\061\uffcd\076\uffcd\103\uffcd\107\uffcd\111\uffcd\113" +
    "\uffcd\001\002\000\064\003\uffce\011\uffce\012\uffce\013\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\022\uffce\025\uffce\030" +
    "\uffce\032\uffce\034\uffce\036\uffce\046\uffce\051\uffce\052\uffce" +
    "\055\uffce\056\uffce\061\uffce\076\uffce\103\uffce\107\uffce\111" +
    "\uffce\113\uffce\001\002\000\004\011\uffc4\001\002\000\004" +
    "\011\324\001\002\000\006\067\326\114\325\001\002\000" +
    "\006\011\330\012\327\001\002\000\064\003\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022" +
    "\uffcb\025\uffcb\030\uffcb\032\uffcb\034\uffcb\036\uffcb\046\uffcb" +
    "\051\uffcb\052\uffcb\055\uffcb\056\uffcb\061\uffcb\076\uffcb\103" +
    "\uffcb\107\uffcb\111\uffcb\113\uffcb\001\002\000\004\067\332" +
    "\001\002\000\004\067\331\001\002\000\064\003\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\022\uffc9\025\uffc9\030\uffc9\032\uffc9\034\uffc9\036\uffc9\046" +
    "\uffc9\051\uffc9\052\uffc9\055\uffc9\056\uffc9\061\uffc9\076\uffc9" +
    "\103\uffc9\107\uffc9\111\uffc9\113\uffc9\001\002\000\064\003" +
    "\uffca\011\uffca\012\uffca\013\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\022\uffca\025\uffca\030\uffca\032\uffca\034\uffca\036" +
    "\uffca\046\uffca\051\uffca\052\uffca\055\uffca\056\uffca\061\uffca" +
    "\076\uffca\103\uffca\107\uffca\111\uffca\113\uffca\001\002\000" +
    "\004\075\335\001\002\000\016\002\uffd1\023\uffd1\027\uffd1" +
    "\032\uffd1\052\uffd1\076\uffd1\001\002\000\022\013\040\015" +
    "\035\017\024\020\042\036\030\051\050\055\032\056\037" +
    "\001\002\000\004\076\337\001\002\000\004\067\340\001" +
    "\002\000\016\002\uffd0\023\uffd0\027\uffd0\032\uffd0\052\uffd0" +
    "\076\uffd0\001\002\000\004\075\342\001\002\000\004\011" +
    "\344\001\002\000\040\002\uffb7\003\uffb7\013\uffb7\015\uffb7" +
    "\017\uffb7\020\uffb7\023\uffb7\027\uffb7\032\uffb7\036\uffb7\051" +
    "\uffb7\052\uffb7\055\uffb7\056\uffb7\076\uffb7\001\002\000\010" +
    "\003\346\066\347\076\uffb2\001\002\000\004\076\355\001" +
    "\002\000\006\067\354\076\353\001\002\000\004\011\351" +
    "\001\002\000\004\076\uffb5\001\002\000\010\003\346\066" +
    "\347\076\uffb2\001\002\000\004\076\uffb1\001\002\000\004" +
    "\076\uffb4\001\002\000\004\076\uffb3\001\002\000\040\002" +
    "\uffb6\003\uffb6\013\uffb6\015\uffb6\017\uffb6\020\uffb6\023\uffb6" +
    "\027\uffb6\032\uffb6\036\uffb6\051\uffb6\052\uffb6\055\uffb6\056" +
    "\uffb6\076\uffb6\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\017\024\012\047\011\053\016\001" +
    "\001\000\012\003\356\024\012\047\011\053\016\001\001" +
    "\000\012\003\355\024\012\047\011\053\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\020\024\012\047\011\053\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\024\042" +
    "\026\040\030\045\043\025\044\024\045\035\047\030\054" +
    "\032\055\046\056\044\057\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\024\042\026\040\030\045" +
    "\043\025\044\024\045\035\047\030\054\057\055\046\056" +
    "\044\057\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\024\042\026\040" +
    "\030\045\043\025\044\024\045\035\055\052\056\044\057" +
    "\043\001\001\000\002\001\001\000\012\024\042\030\045" +
    "\056\051\057\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\045\057\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\061\001\001\000\004\033\077\001\001\000\006\043\063" +
    "\044\024\001\001\000\002\001\001\000\004\032\067\001" +
    "\001\000\006\043\070\044\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\101\001" +
    "\001\000\004\031\304\001\001\000\004\035\104\001\001" +
    "\000\044\005\111\010\110\012\127\013\114\014\133\015" +
    "\122\016\131\017\140\020\115\026\121\037\136\040\141" +
    "\042\117\043\025\044\024\045\035\060\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\005" +
    "\111\010\110\012\127\013\114\014\133\015\122\016\131" +
    "\017\140\020\115\026\121\037\136\040\141\042\117\043" +
    "\025\044\024\045\035\060\262\001\001\000\010\016\260" +
    "\017\217\020\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\215\017\140" +
    "\020\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\156\001\001\000\004\017\155\001" +
    "\001\000\004\017\154\001\001\000\004\017\153\001\001" +
    "\000\004\017\147\001\001\000\002\001\001\000\004\017" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\041\163" +
    "\043\162\044\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\005\111\010\110" +
    "\012\127\013\114\014\133\015\122\016\131\017\140\020" +
    "\115\026\121\037\136\040\141\042\117\043\025\044\024" +
    "\045\035\060\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\201\017\140\020\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\140\020\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\140\020\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\216\017\217\020\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\140\020\222\001\001\000\002\001" +
    "\001\000\012\026\224\043\025\044\024\045\035\001\001" +
    "\000\010\016\225\017\140\020\115\001\001\000\002\001" +
    "\001\000\004\021\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\005\111\010\110\012\127" +
    "\013\114\014\133\015\122\016\131\017\140\020\115\026" +
    "\121\037\136\040\141\042\117\043\025\044\024\045\035" +
    "\060\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\242\017\140\020\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\005\111\010" +
    "\110\012\127\013\114\014\133\015\122\016\131\017\140" +
    "\020\115\026\121\037\136\040\141\042\117\043\025\044" +
    "\024\045\035\060\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\140\020\253\001\001\000\010\016\254\017\217\020\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\277\017" +
    "\140\020\115\001\001\000\010\016\265\017\140\020\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\005" +
    "\111\010\110\012\127\013\114\014\133\015\122\016\131" +
    "\017\140\020\115\026\121\037\136\040\141\042\117\043" +
    "\025\044\024\045\035\060\270\001\001\000\002\001\001" +
    "\000\004\011\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\005\111\010\110\012\127\013\114\014\133" +
    "\015\122\016\131\017\140\020\115\026\121\037\136\040" +
    "\141\042\117\043\025\044\024\045\035\060\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\005\111\010\110\012\127\013\114" +
    "\014\133\015\122\016\131\017\140\020\115\026\121\037" +
    "\136\040\141\042\117\043\025\044\024\045\035\060\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\333\001\001" +
    "\000\002\001\001\000\012\026\335\043\025\044\024\045" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\347\001\001\000\002\001" +
    "\001\000\004\051\351\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static boolean fatalError = false;
    public static boolean specError = false;
    public static Symbol fatalErrorSym;
    public static String specErrorDetail = "";

    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public static void informar_Error_Especifico(String tipoError){
        String specErrorStr = "ERROR: "+tipoError;//+". Línea: "+specErrorSym.right+". Columna: "+specErrorSym.left;
        specErrorDetail = specErrorStr;
        specError = true;

        System.err.println(specErrorStr);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMFUNC ::= TYPENAME Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_RETURN ::= Return Identificador 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Return de función sin punto y coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_RETURN ::= Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCIONCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCIONCONTEN ::= LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNCIONRETURNS ::= Returns FUNCIONATRIB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNATRIBDOS ::= ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ENUMLIST ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ENUMLIST ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTRACTPART3 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTRACTPART2 ::= CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONTRACTPART1 ::= CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONTRACTPART1 ::= DECLARVARIABLE CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTRACTPART ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTRACTPART ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTRACTPART ::= CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ACCESSMOD ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGVARIABLE ::= Identificador Op_atribucion Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGVARIABLE ::= Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STRUCTCONTEN ::= LlaveAbre DECLARVARIABLE LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRUCTDEF ::= Struct Identificador STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION_INCREMENTAL ::= Identificador Op_Incremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_INCREMENTAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_INCREMENTAL ::= Op_Incremental Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_INCREMENTAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRECION_ARITMETICA ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRECION_ARITMETICA ::= ParentAbre EXPRECION_ARITMETICA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRECION_ARITMETICA ::= Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mod EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Div EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mult EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Suma EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION_PRIMARIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION_PRIMARIA ::= EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION_BOOLEANA ::= ParentAbre EXPRESION_BOOLEANA ParentCierre Op_relacional EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION_BOOLEANA ::= EXPRESION_PRIMARIA Op_relacional ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION_BOOLEANA ::= EXPRESION_PRIMARIA Op_relacional EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION_BOOLEANA ::= Not ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_BOOLEANA ::= Not EXPRESION_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_TERNARIA ::= EXPRESION_BOOLEANA SignoPregunta EXPRESION_PRIMARIA DosPuntos EXPRESION_PRIMARIA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_TERNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_FOR ::= For ParentAbre DECLARVARIABLE EXPRESION_BOOLEANA PuntoComa EXPRESION_INCREMENTAL ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra While ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_WHILE ::= While ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_ELSE ::= Else LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_IF ::= If LlaveAbre EXPRESION_BOOLEANA LlaveCierra LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;
		Sintax.informar_Error_Especifico("ERROR: If con llaves");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_IF ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra SENTENCIA_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_IF ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= ASIGVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_TERNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_SENTENCIAPRIMA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIODOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIODOS ::= ENUMDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIODOS ::= CONTRACTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIODOS ::= STRUCTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Version PuntoComa INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

