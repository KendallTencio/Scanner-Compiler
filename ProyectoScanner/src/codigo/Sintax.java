
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 23 13:57:44 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 23 13:57:44 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\063\004\000\002\063\002\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\010\011\000\002\010\012\000\002\010\011\000\002" +
    "\011\006\000\002\012\011\000\002\013\012\000\002\014" +
    "\014\000\002\015\010\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\016\003\000\002\016\004\000" +
    "\002\016\006\000\002\016\005\000\002\016\007\000\002" +
    "\016\007\000\002\016\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\004\000\002\017\005\000\002\017\003\000" +
    "\002\017\003\000\002\020\004\000\002\020\004\000\002" +
    "\024\005\000\002\025\006\000\002\026\007\000\002\026" +
    "\010\000\002\026\010\000\002\026\003\000\002\044\005" +
    "\000\002\044\002\000\002\050\010\000\002\050\011\000" +
    "\002\050\011\000\002\045\005\000\002\045\002\000\002" +
    "\043\005\000\002\043\005\000\002\051\003\000\002\051" +
    "\003\000\002\051\004\000\002\051\002\000\002\056\007" +
    "\000\002\056\004\000\002\057\004\000\002\057\003\000" +
    "\002\060\004\000\002\060\004\000\002\060\003\000\002" +
    "\061\004\000\002\061\003\000\002\062\004\000\002\062" +
    "\002\000\002\052\005\000\002\053\006\000\002\053\004" +
    "\000\002\054\004\000\002\054\002\000\002\055\004\000" +
    "\002\031\010\000\002\032\006\000\002\033\006\000\002" +
    "\033\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\002\000\002\035\004" +
    "\000\002\035\002\000\002\036\005\000\002\036\004\000" +
    "\002\040\005\000\002\040\004\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\042\002\000\002\030" +
    "\005\000\002\030\005\000\002\030\004\000\002\030\002" +
    "\000\002\046\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\041" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\043\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\004\067\011\001\002\000" +
    "\034\002\ufffb\003\023\013\027\015\022\017\012\020\032" +
    "\023\026\027\021\036\015\051\033\052\020\055\017\056" +
    "\025\001\002\000\014\003\uff91\011\uff91\044\uff91\045\uff91" +
    "\071\uff91\001\002\000\014\003\uff93\011\uff93\044\uff93\045" +
    "\uff93\071\uff93\001\002\000\014\003\350\011\uffbc\044\346" +
    "\045\352\071\347\001\002\000\014\003\uff8e\011\uff8e\044" +
    "\uff8e\045\uff8e\071\uff8e\001\002\000\034\002\ufffb\003\023" +
    "\013\027\015\022\017\012\020\032\023\026\027\021\036" +
    "\015\051\033\052\020\055\017\056\025\001\002\000\014" +
    "\003\uff8c\011\uff8c\044\uff8c\045\uff8c\071\uff8c\001\002\000" +
    "\004\011\337\001\002\000\004\011\323\001\002\000\014" +
    "\003\uff92\011\uff92\044\uff92\045\uff92\071\uff92\001\002\000" +
    "\004\076\322\001\002\000\074\002\uffc9\003\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\022" +
    "\uffc9\023\uffc9\025\uffc9\027\uffc9\030\uffc9\032\uffc9\034\uffc9" +
    "\036\uffc9\046\uffc9\051\uffc9\052\uffc9\055\uffc9\056\uffc9\061" +
    "\uffc9\076\uffc9\103\uffc9\107\uffc9\111\uffc9\113\uffc9\115\uffc9" +
    "\001\002\000\014\003\uff8b\011\uff8b\044\uff8b\045\uff8b\071" +
    "\uff8b\001\002\000\004\011\041\001\002\000\014\003\uff8f" +
    "\011\uff8f\044\uff8f\045\uff8f\071\uff8f\001\002\000\034\002" +
    "\ufffb\003\023\013\027\015\022\017\012\020\032\023\026" +
    "\027\021\036\015\051\033\052\020\055\017\056\025\001" +
    "\002\000\034\002\ufffb\003\023\013\027\015\022\017\012" +
    "\020\032\023\026\027\021\036\015\051\033\052\020\055" +
    "\017\056\025\001\002\000\014\003\uff90\011\uff90\044\uff90" +
    "\045\uff90\071\uff90\001\002\000\014\003\uff8d\011\uff8d\044" +
    "\uff8d\045\uff8d\071\uff8d\001\002\000\004\002\000\001\002" +
    "\000\034\002\ufffb\003\023\013\027\015\022\017\012\020" +
    "\032\023\026\027\021\036\015\051\033\052\020\055\017" +
    "\056\025\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\ufffc\001\002\000\004\075\042" +
    "\001\002\000\034\011\044\013\027\015\022\017\012\020" +
    "\032\027\021\032\043\036\015\051\033\052\020\055\017" +
    "\056\025\076\uffb1\001\002\000\004\011\114\001\002\000" +
    "\004\114\064\001\002\000\032\011\044\013\027\015\022" +
    "\017\012\020\032\032\043\036\015\051\033\052\020\055" +
    "\017\056\025\076\uffb1\001\002\000\034\011\044\013\027" +
    "\015\022\017\012\020\032\027\021\032\043\036\015\051" +
    "\033\052\020\055\017\056\025\076\uffb1\001\002\000\004" +
    "\076\061\001\002\000\032\011\044\013\027\015\022\017" +
    "\012\020\032\032\043\036\015\051\033\052\020\055\017" +
    "\056\025\076\uffb1\001\002\000\010\032\043\052\020\076" +
    "\uffb1\001\002\000\004\076\uffb3\001\002\000\006\032\043" +
    "\076\uffb1\001\002\000\004\076\uffb5\001\002\000\004\076" +
    "\uffb8\001\002\000\004\076\uffb2\001\002\000\004\076\uffb4" +
    "\001\002\000\004\076\uffb7\001\002\000\034\002\uffbb\003" +
    "\uffbb\013\uffbb\015\uffbb\017\uffbb\020\uffbb\023\uffbb\027\uffbb" +
    "\036\uffbb\051\uffbb\052\uffbb\055\uffbb\056\uffbb\001\002\000" +
    "\004\076\uffb9\001\002\000\004\076\uffb6\001\002\000\014" +
    "\011\072\012\067\103\071\107\070\115\073\001\002\000" +
    "\060\011\uffd2\013\uffd2\015\uffd2\017\uffd2\020\uffd2\032\uffd2" +
    "\036\uffd2\051\uffd2\052\uffd2\055\uffd2\056\uffd2\066\uffd2\067" +
    "\uffd2\073\uffd2\074\uffd2\076\uffd2\102\uffd2\103\uffd2\104\uffd2" +
    "\105\uffd2\106\uffd2\110\uffd2\112\uffd2\001\002\000\052\011" +
    "\uffc1\013\uffc1\015\uffc1\017\uffc1\020\uffc1\032\uffc1\036\uffc1" +
    "\051\uffc1\052\uffc1\055\uffc1\056\uffc1\066\uffc1\067\uffc1\076" +
    "\uffc1\102\104\103\102\104\101\105\103\106\100\110\uffc1" +
    "\001\002\000\060\011\uffd1\013\uffd1\015\uffd1\017\uffd1\020" +
    "\uffd1\032\uffd1\036\uffd1\051\uffd1\052\uffd1\055\uffd1\056\uffd1" +
    "\066\uffd1\067\uffd1\073\uffd1\074\uffd1\076\uffd1\102\uffd1\103" +
    "\uffd1\104\uffd1\105\uffd1\106\uffd1\110\uffd1\112\uffd1\001\002" +
    "\000\014\011\077\012\067\103\071\107\070\115\073\001" +
    "\002\000\014\011\077\012\067\103\071\107\070\115\073" +
    "\001\002\000\042\011\uffc0\013\uffc0\015\uffc0\017\uffc0\020" +
    "\uffc0\032\uffc0\036\uffc0\051\uffc0\052\uffc0\055\uffc0\056\uffc0" +
    "\066\uffc0\067\uffc0\076\uffc0\110\uffc0\115\075\001\002\000" +
    "\004\011\074\001\002\000\060\011\uffd0\013\uffd0\015\uffd0" +
    "\017\uffd0\020\uffd0\032\uffd0\036\uffd0\051\uffd0\052\uffd0\055" +
    "\uffd0\056\uffd0\066\uffd0\067\uffd0\073\uffd0\074\uffd0\076\uffd0" +
    "\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0\110\uffd0\112" +
    "\uffd0\001\002\000\060\011\uffcf\013\uffcf\015\uffcf\017\uffcf" +
    "\020\uffcf\032\uffcf\036\uffcf\051\uffcf\052\uffcf\055\uffcf\056" +
    "\uffcf\066\uffcf\067\uffcf\073\uffcf\074\uffcf\076\uffcf\102\uffcf" +
    "\103\uffcf\104\uffcf\105\uffcf\106\uffcf\110\uffcf\112\uffcf\001" +
    "\002\000\060\011\uffd4\013\uffd4\015\uffd4\017\uffd4\020\uffd4" +
    "\032\uffd4\036\uffd4\051\uffd4\052\uffd4\055\uffd4\056\uffd4\066" +
    "\uffd4\067\uffd4\073\uffd4\074\uffd4\076\uffd4\102\uffd4\103\uffd4" +
    "\104\101\105\103\106\100\110\uffd4\112\uffd4\001\002\000" +
    "\004\115\075\001\002\000\014\011\077\012\067\103\071" +
    "\107\070\115\073\001\002\000\014\011\077\012\067\103" +
    "\071\107\070\115\073\001\002\000\014\011\077\012\067" +
    "\103\071\107\070\115\073\001\002\000\014\011\077\012" +
    "\067\103\071\107\070\115\073\001\002\000\014\011\077" +
    "\012\067\103\071\107\070\115\073\001\002\000\060\011" +
    "\uffd9\013\uffd9\015\uffd9\017\uffd9\020\uffd9\032\uffd9\036\uffd9" +
    "\051\uffd9\052\uffd9\055\uffd9\056\uffd9\066\uffd9\067\uffd9\073" +
    "\uffd9\074\uffd9\076\uffd9\102\uffd9\103\uffd9\104\101\105\103" +
    "\106\100\110\uffd9\112\uffd9\001\002\000\060\011\uffd6\013" +
    "\uffd6\015\uffd6\017\uffd6\020\uffd6\032\uffd6\036\uffd6\051\uffd6" +
    "\052\uffd6\055\uffd6\056\uffd6\066\uffd6\067\uffd6\073\uffd6\074" +
    "\uffd6\076\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6" +
    "\110\uffd6\112\uffd6\001\002\000\060\011\uffd8\013\uffd8\015" +
    "\uffd8\017\uffd8\020\uffd8\032\uffd8\036\uffd8\051\uffd8\052\uffd8" +
    "\055\uffd8\056\uffd8\066\uffd8\067\uffd8\073\uffd8\074\uffd8\076" +
    "\uffd8\102\uffd8\103\uffd8\104\101\105\103\106\100\110\uffd8" +
    "\112\uffd8\001\002\000\060\011\uffd7\013\uffd7\015\uffd7\017" +
    "\uffd7\020\uffd7\032\uffd7\036\uffd7\051\uffd7\052\uffd7\055\uffd7" +
    "\056\uffd7\066\uffd7\067\uffd7\073\uffd7\074\uffd7\076\uffd7\102" +
    "\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7\110\uffd7\112\uffd7" +
    "\001\002\000\060\011\uffd5\013\uffd5\015\uffd5\017\uffd5\020" +
    "\uffd5\032\uffd5\036\uffd5\051\uffd5\052\uffd5\055\uffd5\056\uffd5" +
    "\066\uffd5\067\uffd5\073\uffd5\074\uffd5\076\uffd5\102\uffd5\103" +
    "\uffd5\104\uffd5\105\uffd5\106\uffd5\110\uffd5\112\uffd5\001\002" +
    "\000\016\102\104\103\102\104\101\105\103\106\100\110" +
    "\113\001\002\000\060\011\uffd3\013\uffd3\015\uffd3\017\uffd3" +
    "\020\uffd3\032\uffd3\036\uffd3\051\uffd3\052\uffd3\055\uffd3\056" +
    "\uffd3\066\uffd3\067\uffd3\073\uffd3\074\uffd3\076\uffd3\102\uffd3" +
    "\103\uffd3\104\uffd3\105\uffd3\106\uffd3\110\uffd3\112\uffd3\001" +
    "\002\000\004\107\116\001\002\000\020\003\uffa2\037\131" +
    "\042\130\044\127\045\132\047\uffa2\075\uffa2\001\002\000" +
    "\022\013\027\015\022\017\012\020\032\036\015\051\033" +
    "\055\017\056\025\001\002\000\004\011\120\001\002\000" +
    "\006\066\121\110\122\001\002\000\022\013\027\015\022" +
    "\017\012\020\032\036\015\051\033\055\017\056\025\001" +
    "\002\000\020\003\uffa7\037\uffa7\042\uffa7\044\uffa7\045\uffa7" +
    "\047\uffa7\075\uffa7\001\002\000\020\003\uffa9\037\uffa9\042" +
    "\uffa9\044\uffa9\045\uffa9\047\uffa9\075\uffa9\001\002\000\004" +
    "\011\125\001\002\000\006\066\121\110\122\001\002\000" +
    "\020\003\uffa8\037\uffa8\042\uffa8\044\uffa8\045\uffa8\047\uffa8" +
    "\075\uffa8\001\002\000\010\003\uffa5\047\uffa5\075\uffa5\001" +
    "\002\000\010\003\uffa6\047\uffa6\075\uffa6\001\002\000\010" +
    "\003\uffa3\047\uffa3\075\uffa3\001\002\000\010\003\uffa4\047" +
    "\uffa4\075\uffa4\001\002\000\010\003\uffa0\047\134\075\uffa0" +
    "\001\002\000\004\107\116\001\002\000\006\003\137\075" +
    "\136\001\002\000\062\003\160\011\170\012\067\013\027" +
    "\015\022\016\146\017\012\020\032\022\167\025\164\030" +
    "\156\034\142\036\015\046\150\051\033\055\017\056\025" +
    "\061\152\076\ufff9\103\071\107\145\111\162\113\157\115" +
    "\073\001\002\000\004\076\141\001\002\000\006\032\uffaa" +
    "\076\uffaa\001\002\000\006\032\uff9e\076\uff9e\001\002\000" +
    "\006\075\300\107\301\001\002\000\062\003\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\022" +
    "\ufff8\025\ufff8\030\ufff8\034\ufff8\036\ufff8\046\ufff8\051\ufff8" +
    "\055\ufff8\056\ufff8\061\ufff8\076\ufff8\103\ufff8\107\ufff8\111" +
    "\ufff8\113\ufff8\115\ufff8\001\002\000\062\003\160\011\170" +
    "\012\067\013\027\015\022\016\146\017\012\020\032\022" +
    "\167\025\164\030\156\034\142\036\015\046\150\051\033" +
    "\055\017\056\025\061\152\076\ufff9\103\071\107\145\111" +
    "\162\113\157\115\073\001\002\000\020\011\222\012\067" +
    "\103\071\107\145\111\162\113\157\115\073\001\002\000" +
    "\004\067\274\001\002\000\004\067\273\001\002\000\004" +
    "\011\271\001\002\000\004\067\270\001\002\000\004\107" +
    "\262\001\002\000\062\003\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\025\ufff2\030" +
    "\ufff2\034\ufff2\036\ufff2\046\ufff2\051\ufff2\055\ufff2\056\ufff2" +
    "\061\ufff2\076\ufff2\103\ufff2\107\ufff2\111\ufff2\113\ufff2\115" +
    "\ufff2\001\002\000\062\003\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\025\ufff3\030" +
    "\ufff3\034\ufff3\036\ufff3\046\ufff3\051\ufff3\055\ufff3\056\ufff3" +
    "\061\ufff3\076\ufff3\103\ufff3\107\ufff3\111\ufff3\113\ufff3\115" +
    "\ufff3\001\002\000\004\076\261\001\002\000\004\107\250" +
    "\001\002\000\020\011\222\012\067\103\071\107\242\111" +
    "\162\113\157\115\073\001\002\000\006\067\241\076\240" +
    "\001\002\000\062\003\ufff7\011\ufff7\012\ufff7\013\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\025\ufff7\030\ufff7" +
    "\034\ufff7\036\ufff7\046\ufff7\051\ufff7\055\ufff7\056\ufff7\061" +
    "\ufff7\076\ufff7\103\ufff7\107\ufff7\111\ufff7\113\ufff7\115\ufff7" +
    "\001\002\000\012\067\uffe0\073\uffe0\076\uffe0\110\uffe0\001" +
    "\002\000\004\073\233\001\002\000\004\075\224\001\002" +
    "\000\062\003\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\022\ufff5\025\ufff5\030\ufff5\034\ufff5" +
    "\036\ufff5\046\ufff5\051\ufff5\055\ufff5\056\ufff5\061\ufff5\076" +
    "\ufff5\103\ufff5\107\ufff5\111\ufff5\113\ufff5\115\ufff5\001\002" +
    "\000\016\102\104\103\102\104\101\105\103\106\100\112" +
    "\215\001\002\000\004\067\214\001\002\000\012\073\uffda" +
    "\107\173\114\064\115\075\001\002\000\062\003\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\022\ufff4\025\ufff4\030\ufff4\034\ufff4\036\ufff4\046\ufff4\051" +
    "\ufff4\055\ufff4\056\ufff4\061\ufff4\076\ufff4\103\ufff4\107\ufff4" +
    "\111\ufff4\113\ufff4\115\ufff4\001\002\000\062\003\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\022\ufff0\025\ufff0\030\ufff0\034\ufff0\036\ufff0\046\ufff0\051" +
    "\ufff0\055\ufff0\056\ufff0\061\ufff0\076\ufff0\103\ufff0\107\ufff0" +
    "\111\ufff0\113\ufff0\115\ufff0\001\002\000\016\011\175\012" +
    "\067\103\071\107\070\110\uff98\115\073\001\002\000\022" +
    "\011\044\066\201\102\104\103\102\104\101\105\103\106" +
    "\100\110\uff94\001\002\000\014\011\044\066\201\110\uff94" +
    "\114\064\115\075\001\002\000\004\110\210\001\002\000" +
    "\010\011\044\066\201\110\uff94\001\002\000\004\110\uff99" +
    "\001\002\000\014\011\205\012\067\103\071\107\070\115" +
    "\073\001\002\000\010\011\044\066\201\110\uff94\001\002" +
    "\000\004\110\uff95\001\002\000\022\011\044\066\201\102" +
    "\104\103\102\104\101\105\103\106\100\110\uff94\001\002" +
    "\000\012\011\044\066\201\110\uff94\115\075\001\002\000" +
    "\004\110\uff97\001\002\000\004\110\uff96\001\002\000\004" +
    "\067\211\001\002\000\062\003\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\022\uff8a\025\uff8a" +
    "\030\uff8a\034\uff8a\036\uff8a\046\uff8a\051\uff8a\055\uff8a\056" +
    "\uff8a\061\uff8a\076\uff8a\103\uff8a\107\uff8a\111\uff8a\113\uff8a" +
    "\115\uff8a\001\002\000\004\110\uff9b\001\002\000\004\110" +
    "\uff9a\001\002\000\062\003\uffee\011\uffee\012\uffee\013\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\022\uffee\025\uffee\030" +
    "\uffee\034\uffee\036\uffee\046\uffee\051\uffee\055\uffee\056\uffee" +
    "\061\uffee\076\uffee\103\uffee\107\uffee\111\uffee\113\uffee\115" +
    "\uffee\001\002\000\014\011\077\012\067\103\071\107\217" +
    "\115\073\001\002\000\024\067\uffdd\073\uffdd\076\uffdd\102" +
    "\104\103\102\104\101\105\103\106\100\110\uffdd\001\002" +
    "\000\020\011\222\012\067\103\071\107\145\111\162\113" +
    "\157\115\073\001\002\000\020\102\104\103\102\104\101" +
    "\105\103\106\100\110\113\112\215\001\002\000\004\110" +
    "\223\001\002\000\014\067\uffda\073\uffda\076\uffda\110\uffda" +
    "\115\075\001\002\000\012\067\uffdc\073\uffdc\076\uffdc\110" +
    "\uffdc\001\002\000\062\003\160\011\170\012\067\013\027" +
    "\015\022\016\146\017\012\020\032\022\167\025\164\030" +
    "\156\034\142\036\015\046\150\051\033\055\017\056\025" +
    "\061\152\076\ufff9\103\071\107\145\111\162\113\157\115" +
    "\073\001\002\000\004\076\226\001\002\000\004\061\227" +
    "\001\002\000\004\107\230\001\002\000\020\011\222\012" +
    "\067\103\071\107\145\111\162\113\157\115\073\001\002" +
    "\000\004\110\232\001\002\000\004\067\uffe6\001\002\000" +
    "\014\011\077\012\067\103\071\107\070\115\073\001\002" +
    "\000\016\074\235\102\104\103\102\104\101\105\103\106" +
    "\100\001\002\000\014\011\077\012\067\103\071\107\070" +
    "\115\073\001\002\000\016\067\237\102\104\103\102\104" +
    "\101\105\103\106\100\001\002\000\062\003\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022" +
    "\uffe4\025\uffe4\030\uffe4\034\uffe4\036\uffe4\046\uffe4\051\uffe4" +
    "\055\uffe4\056\uffe4\061\uffe4\076\uffe4\103\uffe4\107\uffe4\111" +
    "\uffe4\113\uffe4\115\uffe4\001\002\000\062\003\uffec\011\uffec" +
    "\012\uffec\013\uffec\015\uffec\016\uffec\017\uffec\020\uffec\022" +
    "\uffec\025\uffec\030\uffec\034\uffec\036\uffec\046\uffec\051\uffec" +
    "\055\uffec\056\uffec\061\uffec\076\uffec\103\uffec\107\uffec\111" +
    "\uffec\113\uffec\115\uffec\001\002\000\062\003\uffed\011\uffed" +
    "\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed\022" +
    "\uffed\025\uffed\030\uffed\034\uffed\036\uffed\046\uffed\051\uffed" +
    "\055\uffed\056\uffed\061\uffed\076\uffed\103\uffed\107\uffed\111" +
    "\uffed\113\uffed\115\uffed\001\002\000\020\011\222\012\067" +
    "\103\071\107\145\111\162\113\157\115\073\001\002\000" +
    "\012\067\uffdf\073\uffdf\076\uffdf\110\uffdf\001\002\000\004" +
    "\110\245\001\002\000\014\067\uffde\073\uffde\076\uffde\110" +
    "\uffde\112\246\001\002\000\014\011\077\012\067\103\071" +
    "\107\070\115\073\001\002\000\024\067\uffdb\073\uffdb\076" +
    "\uffdb\102\104\103\102\104\101\105\103\106\100\110\uffdb" +
    "\001\002\000\022\013\027\015\022\017\012\020\032\036" +
    "\015\051\033\055\017\056\025\001\002\000\020\011\222" +
    "\012\067\103\071\107\145\111\162\113\157\115\073\001" +
    "\002\000\004\067\253\001\002\000\006\011\077\115\073" +
    "\001\002\000\004\110\255\001\002\000\004\075\256\001" +
    "\002\000\062\003\160\011\170\012\067\013\027\015\022" +
    "\016\146\017\012\020\032\022\167\025\164\030\156\034" +
    "\142\036\015\046\150\051\033\055\017\056\025\061\152" +
    "\076\ufff9\103\071\107\145\111\162\113\157\115\073\001" +
    "\002\000\004\076\260\001\002\000\062\003\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022" +
    "\uffe5\025\uffe5\030\uffe5\034\uffe5\036\uffe5\046\uffe5\051\uffe5" +
    "\055\uffe5\056\uffe5\061\uffe5\076\uffe5\103\uffe5\107\uffe5\111" +
    "\uffe5\113\uffe5\115\uffe5\001\002\000\006\032\uff9f\076\uff9f" +
    "\001\002\000\020\011\222\012\067\103\071\107\145\111" +
    "\162\113\157\115\073\001\002\000\004\110\264\001\002" +
    "\000\004\075\265\001\002\000\062\003\160\011\170\012" +
    "\067\013\027\015\022\016\146\017\012\020\032\022\167" +
    "\025\164\030\156\034\142\036\015\046\150\051\033\055" +
    "\017\056\025\061\152\076\ufff9\103\071\107\145\111\162" +
    "\113\157\115\073\001\002\000\004\076\267\001\002\000" +
    "\062\003\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\022\uffe7\025\uffe7\030\uffe7\034\uffe7\036" +
    "\uffe7\046\uffe7\051\uffe7\055\uffe7\056\uffe7\061\uffe7\076\uffe7" +
    "\103\uffe7\107\uffe7\111\uffe7\113\uffe7\115\uffe7\001\002\000" +
    "\062\003\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\022\ufff1\025\ufff1\030\ufff1\034\ufff1\036" +
    "\ufff1\046\ufff1\051\ufff1\055\ufff1\056\ufff1\061\ufff1\076\ufff1" +
    "\103\ufff1\107\ufff1\111\ufff1\113\ufff1\115\ufff1\001\002\000" +
    "\064\003\uff9c\011\uff9c\012\uff9c\013\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\022\uff9c\025\uff9c\030\uff9c\034\uff9c\036" +
    "\uff9c\046\uff9c\051\uff9c\055\uff9c\056\uff9c\061\uff9c\067\272" +
    "\076\uff9c\103\uff9c\107\uff9c\111\uff9c\113\uff9c\115\uff9c\001" +
    "\002\000\062\003\uff9d\011\uff9d\012\uff9d\013\uff9d\015\uff9d" +
    "\016\uff9d\017\uff9d\020\uff9d\022\uff9d\025\uff9d\030\uff9d\034" +
    "\uff9d\036\uff9d\046\uff9d\051\uff9d\055\uff9d\056\uff9d\061\uff9d" +
    "\076\uff9d\103\uff9d\107\uff9d\111\uff9d\113\uff9d\115\uff9d\001" +
    "\002\000\062\003\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\022\ufff6\025\ufff6\030\ufff6\034" +
    "\ufff6\036\ufff6\046\ufff6\051\ufff6\055\ufff6\056\ufff6\061\ufff6" +
    "\076\ufff6\103\ufff6\107\ufff6\111\ufff6\113\ufff6\115\ufff6\001" +
    "\002\000\062\003\uffef\011\uffef\012\uffef\013\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\022\uffef\025\uffef\030\uffef\034" +
    "\uffef\036\uffef\046\uffef\051\uffef\055\uffef\056\uffef\061\uffef" +
    "\076\uffef\103\uffef\107\uffef\111\uffef\113\uffef\115\uffef\001" +
    "\002\000\004\110\276\001\002\000\004\112\246\001\002" +
    "\000\004\076\ufffa\001\002\000\020\011\222\012\067\103" +
    "\071\107\145\111\162\113\157\115\073\001\002\000\020" +
    "\011\222\012\067\103\071\107\145\111\162\113\157\115" +
    "\073\001\002\000\004\110\303\001\002\000\004\075\304" +
    "\001\002\000\062\003\160\011\170\012\067\013\027\015" +
    "\022\016\146\017\012\020\032\022\167\025\164\030\156" +
    "\034\142\036\015\046\150\051\033\055\017\056\025\061" +
    "\152\076\ufff9\103\071\107\145\111\162\113\157\115\073" +
    "\001\002\000\004\076\306\001\002\000\064\003\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\022\uffeb\025\uffeb\026\310\030\uffeb\034\uffeb\036\uffeb\046" +
    "\uffeb\051\uffeb\055\uffeb\056\uffeb\061\uffeb\076\uffeb\103\uffeb" +
    "\107\uffeb\111\uffeb\113\uffeb\115\uffeb\001\002\000\062\003" +
    "\uffea\011\uffea\012\uffea\013\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\022\uffea\025\uffea\030\uffea\034\uffea\036\uffea\046" +
    "\uffea\051\uffea\055\uffea\056\uffea\061\uffea\076\uffea\103\uffea" +
    "\107\uffea\111\uffea\113\uffea\115\uffea\001\002\000\004\075" +
    "\311\001\002\000\062\003\160\011\170\012\067\013\027" +
    "\015\022\016\146\017\012\020\032\022\167\025\164\030" +
    "\156\034\142\036\015\046\150\051\033\055\017\056\025" +
    "\061\152\076\ufff9\103\071\107\145\111\162\113\157\115" +
    "\073\001\002\000\004\076\313\001\002\000\062\003\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\022\uffe8\025\uffe8\030\uffe8\034\uffe8\036\uffe8\046\uffe8" +
    "\051\uffe8\055\uffe8\056\uffe8\061\uffe8\076\uffe8\103\uffe8\107" +
    "\uffe8\111\uffe8\113\uffe8\115\uffe8\001\002\000\004\076\315" +
    "\001\002\000\004\075\316\001\002\000\062\003\160\011" +
    "\170\012\067\013\027\015\022\016\146\017\012\020\032" +
    "\022\167\025\164\030\156\034\142\036\015\046\150\051" +
    "\033\055\017\056\025\061\152\076\ufff9\103\071\107\145" +
    "\111\162\113\157\115\073\001\002\000\004\076\320\001" +
    "\002\000\062\003\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\022\uffe9\025\uffe9\030\uffe9\034" +
    "\uffe9\036\uffe9\046\uffe9\051\uffe9\055\uffe9\056\uffe9\061\uffe9" +
    "\076\uffe9\103\uffe9\107\uffe9\111\uffe9\113\uffe9\115\uffe9\001" +
    "\002\000\006\003\uffa1\075\uffa1\001\002\000\034\002\uffba" +
    "\003\uffba\013\uffba\015\uffba\017\uffba\020\uffba\023\uffba\027" +
    "\uffba\036\uffba\051\uffba\052\uffba\055\uffba\056\uffba\001\002" +
    "\000\006\003\325\075\324\001\002\000\004\011\330\001" +
    "\002\000\004\076\327\001\002\000\042\002\uffb0\003\uffb0" +
    "\011\uffb0\013\uffb0\015\uffb0\017\uffb0\020\uffb0\023\uffb0\027" +
    "\uffb0\032\uffb0\036\uffb0\051\uffb0\052\uffb0\055\uffb0\056\uffb0" +
    "\076\uffb0\001\002\000\042\002\uffae\003\uffae\011\uffae\013" +
    "\uffae\015\uffae\017\uffae\020\uffae\023\uffae\027\uffae\032\uffae" +
    "\036\uffae\051\uffae\052\uffae\055\uffae\056\uffae\076\uffae\001" +
    "\002\000\006\066\332\076\uffac\001\002\000\004\076\336" +
    "\001\002\000\004\011\334\001\002\000\004\076\uffad\001" +
    "\002\000\006\066\332\076\uffac\001\002\000\004\076\uffab" +
    "\001\002\000\042\002\uffaf\003\uffaf\011\uffaf\013\uffaf\015" +
    "\uffaf\017\uffaf\020\uffaf\023\uffaf\027\uffaf\032\uffaf\036\uffaf" +
    "\051\uffaf\052\uffaf\055\uffaf\056\uffaf\076\uffaf\001\002\000" +
    "\004\075\341\001\002\000\040\002\uffce\003\uffce\013\uffce" +
    "\015\uffce\017\uffce\020\uffce\023\uffce\027\uffce\032\uffce\036" +
    "\uffce\051\uffce\052\uffce\055\uffce\056\uffce\076\uffce\001\002" +
    "\000\022\013\027\015\022\017\012\020\032\036\015\051" +
    "\033\055\017\056\025\001\002\000\004\076\343\001\002" +
    "\000\004\067\344\001\002\000\040\002\uffcd\003\uffcd\013" +
    "\uffcd\015\uffcd\017\uffcd\020\uffcd\023\uffcd\027\uffcd\032\uffcd" +
    "\036\uffcd\051\uffcd\052\uffcd\055\uffcd\056\uffcd\076\uffcd\001" +
    "\002\000\004\002\ufffd\001\002\000\004\011\uffbf\001\002" +
    "\000\004\072\367\001\002\000\004\067\366\001\002\000" +
    "\004\011\353\001\002\000\004\011\uffbe\001\002\000\010" +
    "\066\355\067\uffc7\114\354\001\002\000\014\011\363\012" +
    "\067\103\071\107\070\115\073\001\002\000\004\011\360" +
    "\001\002\000\004\067\357\001\002\000\074\002\uffcc\003" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\022\uffcc\023\uffcc\025\uffcc\027\uffcc\030\uffcc\032" +
    "\uffcc\034\uffcc\036\uffcc\046\uffcc\051\uffcc\052\uffcc\055\uffcc" +
    "\056\uffcc\061\uffcc\076\uffcc\103\uffcc\107\uffcc\111\uffcc\113" +
    "\uffcc\115\uffcc\001\002\000\006\066\355\067\uffc7\001\002" +
    "\000\004\067\uffc8\001\002\000\016\067\365\102\104\103" +
    "\102\104\101\105\103\106\100\001\002\000\006\067\364" +
    "\115\075\001\002\000\074\002\uffca\003\uffca\011\uffca\012" +
    "\uffca\013\uffca\015\uffca\016\uffca\017\uffca\020\uffca\022\uffca" +
    "\023\uffca\025\uffca\027\uffca\030\uffca\032\uffca\034\uffca\036" +
    "\uffca\046\uffca\051\uffca\052\uffca\055\uffca\056\uffca\061\uffca" +
    "\076\uffca\103\uffca\107\uffca\111\uffca\113\uffca\115\uffca\001" +
    "\002\000\074\002\uffcb\003\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb\025" +
    "\uffcb\027\uffcb\030\uffcb\032\uffcb\034\uffcb\036\uffcb\046\uffcb" +
    "\051\uffcb\052\uffcb\055\uffcb\056\uffcb\061\uffcb\076\uffcb\103" +
    "\uffcb\107\uffcb\111\uffcb\113\uffcb\115\uffcb\001\002\000\004" +
    "\011\uffbd\001\002\000\004\011\370\001\002\000\010\066" +
    "\372\067\uffc2\114\371\001\002\000\014\011\u0100\012\067" +
    "\103\071\107\070\115\073\001\002\000\004\011\375\001" +
    "\002\000\004\067\374\001\002\000\074\002\uffc6\003\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\022\uffc6\023\uffc6\025\uffc6\027\uffc6\030\uffc6\032\uffc6" +
    "\034\uffc6\036\uffc6\046\uffc6\051\uffc6\052\uffc6\055\uffc6\056" +
    "\uffc6\061\uffc6\076\uffc6\103\uffc6\107\uffc6\111\uffc6\113\uffc6" +
    "\115\uffc6\001\002\000\006\066\372\067\uffc2\001\002\000" +
    "\004\067\uffc3\001\002\000\016\067\u0102\102\104\103\102" +
    "\104\101\105\103\106\100\001\002\000\006\067\u0101\115" +
    "\075\001\002\000\074\002\uffc4\003\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\022\uffc4\023" +
    "\uffc4\025\uffc4\027\uffc4\030\uffc4\032\uffc4\034\uffc4\036\uffc4" +
    "\046\uffc4\051\uffc4\052\uffc4\055\uffc4\056\uffc4\061\uffc4\076" +
    "\uffc4\103\uffc4\107\uffc4\111\uffc4\113\uffc4\115\uffc4\001\002" +
    "\000\074\002\uffc5\003\uffc5\011\uffc5\012\uffc5\013\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\022\uffc5\023\uffc5\025\uffc5" +
    "\027\uffc5\030\uffc5\032\uffc5\034\uffc5\036\uffc5\046\uffc5\051" +
    "\uffc5\052\uffc5\055\uffc5\056\uffc5\061\uffc5\076\uffc5\103\uffc5" +
    "\107\uffc5\111\uffc5\113\uffc5\115\uffc5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\033\024\030\026\027\046\013\047" +
    "\012\050\023\052\015\056\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\350\001\001\000\002\001" +
    "\001\000\022\003\344\024\030\026\027\046\013\047\012" +
    "\050\023\052\015\056\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\037\024\030\026\027" +
    "\046\013\047\012\050\023\052\015\056\034\001\001\000" +
    "\022\003\036\024\030\026\027\046\013\047\012\050\023" +
    "\052\015\056\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\035\024\030\026\027" +
    "\046\013\047\012\050\023\052\015\056\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\024\050\026\047\031\052\043\044\046" +
    "\013\047\012\050\023\052\045\057\046\060\054\061\053" +
    "\062\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\024\050\026\047\031\052\043\044\046\013\047\012" +
    "\050\023\060\062\061\053\062\051\001\001\000\032\024" +
    "\050\026\047\031\052\043\044\046\013\047\012\050\023" +
    "\052\045\057\061\060\054\061\053\062\051\001\001\000" +
    "\002\001\001\000\026\024\050\026\047\031\052\043\044" +
    "\046\013\047\012\050\023\060\057\061\053\062\051\001" +
    "\001\000\012\024\050\031\052\061\056\062\051\001\001" +
    "\000\002\001\001\000\006\031\052\062\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\065\020\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\111\020\064\001\001\000\006\017\075\020\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\110\020\064\001\001\000\006\017\107\020" +
    "\064\001\001\000\006\017\106\020\064\001\001\000\006" +
    "\017\105\020\064\001\001\000\006\017\104\020\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\114\001\001\000\004\034\132" +
    "\001\001\000\006\046\116\047\012\001\001\000\002\001" +
    "\001\000\004\033\122\001\001\000\006\046\123\047\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\134\001\001\000\004\032\320\001\001" +
    "\000\004\036\137\001\001\000\044\005\143\010\142\012" +
    "\160\013\146\014\164\015\153\016\162\017\165\020\064" +
    "\026\152\040\170\041\171\043\150\046\013\047\012\050" +
    "\023\063\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\005\143\010\142\012\160\013\146\014\164\015\153" +
    "\016\162\017\165\020\064\026\152\040\170\041\171\043" +
    "\150\046\013\047\012\050\023\063\276\001\001\000\010" +
    "\016\274\017\217\020\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\242\017\165\020\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\173\020\064" +
    "\042\175\043\176\001\001\000\006\030\212\043\201\001" +
    "\001\000\006\030\211\043\201\001\001\000\002\001\001" +
    "\000\006\030\177\043\201\001\001\000\002\001\001\000" +
    "\006\017\203\020\064\001\001\000\006\030\202\043\201" +
    "\001\001\000\002\001\001\000\006\030\206\043\201\001" +
    "\001\000\006\030\205\043\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\215\020\064\001\001\000\002\001\001\000\010\016" +
    "\220\017\217\020\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\005" +
    "\143\010\142\012\160\013\146\014\164\015\153\016\162" +
    "\017\165\020\064\026\152\040\170\041\171\043\150\046" +
    "\013\047\012\050\023\063\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\230\017" +
    "\165\020\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\233\020\064\001\001\000\002\001\001\000" +
    "\006\017\235\020\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\243\017\217\020\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\246\020\064\001" +
    "\001\000\002\001\001\000\012\026\250\046\013\047\012" +
    "\050\023\001\001\000\010\016\251\017\165\020\064\001" +
    "\001\000\002\001\001\000\004\020\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\005\143\010\142\012" +
    "\160\013\146\014\164\015\153\016\162\017\165\020\064" +
    "\026\152\040\170\041\171\043\150\046\013\047\012\050" +
    "\023\063\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\262\017\165\020\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\143" +
    "\010\142\012\160\013\146\014\164\015\153\016\162\017" +
    "\165\020\064\026\152\040\170\041\171\043\150\046\013" +
    "\047\012\050\023\063\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\313" +
    "\017\165\020\064\001\001\000\010\016\301\017\165\020" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\143\010\142\012\160\013\146\014\164\015\153\016" +
    "\162\017\165\020\064\026\152\040\170\041\171\043\150" +
    "\046\013\047\012\050\023\063\304\001\001\000\002\001" +
    "\001\000\004\011\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\005\143\010\142\012\160\013\146\014" +
    "\164\015\153\016\162\017\165\020\064\026\152\040\170" +
    "\041\171\043\150\046\013\047\012\050\023\063\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\005\143\010\142\012\160\013" +
    "\146\014\164\015\153\016\162\017\165\020\064\026\152" +
    "\040\170\041\171\043\150\046\013\047\012\050\023\063" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\330\001\001\000\002\001\001\000" +
    "\004\055\332\001\001\000\002\001\001\000\004\054\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\337\001\001\000\002\001\001\000\012\026\341\046\013" +
    "\047\012\050\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\355\001\001\000\006\017\361" +
    "\020\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\360\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\372\001\001\000\006\017\376\020\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static boolean fatalError = false;
    public static boolean specError = false;
    public static Symbol fatalErrorSym;
    public static String specErrorDetail = "";

    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public static void informar_Error_Especifico(String tipoError){
        String specErrorStr = "ERROR: "+tipoError;//+". Línea: "+specErrorSym.right+". Columna: "+specErrorSym.left;
        specErrorDetail = specErrorStr;
        specError = true;

        System.err.println(specErrorStr);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMFUNCFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMFUNCFILA ::= ASIGVARIABLE PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMFUNCFILA ::= Coma EXPRESION_ARITMETICA PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAMFUNCFILA ::= Coma Identificador PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PARAMFUNC ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMFUNC ::= ASIGVARIABLE PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMFUNC ::= EXPRESION_ARITMETICA PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMFUNC ::= Identificador PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_RETURN ::= Return Identificador 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Return de función sin punto y coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_RETURN ::= Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCIONCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNCIONCONTEN ::= LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUNCIONRETURNS ::= Returns FUNCIONATRIB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNATRIBDOS ::= ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ENUMCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONTRACTPART3 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONTRACTPART2 ::= CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTRACTPART1 ::= CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTRACTPART1 ::= ASIGVARIABLE CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTRACTPART1 ::= DECLARVARIABLE CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTRACTPART ::= CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTRACTDEF ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCESSMOD ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGVARIABLE ::= Identificador Op_atribucion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGVARIABLE ::= Identificador Op_atribucion EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARRAYDECLARFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARRAYDECLARFILA ::= Coma Identificador ARRAYDECLARFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion EXPRESION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador ARRAYDECLARFILA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARVARIABLEFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARVARIABLEFILA ::= Coma Identificador DECLARVARIABLEFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion EXPRESION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador DECLARVARIABLEFILA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRUCTCONTEN ::= LlaveAbre DECLARVARIABLE LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STRUCTDEF ::= Struct Identificador STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION_INCREMENTAL ::= Identificador Op_Incremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_INCREMENTAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION_INCREMENTAL ::= Op_Incremental Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_INCREMENTAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION_ARITMETICA ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION_ARITMETICA ::= EXPRESION_INCREMENTAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_ARITMETICA ::= ParentAbre EXPRESION_ARITMETICA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_ARITMETICA ::= Resta EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA Mod EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA Div EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA Mult EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA Resta EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA Suma EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION_BOOLEANA ::= ParentAbre EXPRESION_BOOLEANA ParentCierre Op_relacional EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION_BOOLEANA ::= EXPRESION_ARITMETICA Op_relacional ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION_BOOLEANA ::= EXPRESION_ARITMETICA Op_relacional EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION_BOOLEANA ::= Not ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION_BOOLEANA ::= Not EXPRESION_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION_INCREMENTAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_TERNARIA ::= EXPRESION_BOOLEANA SignoPregunta EXPRESION_ARITMETICA DosPuntos EXPRESION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_TERNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_FOR ::= For ParentAbre DECLARVARIABLE EXPRESION_BOOLEANA PuntoComa EXPRESION_INCREMENTAL ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra While ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_WHILE ::= While ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_ELSE ::= Else LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_IF ::= If LlaveAbre EXPRESION_BOOLEANA LlaveCierra LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;
		Sintax.informar_Error_Especifico("ERROR: If con llaves");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_IF ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra SENTENCIA_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_IF ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ASIGVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DECLARVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_TERNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_SENTENCIAPRIMA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIODOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIODOS ::= DECLARVARIABLE INICIODOS 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Declaración fuera de función"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIODOS ::= ENUMDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIODOS ::= CONTRACTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIODOS ::= STRUCTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Version PuntoComa INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

