
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 23 15:50:18 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 23 15:50:18 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\065\004\000\002\065\002\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\010\011\000\002\010\012\000\002\011\006\000\002" +
    "\012\011\000\002\013\012\000\002\014\014\000\002\015" +
    "\010\000\002\022\005\000\002\022\005\000\002\022\004" +
    "\000\002\022\003\000\002\022\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\004\000\002\022\003\000\002\022" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\003" +
    "\000\002\021\004\000\002\021\004\000\002\025\005\000" +
    "\002\026\006\000\002\027\006\000\002\027\007\000\002" +
    "\027\003\000\002\046\005\000\002\046\002\000\002\052" +
    "\007\000\002\052\010\000\002\047\005\000\002\047\002" +
    "\000\002\044\005\000\002\045\005\000\002\053\003\000" +
    "\002\053\003\000\002\053\004\000\002\053\002\000\002" +
    "\060\007\000\002\060\004\000\002\061\004\000\002\061" +
    "\003\000\002\062\005\000\002\062\005\000\002\062\003" +
    "\000\002\063\004\000\002\063\003\000\002\064\004\000" +
    "\002\064\002\000\002\054\005\000\002\055\006\000\002" +
    "\055\004\000\002\056\004\000\002\056\002\000\002\057" +
    "\004\000\002\032\010\000\002\033\006\000\002\034\006" +
    "\000\002\034\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\002\000\002" +
    "\036\004\000\002\036\002\000\002\037\005\000\002\037" +
    "\004\000\002\041\005\000\002\041\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\002\000\002\031\005\000" +
    "\002\031\005\000\002\031\002\000\002\050\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\042\006\000\002\042\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\004\043\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\004\067\011\001\002\000" +
    "\034\002\ufffb\003\022\013\027\015\023\017\012\020\031" +
    "\023\026\027\021\036\015\051\033\052\020\055\017\056" +
    "\025\001\002\000\014\003\uff99\011\uff99\044\uff99\045\uff99" +
    "\071\uff99\001\002\000\014\003\uff9b\011\uff9b\044\uff9b\045" +
    "\uff9b\071\uff9b\001\002\000\014\003\337\011\uffc2\044\335" +
    "\045\341\071\336\001\002\000\014\003\uff96\011\uff96\044" +
    "\uff96\045\uff96\071\uff96\001\002\000\034\002\ufffb\003\022" +
    "\013\027\015\023\017\012\020\031\023\026\027\021\036" +
    "\015\051\033\052\020\055\017\056\025\001\002\000\014" +
    "\003\uff94\011\uff94\044\uff94\045\uff94\071\uff94\001\002\000" +
    "\004\011\326\001\002\000\004\011\312\001\002\000\004" +
    "\076\311\001\002\000\014\003\uff9a\011\uff9a\044\uff9a\045" +
    "\uff9a\071\uff9a\001\002\000\040\002\uffce\003\uffce\013\uffce" +
    "\015\uffce\017\uffce\020\uffce\023\uffce\027\uffce\036\uffce\051" +
    "\uffce\052\uffce\055\uffce\056\uffce\067\uffce\076\uffce\001\002" +
    "\000\014\003\uff93\011\uff93\044\uff93\045\uff93\071\uff93\001" +
    "\002\000\004\011\041\001\002\000\014\003\uff97\011\uff97" +
    "\044\uff97\045\uff97\071\uff97\001\002\000\034\002\ufffb\003" +
    "\022\013\027\015\023\017\012\020\031\023\026\027\021" +
    "\036\015\051\033\052\020\055\017\056\025\001\002\000" +
    "\014\003\uff98\011\uff98\044\uff98\045\uff98\071\uff98\001\002" +
    "\000\034\002\ufffb\003\022\013\027\015\023\017\012\020" +
    "\031\023\026\027\021\036\015\051\033\052\020\055\017" +
    "\056\025\001\002\000\014\003\uff95\011\uff95\044\uff95\045" +
    "\uff95\071\uff95\001\002\000\004\002\000\001\002\000\034" +
    "\002\ufffb\003\022\013\027\015\023\017\012\020\031\023" +
    "\026\027\021\036\015\051\033\052\020\055\017\056\025" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\ufffc\001\002\000\004\075\042\001\002" +
    "\000\034\011\044\013\027\015\023\017\012\020\031\027" +
    "\021\032\043\036\015\051\033\052\020\055\017\056\025" +
    "\076\uffb7\001\002\000\004\011\151\001\002\000\004\114" +
    "\066\001\002\000\004\067\064\001\002\000\034\011\044" +
    "\013\027\015\023\017\012\020\031\027\021\032\043\036" +
    "\015\051\033\052\020\055\017\056\025\076\uffb7\001\002" +
    "\000\004\076\062\001\002\000\004\067\060\001\002\000" +
    "\010\032\043\052\020\076\uffb7\001\002\000\004\076\uffb9" +
    "\001\002\000\006\032\043\076\uffb7\001\002\000\004\076" +
    "\uffbb\001\002\000\004\076\uffbe\001\002\000\004\076\uffb8" +
    "\001\002\000\004\076\uffba\001\002\000\032\011\044\013" +
    "\027\015\023\017\012\020\031\032\043\036\015\051\033" +
    "\052\020\055\017\056\025\076\uffb7\001\002\000\004\076" +
    "\uffbd\001\002\000\034\002\uffc1\003\uffc1\013\uffc1\015\uffc1" +
    "\017\uffc1\020\uffc1\023\uffc1\027\uffc1\036\uffc1\051\uffc1\052" +
    "\uffc1\055\uffc1\056\uffc1\001\002\000\004\076\uffbf\001\002" +
    "\000\032\011\044\013\027\015\023\017\012\020\031\032" +
    "\043\036\015\051\033\052\020\055\017\056\025\076\uffb7" +
    "\001\002\000\004\076\uffbc\001\002\000\022\011\076\012" +
    "\072\053\071\103\101\107\067\111\070\113\073\115\077" +
    "\001\002\000\022\011\076\012\072\053\071\103\101\107" +
    "\067\111\070\113\073\115\077\001\002\000\064\002\uffe0" +
    "\003\uffe0\013\uffe0\015\uffe0\017\uffe0\020\uffe0\023\uffe0\027" +
    "\uffe0\036\uffe0\051\uffe0\052\uffe0\055\uffe0\056\uffe0\066\uffe0" +
    "\067\uffe0\070\uffe0\076\uffe0\102\uffe0\103\uffe0\104\uffe0\105" +
    "\uffe0\106\uffe0\110\uffe0\112\uffe0\114\uffe0\001\002\000\006" +
    "\070\143\107\142\001\002\000\064\002\uffd5\003\uffd5\013" +
    "\uffd5\015\uffd5\017\uffd5\020\uffd5\023\uffd5\027\uffd5\036\uffd5" +
    "\051\uffd5\052\uffd5\055\uffd5\056\uffd5\066\uffd5\067\uffd5\070" +
    "\uffd5\076\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5" +
    "\110\uffd5\112\uffd5\114\uffd5\001\002\000\022\011\076\012" +
    "\072\053\071\103\101\107\067\111\070\113\073\115\077" +
    "\001\002\000\064\002\uffd9\003\uffd9\013\uffd9\015\uffd9\017" +
    "\uffd9\020\uffd9\023\uffd9\027\uffd9\036\uffd9\051\uffd9\052\uffd9" +
    "\055\uffd9\056\uffd9\066\uffd9\067\uffd9\070\uffd9\076\uffd9\102" +
    "\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9\110\uffd9\112\uffd9" +
    "\114\uffd9\001\002\000\064\002\uffd8\003\uffd8\013\uffd8\015" +
    "\uffd8\017\uffd8\020\uffd8\023\uffd8\027\uffd8\036\uffd8\051\uffd8" +
    "\052\uffd8\055\uffd8\056\uffd8\066\uffd8\067\uffd8\070\uffd8\076" +
    "\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8\110\uffd8" +
    "\112\uffd8\114\uffd8\001\002\000\070\002\uffe1\003\uffe1\013" +
    "\uffe1\015\uffe1\017\uffe1\020\uffe1\023\uffe1\027\uffe1\036\uffe1" +
    "\051\uffe1\052\uffe1\055\uffe1\056\uffe1\066\uffe1\067\uffe1\070" +
    "\uffe1\076\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106\uffe1" +
    "\107\122\110\uffe1\112\uffe1\114\uffe1\115\123\001\002\000" +
    "\004\011\121\001\002\000\022\067\uffc7\070\110\102\111" +
    "\103\107\104\105\105\106\106\103\112\104\001\002\000" +
    "\022\011\076\012\072\053\071\103\101\107\067\111\070" +
    "\113\073\115\077\001\002\000\064\002\uffda\003\uffda\013" +
    "\uffda\015\uffda\017\uffda\020\uffda\023\uffda\027\uffda\036\uffda" +
    "\051\uffda\052\uffda\055\uffda\056\uffda\066\uffda\067\uffda\070" +
    "\110\076\uffda\102\uffda\103\uffda\104\105\105\106\106\103" +
    "\110\uffda\112\104\114\uffda\001\002\000\022\011\076\012" +
    "\072\053\071\103\101\107\067\111\070\113\073\115\077" +
    "\001\002\000\022\011\076\012\072\053\071\103\101\107" +
    "\067\111\070\113\073\115\077\001\002\000\022\011\076" +
    "\012\072\053\071\103\101\107\067\111\070\113\073\115" +
    "\077\001\002\000\022\011\076\012\072\053\071\103\101" +
    "\107\067\111\070\113\073\115\077\001\002\000\022\011" +
    "\076\012\072\053\071\103\101\107\067\111\070\113\073" +
    "\115\077\001\002\000\022\011\076\012\072\053\071\103" +
    "\101\107\067\111\070\113\073\115\077\001\002\000\022" +
    "\011\076\012\072\053\071\103\101\107\067\111\070\113" +
    "\073\115\077\001\002\000\064\002\uffdf\003\uffdf\013\uffdf" +
    "\015\uffdf\017\uffdf\020\uffdf\023\uffdf\027\uffdf\036\uffdf\051" +
    "\uffdf\052\uffdf\055\uffdf\056\uffdf\066\uffdf\067\uffdf\070\110" +
    "\076\uffdf\102\uffdf\103\uffdf\104\105\105\106\106\103\110" +
    "\uffdf\112\104\114\uffdf\001\002\000\064\002\uffd6\003\uffd6" +
    "\013\uffd6\015\uffd6\017\uffd6\020\uffd6\023\uffd6\027\uffd6\036" +
    "\uffd6\051\uffd6\052\uffd6\055\uffd6\056\uffd6\066\uffd6\067\uffd6" +
    "\070\uffd6\076\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106" +
    "\uffd6\110\uffd6\112\uffd6\114\uffd6\001\002\000\064\002\uffde" +
    "\003\uffde\013\uffde\015\uffde\017\uffde\020\uffde\023\uffde\027" +
    "\uffde\036\uffde\051\uffde\052\uffde\055\uffde\056\uffde\066\uffde" +
    "\067\uffde\070\110\076\uffde\102\uffde\103\uffde\104\105\105" +
    "\106\106\103\110\uffde\112\104\114\uffde\001\002\000\064" +
    "\002\uffdc\003\uffdc\013\uffdc\015\uffdc\017\uffdc\020\uffdc\023" +
    "\uffdc\027\uffdc\036\uffdc\051\uffdc\052\uffdc\055\uffdc\056\uffdc" +
    "\066\uffdc\067\uffdc\070\110\076\uffdc\102\uffdc\103\uffdc\104" +
    "\uffdc\105\uffdc\106\uffdc\110\uffdc\112\104\114\uffdc\001\002" +
    "\000\064\002\uffdd\003\uffdd\013\uffdd\015\uffdd\017\uffdd\020" +
    "\uffdd\023\uffdd\027\uffdd\036\uffdd\051\uffdd\052\uffdd\055\uffdd" +
    "\056\uffdd\066\uffdd\067\uffdd\070\110\076\uffdd\102\uffdd\103" +
    "\uffdd\104\uffdd\105\uffdd\106\uffdd\110\uffdd\112\104\114\uffdd" +
    "\001\002\000\064\002\uffe4\003\uffe4\013\uffe4\015\uffe4\017" +
    "\uffe4\020\uffe4\023\uffe4\027\uffe4\036\uffe4\051\uffe4\052\uffe4" +
    "\055\uffe4\056\uffe4\066\uffe4\067\uffe4\070\110\076\uffe4\102" +
    "\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4\110\uffe4\112\uffe4" +
    "\114\uffe4\001\002\000\064\002\uffdb\003\uffdb\013\uffdb\015" +
    "\uffdb\017\uffdb\020\uffdb\023\uffdb\027\uffdb\036\uffdb\051\uffdb" +
    "\052\uffdb\055\uffdb\056\uffdb\066\uffdb\067\uffdb\070\110\076" +
    "\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb\110\uffdb" +
    "\112\104\114\uffdb\001\002\000\064\002\uffd4\003\uffd4\013" +
    "\uffd4\015\uffd4\017\uffd4\020\uffd4\023\uffd4\027\uffd4\036\uffd4" +
    "\051\uffd4\052\uffd4\055\uffd4\056\uffd4\066\uffd4\067\uffd4\070" +
    "\uffd4\076\uffd4\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4" +
    "\110\uffd4\112\uffd4\114\uffd4\001\002\000\024\011\076\012" +
    "\072\053\071\103\101\107\067\110\uff9f\111\070\113\073" +
    "\115\077\001\002\000\064\002\uffd3\003\uffd3\013\uffd3\015" +
    "\uffd3\017\uffd3\020\uffd3\023\uffd3\027\uffd3\036\uffd3\051\uffd3" +
    "\052\uffd3\055\uffd3\056\uffd3\066\uffd3\067\uffd3\070\uffd3\076" +
    "\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\110\uffd3" +
    "\112\uffd3\114\uffd3\001\002\000\004\110\140\001\002\000" +
    "\006\066\131\110\uff9c\001\002\000\026\066\131\070\110" +
    "\102\111\103\107\104\105\105\106\106\103\110\uff9c\112" +
    "\104\114\127\001\002\000\022\011\076\012\072\053\071" +
    "\103\101\107\067\111\070\113\073\115\077\001\002\000" +
    "\004\110\uffa1\001\002\000\022\011\076\012\072\053\071" +
    "\103\101\107\067\111\070\113\073\115\077\001\002\000" +
    "\006\066\131\110\uff9c\001\002\000\026\066\131\070\110" +
    "\102\111\103\107\104\105\105\106\106\103\110\uff9c\112" +
    "\104\114\127\001\002\000\004\110\uff9e\001\002\000\004" +
    "\110\uff9d\001\002\000\024\066\uffc6\070\110\102\111\103" +
    "\107\104\105\105\106\106\103\110\uffc6\112\104\001\002" +
    "\000\004\110\uffa0\001\002\000\064\002\uff92\003\uff92\013" +
    "\uff92\015\uff92\017\uff92\020\uff92\023\uff92\027\uff92\036\uff92" +
    "\051\uff92\052\uff92\055\uff92\056\uff92\066\uff92\067\uff92\070" +
    "\uff92\076\uff92\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92" +
    "\110\uff92\112\uff92\114\uff92\001\002\000\064\002\uffe2\003" +
    "\uffe2\013\uffe2\015\uffe2\017\uffe2\020\uffe2\023\uffe2\027\uffe2" +
    "\036\uffe2\051\uffe2\052\uffe2\055\uffe2\056\uffe2\066\uffe2\067" +
    "\uffe2\070\110\076\uffe2\102\111\103\107\104\105\105\106" +
    "\106\103\110\uffe2\112\104\114\uffe2\001\002\000\024\011" +
    "\076\012\072\053\071\103\101\107\067\110\uff9f\111\070" +
    "\113\073\115\077\001\002\000\022\011\076\012\072\053" +
    "\071\103\101\107\067\111\070\113\073\115\077\001\002" +
    "\000\064\002\uffd7\003\uffd7\013\uffd7\015\uffd7\017\uffd7\020" +
    "\uffd7\023\uffd7\027\uffd7\036\uffd7\051\uffd7\052\uffd7\055\uffd7" +
    "\056\uffd7\066\uffd7\067\uffd7\070\uffd7\076\uffd7\102\uffd7\103" +
    "\uffd7\104\uffd7\105\uffd7\106\uffd7\110\uffd7\112\uffd7\114\uffd7" +
    "\001\002\000\004\110\146\001\002\000\064\002\uff91\003" +
    "\uff91\013\uff91\015\uff91\017\uff91\020\uff91\023\uff91\027\uff91" +
    "\036\uff91\051\uff91\052\uff91\055\uff91\056\uff91\066\uff91\067" +
    "\uff91\070\uff91\076\uff91\102\uff91\103\uff91\104\uff91\105\uff91" +
    "\106\uff91\110\uff91\112\uff91\114\uff91\001\002\000\022\070" +
    "\110\102\111\103\107\104\105\105\106\106\103\110\150" +
    "\112\104\001\002\000\064\002\uffe3\003\uffe3\013\uffe3\015" +
    "\uffe3\017\uffe3\020\uffe3\023\uffe3\027\uffe3\036\uffe3\051\uffe3" +
    "\052\uffe3\055\uffe3\056\uffe3\066\uffe3\067\uffe3\070\uffe3\076" +
    "\uffe3\102\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\110\uffe3" +
    "\112\uffe3\114\uffe3\001\002\000\004\107\153\001\002\000" +
    "\020\003\uffa8\037\165\042\166\044\164\045\167\047\uffa8" +
    "\075\uffa8\001\002\000\022\013\027\015\023\017\012\020" +
    "\031\036\015\051\033\055\017\056\025\001\002\000\004" +
    "\011\155\001\002\000\006\066\156\110\157\001\002\000" +
    "\022\013\027\015\023\017\012\020\031\036\015\051\033" +
    "\055\017\056\025\001\002\000\020\003\uffad\037\uffad\042" +
    "\uffad\044\uffad\045\uffad\047\uffad\075\uffad\001\002\000\020" +
    "\003\uffaf\037\uffaf\042\uffaf\044\uffaf\045\uffaf\047\uffaf\075" +
    "\uffaf\001\002\000\004\011\162\001\002\000\006\066\156" +
    "\110\157\001\002\000\020\003\uffae\037\uffae\042\uffae\044" +
    "\uffae\045\uffae\047\uffae\075\uffae\001\002\000\010\003\uffab" +
    "\047\uffab\075\uffab\001\002\000\010\003\uffa9\047\uffa9\075" +
    "\uffa9\001\002\000\010\003\uffac\047\uffac\075\uffac\001\002" +
    "\000\010\003\uffaa\047\uffaa\075\uffaa\001\002\000\010\003" +
    "\uffa6\047\171\075\uffa6\001\002\000\004\107\153\001\002" +
    "\000\006\003\174\075\173\001\002\000\050\003\221\011" +
    "\207\013\027\015\023\016\205\017\012\020\031\022\200" +
    "\025\222\030\201\034\217\036\015\046\220\051\033\053" +
    "\206\055\017\056\025\061\224\076\ufff9\001\002\000\004" +
    "\076\176\001\002\000\006\032\uffb0\076\uffb0\001\002\000" +
    "\006\032\uffa4\076\uffa4\001\002\000\004\076\307\001\002" +
    "\000\004\067\306\001\002\000\004\107\274\001\002\000" +
    "\050\003\ufff5\011\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\022\ufff5\025\ufff5\030\ufff5\034\ufff5\036\ufff5\046" +
    "\ufff5\051\ufff5\053\ufff5\055\ufff5\056\ufff5\061\ufff5\076\ufff5" +
    "\001\002\000\050\003\221\011\207\013\027\015\023\016" +
    "\205\017\012\020\031\022\200\025\222\030\201\034\217" +
    "\036\015\046\220\051\033\053\206\055\017\056\025\061" +
    "\224\076\ufff9\001\002\000\050\003\ufff4\011\ufff4\013\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\022\ufff4\025\ufff4\030" +
    "\ufff4\034\ufff4\036\ufff4\046\ufff4\051\ufff4\053\ufff4\055\ufff4" +
    "\056\ufff4\061\ufff4\076\ufff4\001\002\000\004\067\272\001" +
    "\002\000\004\107\142\001\002\000\006\107\122\114\066" +
    "\001\002\000\050\003\ufff8\011\ufff8\013\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\022\ufff8\025\ufff8\030\ufff8\034\ufff8" +
    "\036\ufff8\046\ufff8\051\ufff8\053\ufff8\055\ufff8\056\ufff8\061" +
    "\ufff8\076\ufff8\001\002\000\004\067\271\001\002\000\004" +
    "\067\270\001\002\000\050\003\ufff3\011\ufff3\013\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\025\ufff3\030\ufff3" +
    "\034\ufff3\036\ufff3\046\ufff3\051\ufff3\053\ufff3\055\ufff3\056" +
    "\ufff3\061\ufff3\076\ufff3\001\002\000\004\067\267\001\002" +
    "\000\050\003\ufff7\011\ufff7\013\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\022\ufff7\025\ufff7\030\ufff7\034\ufff7\036\ufff7" +
    "\046\ufff7\051\ufff7\053\ufff7\055\ufff7\056\ufff7\061\ufff7\076" +
    "\ufff7\001\002\000\004\073\262\001\002\000\004\107\247" +
    "\001\002\000\004\011\245\001\002\000\006\067\244\076" +
    "\243\001\002\000\004\075\234\001\002\000\004\067\233" +
    "\001\002\000\004\107\225\001\002\000\002\001\002\000" +
    "\004\110\227\001\002\000\004\075\230\001\002\000\050" +
    "\003\221\011\207\013\027\015\023\016\205\017\012\020" +
    "\031\022\200\025\222\030\201\034\217\036\015\046\220" +
    "\051\033\053\206\055\017\056\025\061\224\076\ufff9\001" +
    "\002\000\004\076\232\001\002\000\050\003\uffe8\011\uffe8" +
    "\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\025" +
    "\uffe8\030\uffe8\034\uffe8\036\uffe8\046\uffe8\051\uffe8\053\uffe8" +
    "\055\uffe8\056\uffe8\061\uffe8\076\uffe8\001\002\000\050\003" +
    "\ufff2\011\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\022\ufff2\025\ufff2\030\ufff2\034\ufff2\036\ufff2\046\ufff2\051" +
    "\ufff2\053\ufff2\055\ufff2\056\ufff2\061\ufff2\076\ufff2\001\002" +
    "\000\050\003\221\011\207\013\027\015\023\016\205\017" +
    "\012\020\031\022\200\025\222\030\201\034\217\036\015" +
    "\046\220\051\033\053\206\055\017\056\025\061\224\076" +
    "\ufff9\001\002\000\004\076\236\001\002\000\004\061\237" +
    "\001\002\000\004\107\240\001\002\000\002\001\002\000" +
    "\004\110\242\001\002\000\004\067\uffe7\001\002\000\050" +
    "\003\uffec\011\uffec\013\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\022\uffec\025\uffec\030\uffec\034\uffec\036\uffec\046\uffec" +
    "\051\uffec\053\uffec\055\uffec\056\uffec\061\uffec\076\uffec\001" +
    "\002\000\050\003\uffed\011\uffed\013\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\022\uffed\025\uffed\030\uffed\034\uffed\036" +
    "\uffed\046\uffed\051\uffed\053\uffed\055\uffed\056\uffed\061\uffed" +
    "\076\uffed\001\002\000\052\003\uffa2\011\uffa2\013\uffa2\015" +
    "\uffa2\016\uffa2\017\uffa2\020\uffa2\022\uffa2\025\uffa2\030\uffa2" +
    "\034\uffa2\036\uffa2\046\uffa2\051\uffa2\053\uffa2\055\uffa2\056" +
    "\uffa2\061\uffa2\067\246\076\uffa2\001\002\000\050\003\uffa3" +
    "\011\uffa3\013\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\022" +
    "\uffa3\025\uffa3\030\uffa3\034\uffa3\036\uffa3\046\uffa3\051\uffa3" +
    "\053\uffa3\055\uffa3\056\uffa3\061\uffa3\076\uffa3\001\002\000" +
    "\022\011\076\012\072\053\071\103\101\107\067\111\070" +
    "\113\073\115\077\001\002\000\022\070\110\102\111\103" +
    "\107\104\105\105\106\106\103\110\251\112\104\001\002" +
    "\000\004\075\252\001\002\000\050\003\221\011\207\013" +
    "\027\015\023\016\205\017\012\020\031\022\200\025\222" +
    "\030\201\034\217\036\015\046\220\051\033\053\206\055" +
    "\017\056\025\061\224\076\ufff9\001\002\000\004\076\254" +
    "\001\002\000\052\003\uffeb\011\uffeb\013\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\022\uffeb\025\uffeb\026\256\030\uffeb" +
    "\034\uffeb\036\uffeb\046\uffeb\051\uffeb\053\uffeb\055\uffeb\056" +
    "\uffeb\061\uffeb\076\uffeb\001\002\000\050\003\uffea\011\uffea" +
    "\013\uffea\015\uffea\016\uffea\017\uffea\020\uffea\022\uffea\025" +
    "\uffea\030\uffea\034\uffea\036\uffea\046\uffea\051\uffea\053\uffea" +
    "\055\uffea\056\uffea\061\uffea\076\uffea\001\002\000\004\075" +
    "\257\001\002\000\050\003\221\011\207\013\027\015\023" +
    "\016\205\017\012\020\031\022\200\025\222\030\201\034" +
    "\217\036\015\046\220\051\033\053\206\055\017\056\025" +
    "\061\224\076\ufff9\001\002\000\004\076\261\001\002\000" +
    "\050\003\uffe9\011\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\022\uffe9\025\uffe9\030\uffe9\034\uffe9\036\uffe9\046" +
    "\uffe9\051\uffe9\053\uffe9\055\uffe9\056\uffe9\061\uffe9\076\uffe9" +
    "\001\002\000\002\001\002\000\004\074\264\001\002\000" +
    "\002\001\002\000\004\067\266\001\002\000\050\003\uffe5" +
    "\011\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022" +
    "\uffe5\025\uffe5\030\uffe5\034\uffe5\036\uffe5\046\uffe5\051\uffe5" +
    "\053\uffe5\055\uffe5\056\uffe5\061\uffe5\076\uffe5\001\002\000" +
    "\050\003\ufff6\011\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\022\ufff6\025\ufff6\030\ufff6\034\ufff6\036\ufff6\046" +
    "\ufff6\051\ufff6\053\ufff6\055\ufff6\056\ufff6\061\ufff6\076\ufff6" +
    "\001\002\000\050\003\ufff0\011\ufff0\013\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\022\ufff0\025\ufff0\030\ufff0\034\ufff0" +
    "\036\ufff0\046\ufff0\051\ufff0\053\ufff0\055\ufff0\056\ufff0\061" +
    "\ufff0\076\ufff0\001\002\000\050\003\ufff1\011\ufff1\013\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\022\ufff1\025\ufff1\030" +
    "\ufff1\034\ufff1\036\ufff1\046\ufff1\051\ufff1\053\ufff1\055\ufff1" +
    "\056\ufff1\061\ufff1\076\ufff1\001\002\000\050\003\uffef\011" +
    "\uffef\013\uffef\015\uffef\016\uffef\017\uffef\020\uffef\022\uffef" +
    "\025\uffef\030\uffef\034\uffef\036\uffef\046\uffef\051\uffef\053" +
    "\uffef\055\uffef\056\uffef\061\uffef\076\uffef\001\002\000\004" +
    "\076\ufffa\001\002\000\022\013\027\015\023\017\012\020" +
    "\031\036\015\051\033\055\017\056\025\001\002\000\002" +
    "\001\002\000\004\067\277\001\002\000\006\011\301\115" +
    "\077\001\002\000\004\110\302\001\002\000\004\115\123" +
    "\001\002\000\004\075\303\001\002\000\050\003\221\011" +
    "\207\013\027\015\023\016\205\017\012\020\031\022\200" +
    "\025\222\030\201\034\217\036\015\046\220\051\033\053" +
    "\206\055\017\056\025\061\224\076\ufff9\001\002\000\004" +
    "\076\305\001\002\000\050\003\uffe6\011\uffe6\013\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\022\uffe6\025\uffe6\030\uffe6" +
    "\034\uffe6\036\uffe6\046\uffe6\051\uffe6\053\uffe6\055\uffe6\056" +
    "\uffe6\061\uffe6\076\uffe6\001\002\000\050\003\uffee\011\uffee" +
    "\013\uffee\015\uffee\016\uffee\017\uffee\020\uffee\022\uffee\025" +
    "\uffee\030\uffee\034\uffee\036\uffee\046\uffee\051\uffee\053\uffee" +
    "\055\uffee\056\uffee\061\uffee\076\uffee\001\002\000\006\032" +
    "\uffa5\076\uffa5\001\002\000\006\003\uffa7\075\uffa7\001\002" +
    "\000\034\002\uffc0\003\uffc0\013\uffc0\015\uffc0\017\uffc0\020" +
    "\uffc0\023\uffc0\027\uffc0\036\uffc0\051\uffc0\052\uffc0\055\uffc0" +
    "\056\uffc0\001\002\000\006\003\314\075\313\001\002\000" +
    "\004\011\317\001\002\000\004\076\316\001\002\000\042" +
    "\002\uffb6\003\uffb6\011\uffb6\013\uffb6\015\uffb6\017\uffb6\020" +
    "\uffb6\023\uffb6\027\uffb6\032\uffb6\036\uffb6\051\uffb6\052\uffb6" +
    "\055\uffb6\056\uffb6\076\uffb6\001\002\000\042\002\uffb4\003" +
    "\uffb4\011\uffb4\013\uffb4\015\uffb4\017\uffb4\020\uffb4\023\uffb4" +
    "\027\uffb4\032\uffb4\036\uffb4\051\uffb4\052\uffb4\055\uffb4\056" +
    "\uffb4\076\uffb4\001\002\000\006\066\321\076\uffb2\001\002" +
    "\000\004\076\325\001\002\000\004\011\323\001\002\000" +
    "\004\076\uffb3\001\002\000\006\066\321\076\uffb2\001\002" +
    "\000\004\076\uffb1\001\002\000\042\002\uffb5\003\uffb5\011" +
    "\uffb5\013\uffb5\015\uffb5\017\uffb5\020\uffb5\023\uffb5\027\uffb5" +
    "\032\uffb5\036\uffb5\051\uffb5\052\uffb5\055\uffb5\056\uffb5\076" +
    "\uffb5\001\002\000\004\075\330\001\002\000\040\002\uffd2" +
    "\003\uffd2\013\uffd2\015\uffd2\017\uffd2\020\uffd2\023\uffd2\027" +
    "\uffd2\032\uffd2\036\uffd2\051\uffd2\052\uffd2\055\uffd2\056\uffd2" +
    "\076\uffd2\001\002\000\022\013\027\015\023\017\012\020" +
    "\031\036\015\051\033\055\017\056\025\001\002\000\004" +
    "\076\332\001\002\000\004\067\333\001\002\000\040\002" +
    "\uffd1\003\uffd1\013\uffd1\015\uffd1\017\uffd1\020\uffd1\023\uffd1" +
    "\027\uffd1\032\uffd1\036\uffd1\051\uffd1\052\uffd1\055\uffd1\056" +
    "\uffd1\076\uffd1\001\002\000\004\002\ufffd\001\002\000\004" +
    "\011\uffc5\001\002\000\004\072\352\001\002\000\004\067" +
    "\351\001\002\000\004\011\342\001\002\000\004\011\uffc4" +
    "\001\002\000\044\002\uffcc\003\uffcc\013\uffcc\015\uffcc\017" +
    "\uffcc\020\uffcc\023\uffcc\027\uffcc\036\uffcc\051\uffcc\052\uffcc" +
    "\055\uffcc\056\uffcc\066\344\067\uffcc\076\uffcc\114\343\001" +
    "\002\000\022\011\076\012\072\053\071\103\101\107\067" +
    "\111\070\113\073\115\077\001\002\000\004\011\346\001" +
    "\002\000\040\002\uffd0\003\uffd0\013\uffd0\015\uffd0\017\uffd0" +
    "\020\uffd0\023\uffd0\027\uffd0\036\uffd0\051\uffd0\052\uffd0\055" +
    "\uffd0\056\uffd0\067\uffd0\076\uffd0\001\002\000\042\002\uffcc" +
    "\003\uffcc\013\uffcc\015\uffcc\017\uffcc\020\uffcc\023\uffcc\027" +
    "\uffcc\036\uffcc\051\uffcc\052\uffcc\055\uffcc\056\uffcc\066\344" +
    "\067\uffcc\076\uffcc\001\002\000\040\002\uffcd\003\uffcd\013" +
    "\uffcd\015\uffcd\017\uffcd\020\uffcd\023\uffcd\027\uffcd\036\uffcd" +
    "\051\uffcd\052\uffcd\055\uffcd\056\uffcd\067\uffcd\076\uffcd\001" +
    "\002\000\056\002\uffcf\003\uffcf\013\uffcf\015\uffcf\017\uffcf" +
    "\020\uffcf\023\uffcf\027\uffcf\036\uffcf\051\uffcf\052\uffcf\055" +
    "\uffcf\056\uffcf\067\uffcf\070\110\076\uffcf\102\111\103\107" +
    "\104\105\105\106\106\103\112\104\001\002\000\004\011" +
    "\uffc3\001\002\000\004\011\353\001\002\000\044\002\uffc8" +
    "\003\uffc8\013\uffc8\015\uffc8\017\uffc8\020\uffc8\023\uffc8\027" +
    "\uffc8\036\uffc8\051\uffc8\052\uffc8\055\uffc8\056\uffc8\066\355" +
    "\067\uffc8\076\uffc8\114\354\001\002\000\022\011\076\012" +
    "\072\053\071\103\101\107\067\111\070\113\073\115\077" +
    "\001\002\000\004\011\357\001\002\000\040\002\uffcb\003" +
    "\uffcb\013\uffcb\015\uffcb\017\uffcb\020\uffcb\023\uffcb\027\uffcb" +
    "\036\uffcb\051\uffcb\052\uffcb\055\uffcb\056\uffcb\067\uffcb\076" +
    "\uffcb\001\002\000\042\002\uffc8\003\uffc8\013\uffc8\015\uffc8" +
    "\017\uffc8\020\uffc8\023\uffc8\027\uffc8\036\uffc8\051\uffc8\052" +
    "\uffc8\055\uffc8\056\uffc8\066\355\067\uffc8\076\uffc8\001\002" +
    "\000\040\002\uffc9\003\uffc9\013\uffc9\015\uffc9\017\uffc9\020" +
    "\uffc9\023\uffc9\027\uffc9\036\uffc9\051\uffc9\052\uffc9\055\uffc9" +
    "\056\uffc9\067\uffc9\076\uffc9\001\002\000\056\002\uffca\003" +
    "\uffca\013\uffca\015\uffca\017\uffca\020\uffca\023\uffca\027\uffca" +
    "\036\uffca\051\uffca\052\uffca\055\uffca\056\uffca\067\uffca\070" +
    "\110\076\uffca\102\111\103\107\104\105\105\106\106\103" +
    "\112\104\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\033\025\031\027\027\050\013\051" +
    "\012\052\023\054\015\060\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\337\001\001\000\002\001" +
    "\001\000\022\003\333\025\031\027\027\050\013\051\012" +
    "\052\023\054\015\060\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\037\025\031\027\027" +
    "\050\013\051\012\052\023\054\015\060\034\001\001\000" +
    "\002\001\001\000\022\003\036\025\031\027\027\050\013" +
    "\051\012\052\023\054\015\060\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\035\025\031\027\027" +
    "\050\013\051\012\052\023\054\015\060\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\025\050\027\047\032\052\044\044\050" +
    "\013\051\012\052\023\054\045\061\046\062\054\063\053" +
    "\064\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\025\050\027\047\032\052\044\044" +
    "\050\013\051\012\052\023\054\045\061\062\062\054\063" +
    "\053\064\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\050\032\052\063\056\064\051\001\001\000" +
    "\002\001\001\000\006\032\052\064\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\025\050\027\047\032\052\044\044\050\013" +
    "\051\012\052\023\062\060\063\053\064\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\025\050\027\047\032\052\044\044\050\013\051\012\052" +
    "\023\062\064\063\053\064\051\001\001\000\002\001\001" +
    "\000\010\021\073\022\077\042\074\001\001\000\010\021" +
    "\073\022\146\042\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\073\022\140\042" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\073\022\101\042\074\001\001\000\002\001\001\000\010" +
    "\021\073\022\117\042\074\001\001\000\010\021\073\022" +
    "\116\042\074\001\001\000\010\021\073\022\115\042\074" +
    "\001\001\000\010\021\073\022\114\042\074\001\001\000" +
    "\010\021\073\022\113\042\074\001\001\000\010\021\073" +
    "\022\112\042\074\001\001\000\010\021\073\022\111\042" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\073" +
    "\022\125\042\074\043\123\045\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\136\001\001\000\004" +
    "\031\127\001\001\000\010\021\073\022\135\042\074\001" +
    "\001\000\002\001\001\000\012\021\073\022\132\042\074" +
    "\045\131\001\001\000\004\031\134\001\001\000\004\031" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\073\022\125\042\074\043\144\045\124" +
    "\001\001\000\010\021\073\022\143\042\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\151\001\001\000" +
    "\004\035\167\001\001\000\006\050\153\051\012\001\001" +
    "\000\002\001\001\000\004\034\157\001\001\000\006\050" +
    "\160\051\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\171\001\001\000\004\033" +
    "\307\001\001\000\004\037\174\001\001\000\040\005\202" +
    "\010\207\012\214\013\213\014\201\015\212\017\215\027" +
    "\222\041\203\042\211\044\210\050\013\051\012\052\023" +
    "\065\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\202\010\207\012" +
    "\214\013\213\014\201\015\212\017\215\027\222\041\203" +
    "\042\211\044\210\050\013\051\012\052\023\065\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\005\202\010\207\012\214" +
    "\013\213\014\201\015\212\017\215\027\222\041\203\042" +
    "\211\044\210\050\013\051\012\052\023\065\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\005\202\010\207\012\214\013\213\014\201\015\212" +
    "\017\215\027\222\041\203\042\211\044\210\050\013\051" +
    "\012\052\023\065\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\073\022\247\042\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\202\010\207\012\214\013\213\014" +
    "\201\015\212\017\215\027\222\041\203\042\211\044\210" +
    "\050\013\051\012\052\023\065\252\001\001\000\002\001" +
    "\001\000\004\011\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\202\010\207\012\214\013\213\014" +
    "\201\015\212\017\215\027\222\041\203\042\211\044\210" +
    "\050\013\051\012\052\023\065\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\262\001\001\000\002" +
    "\001\001\000\004\020\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\274\050\013\051\012\052\023\001\001\000\004\017\275" +
    "\001\001\000\002\001\001\000\004\021\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\005\202\010\207\012\214\013\213\014\201\015\212\017" +
    "\215\027\222\041\203\042\211\044\210\050\013\051\012" +
    "\052\023\065\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\317\001\001\000\002\001\001\000\004\057" +
    "\321\001\001\000\002\001\001\000\004\056\323\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\326\001" +
    "\001\000\002\001\001\000\012\027\330\050\013\051\012" +
    "\052\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\344\001\001\000\010\021\073\022\347" +
    "\042\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\346\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\355\001" +
    "\001\000\010\021\073\022\360\042\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\357\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static ArrayList<String> erroresEspec = new ArrayList<String>();
    public static boolean fatalError = false;
    public static boolean specError = false;
    public static Symbol fatalErrorSym;
    public static String specErrorDetail = "";

    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public static void informar_Error_Especifico(String tipoError){
        String specErrorStr = "ERROR: "+tipoError;
        specErrorDetail = specErrorStr;
        erroresEspec.add(specErrorStr);
        specError = true;

        System.err.println(specErrorStr);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNCCALL ::= This ParentAbre PARAMFUNC ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMFUNCFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAMFUNCFILA ::= Coma ASIGVARIABLEFUN PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMFUNCFILA ::= Coma EXPRESION PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMFUNC ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMFUNC ::= ASIGVARIABLEFUN PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMFUNC ::= EXPRESION PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_RETURN ::= Return Identificador 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Return de función sin punto y coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_RETURN ::= Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCIONCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCIONCONTEN ::= LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNCIONRETURNS ::= Returns FUNCIONATRIB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNATRIBDOS ::= ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ENUMCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTRACTPART3 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTRACTPART2 ::= CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTRACTPART1 ::= CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONTRACTPART1 ::= ASIGVARIABLE PuntoComa CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONTRACTPART1 ::= DECLARVARIABLE PuntoComa CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTRACTPART ::= CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTRACTDEF ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ACCESSMOD ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGVARIABLEFUN ::= EXPRESION Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLEFUN",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGVARIABLE ::= Identificador Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARRAYDECLARFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARRAYDECLARFILA ::= Coma Identificador ARRAYDECLARFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador ARRAYDECLARFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARVARIABLEFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARVARIABLEFILA ::= Coma Identificador DECLARVARIABLEFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador DECLARVARIABLEFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRUCTCONTEN ::= LlaveAbre DECLARVARIABLE LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRUCTDEF ::= Struct Identificador STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_INCREMENTAL ::= Identificador Op_Incremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_INCREMENTAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_INCREMENTAL ::= Op_Incremental Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_INCREMENTAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION Punto EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= This Punto EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION_INCREMENTAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION Mod EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION Div EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION Mult EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= Not EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= ParentAbre EXPRESION ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_TERNARIA ::= EXPRESION_BOOLEANA SignoPregunta EXPRESION_ARITMETICA DosPuntos EXPRESION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_TERNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_FOR ::= For ParentAbre DECLARVARIABLE EXPRESION_BOOLEANA PuntoComa EXPRESION_INCREMENTAL ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra While ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_WHILE ::= While ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_ELSE ::= Else LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_IF ::= If ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra SENTENCIA_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_IF ::= If ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FUNCCALL PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ASIGVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DECLARVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_TERNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_SENTENCIAPRIMA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIODOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIODOS ::= DECLARVARIABLE INICIODOS 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Declaración fuera de función"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIODOS ::= ENUMDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIODOS ::= CONTRACTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIODOS ::= STRUCTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Version PuntoComa INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

