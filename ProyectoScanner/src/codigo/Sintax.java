
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 15 13:33:59 CST 2020
//----------------------------------------------------

package codigo;

import java.io.InputStreamReader;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.parser;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 15 13:33:59 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\002\000\002\065\004\000\002\065\002\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\066\004\000\002\066\002\000\002" +
    "\067\003\000\002\067\003\000\002\067\004\000\002\067" +
    "\003\000\002\067\003\000\002\067\004\000\002\067\004" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\067\004\000\002\067\004\000\002\067\004\000\002" +
    "\010\011\000\002\010\012\000\002\011\006\000\002\012" +
    "\011\000\002\013\012\000\002\014\015\000\002\014\015" +
    "\000\002\015\007\000\002\022\005\000\002\022\005\000" +
    "\002\022\004\000\002\022\003\000\002\022\003\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\004\000\002\022\003" +
    "\000\002\022\003\000\002\022\005\000\002\022\005\000" +
    "\002\022\003\000\002\022\004\000\002\022\004\000\002" +
    "\022\003\000\002\025\007\000\002\026\005\000\002\026" +
    "\005\000\002\026\002\000\002\071\002\000\002\027\007" +
    "\000\002\072\002\000\002\027\010\000\002\027\003\000" +
    "\002\027\005\000\002\073\002\000\002\046\006\000\002" +
    "\046\002\000\002\052\007\000\002\052\010\000\002\047" +
    "\005\000\002\047\002\000\002\074\002\000\002\044\006" +
    "\000\002\045\005\000\002\053\003\000\002\053\003\000" +
    "\002\053\004\000\002\053\002\000\002\060\007\000\002" +
    "\060\004\000\002\061\004\000\002\061\003\000\002\075" +
    "\002\000\002\062\006\000\002\062\005\000\002\076\002" +
    "\000\002\062\004\000\002\063\004\000\002\063\003\000" +
    "\002\064\004\000\002\064\002\000\002\054\005\000\002" +
    "\055\006\000\002\055\004\000\002\056\004\000\002\056" +
    "\002\000\002\057\004\000\002\032\010\000\002\077\002" +
    "\000\002\100\002\000\002\033\011\000\002\033\004\000" +
    "\002\033\004\000\002\101\002\000\002\034\007\000\002" +
    "\034\002\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\002\000\002\102\002" +
    "\000\002\036\005\000\002\036\002\000\002\103\002\000" +
    "\002\104\002\000\002\037\007\000\002\037\004\000\002" +
    "\037\004\000\002\070\005\000\002\070\003\000\002\105" +
    "\002\000\002\041\006\000\002\041\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\002\000\002\031\005\000" +
    "\002\031\005\000\002\031\002\000\002\050\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\042\006\000\002\042\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\004\043\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\004\067\011\001\002\000" +
    "\034\002\ufffb\003\022\013\027\015\023\017\012\020\031" +
    "\023\026\027\021\036\015\051\033\052\020\055\016\056" +
    "\025\001\002\000\014\003\uff72\011\uff72\044\uff72\045\uff72" +
    "\071\uff72\001\002\000\014\003\uff74\011\uff74\044\uff74\045" +
    "\uff74\071\uff74\001\002\000\014\003\u0116\011\uffa9\044\u0114" +
    "\045\u0118\071\u0115\001\002\000\014\003\uff6f\011\uff6f\044" +
    "\uff6f\045\uff6f\071\uff6f\001\002\000\014\003\uff6d\011\uff6d" +
    "\044\uff6d\045\uff6d\071\uff6d\001\002\000\034\002\ufffb\003" +
    "\022\013\027\015\023\017\012\020\031\023\026\027\021" +
    "\036\015\051\033\052\020\055\016\056\025\001\002\000" +
    "\004\011\u0109\001\002\000\004\011\375\001\002\000\004" +
    "\076\374\001\002\000\014\003\uff73\011\uff73\044\uff73\045" +
    "\uff73\071\uff73\001\002\000\004\067\uffb8\001\002\000\014" +
    "\003\uff6c\011\uff6c\044\uff6c\045\uff6c\071\uff6c\001\002\000" +
    "\004\011\042\001\002\000\014\003\uff70\011\uff70\044\uff70" +
    "\045\uff70\071\uff70\001\002\000\004\067\040\001\002\000" +
    "\014\003\uff71\011\uff71\044\uff71\045\uff71\071\uff71\001\002" +
    "\000\034\002\ufffb\003\022\013\027\015\023\017\012\020" +
    "\031\023\026\027\021\036\015\051\033\052\020\055\016" +
    "\056\025\001\002\000\014\003\uff6e\011\uff6e\044\uff6e\045" +
    "\uff6e\071\uff6e\001\002\000\004\002\000\001\002\000\034" +
    "\002\ufffb\003\022\013\027\015\023\017\012\020\031\023" +
    "\026\027\021\036\015\051\033\052\020\055\016\056\025" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\uffff\001" +
    "\002\000\034\002\ufffb\003\022\013\027\015\023\017\012" +
    "\020\031\023\026\027\021\036\015\051\033\052\020\055" +
    "\016\056\025\001\002\000\004\002\ufffc\001\002\000\004" +
    "\075\043\001\002\000\034\011\050\013\uffa4\015\uffa4\017" +
    "\uffa4\020\uffa4\027\021\032\uffa1\036\uffa4\051\uffa4\052\uffa1" +
    "\055\uffa4\056\uffa4\076\uffa1\001\002\000\004\076\373\001" +
    "\002\000\004\067\371\001\002\000\034\011\050\013\uffa4" +
    "\015\uffa4\017\uffa4\020\uffa4\027\021\032\uffa1\036\uffa4\051" +
    "\uffa4\052\uffa1\055\uffa4\056\uffa4\076\uffa1\001\002\000\004" +
    "\076\uffa5\001\002\000\004\114\uffaf\001\002\000\010\032" +
    "\056\052\020\076\uff9c\001\002\000\022\013\027\015\023" +
    "\017\012\020\031\036\015\051\033\055\016\056\025\001" +
    "\002\000\004\067\054\001\002\000\032\011\050\013\uffa4" +
    "\015\uffa4\017\uffa4\020\uffa4\032\uffa1\036\uffa4\051\uffa4\052" +
    "\uffa1\055\uffa4\056\uffa4\076\uffa1\001\002\000\004\076\uffa3" +
    "\001\002\000\004\011\065\001\002\000\006\032\056\076" +
    "\uff9c\001\002\000\004\076\uff9e\001\002\000\010\032\056" +
    "\052\020\076\uff9c\001\002\000\004\076\uffa0\001\002\000" +
    "\004\076\uff9f\001\002\000\004\076\uff9d\001\002\000\006" +
    "\003\066\107\070\001\002\000\004\110\367\001\002\000" +
    "\020\003\uff88\037\107\042\106\044\105\045\110\047\uff88" +
    "\075\uff88\001\002\000\024\013\uff94\015\uff94\017\uff94\020" +
    "\uff94\036\uff94\051\uff94\055\uff94\056\uff94\110\071\001\002" +
    "\000\020\003\uff91\037\uff91\042\uff91\044\uff91\045\uff91\047" +
    "\uff91\075\uff91\001\002\000\022\013\027\015\023\017\012" +
    "\020\031\036\015\051\033\055\016\056\025\001\002\000" +
    "\004\011\074\001\002\000\006\066\075\110\uff8d\001\002" +
    "\000\022\013\027\015\023\017\012\020\031\036\015\051" +
    "\033\055\016\056\025\001\002\000\004\110\uff93\001\002" +
    "\000\004\110\100\001\002\000\020\003\uff92\037\uff92\042" +
    "\uff92\044\uff92\045\uff92\047\uff92\075\uff92\001\002\000\004" +
    "\011\102\001\002\000\006\066\uff8f\110\uff8f\001\002\000" +
    "\006\066\075\110\uff8d\001\002\000\004\110\uff8e\001\002" +
    "\000\010\003\uff8b\047\uff8b\075\uff8b\001\002\000\010\003" +
    "\uff8c\047\uff8c\075\uff8c\001\002\000\010\003\uff89\047\uff89" +
    "\075\uff89\001\002\000\010\003\uff8a\047\uff8a\075\uff8a\001" +
    "\002\000\010\003\uff85\047\112\075\uff85\001\002\000\006" +
    "\003\uff87\107\uff87\001\002\000\006\003\115\075\114\001" +
    "\002\000\064\003\uff84\011\uff84\012\uff84\013\uff84\015\uff84" +
    "\016\uff84\017\uff84\020\uff84\022\uff84\025\uff84\030\uff84\034" +
    "\uff84\036\uff84\046\uff84\051\uff84\053\uff84\055\uff84\056\uff84" +
    "\061\uff84\076\uff84\103\uff84\107\uff84\111\uff84\113\uff84\115" +
    "\uff84\001\002\000\006\067\120\076\117\001\002\000\006" +
    "\032\uff95\076\uff95\001\002\000\006\032\uff81\076\uff81\001" +
    "\002\000\006\032\uff80\076\uff80\001\002\000\064\003\142" +
    "\011\150\012\124\013\027\015\023\016\130\017\012\020" +
    "\031\022\147\025\145\030\140\034\125\036\015\046\133" +
    "\051\033\053\156\055\016\056\025\061\135\076\uffe9\103" +
    "\152\107\127\111\144\113\141\115\155\001\002\000\044" +
    "\003\142\011\150\012\124\016\130\022\147\025\145\030" +
    "\140\034\125\046\133\053\156\061\135\076\uffe9\103\152" +
    "\107\127\111\144\113\141\115\155\001\002\000\004\076" +
    "\uff7e\001\002\000\034\066\uffc4\067\uffc4\070\uffc4\073\uffc4" +
    "\074\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\110" +
    "\uffc4\112\uffc4\114\uffc4\001\002\000\004\107\351\001\002" +
    "\000\044\003\uffe8\011\uffe8\012\uffe8\016\uffe8\022\uffe8\025" +
    "\uffe8\030\uffe8\034\uffe8\046\uffe8\053\uffe8\061\uffe8\076\uffe8" +
    "\103\uffe8\107\uffe8\111\uffe8\113\uffe8\115\uffe8\001\002\000" +
    "\022\011\165\012\124\053\156\103\152\107\127\111\144" +
    "\113\141\115\155\001\002\000\004\067\346\001\002\000" +
    "\004\067\345\001\002\000\004\076\uff83\001\002\000\004" +
    "\011\340\001\002\000\004\067\337\001\002\000\004\107" +
    "\331\001\002\000\004\067\327\001\002\000\024\067\326" +
    "\070\uffc1\073\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106" +
    "\uffc1\112\uffc1\001\002\000\004\107\303\001\002\000\022" +
    "\011\165\012\124\053\156\103\152\107\127\111\144\113" +
    "\141\115\155\001\002\000\010\067\301\076\277\110\300" +
    "\001\002\000\044\003\uffe7\011\uffe7\012\uffe7\016\uffe7\022" +
    "\uffe7\025\uffe7\030\uffe7\034\uffe7\046\uffe7\053\uffe7\061\uffe7" +
    "\076\uffe7\103\uffe7\107\uffe7\111\uffe7\113\uffe7\115\uffe7\001" +
    "\002\000\034\066\uffcf\067\uffcf\070\uffcf\073\uffcf\074\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\110\uffcf\112" +
    "\uffcf\114\uffcf\001\002\000\004\075\240\001\002\000\044" +
    "\003\uffe5\011\uffe5\012\uffe5\016\uffe5\022\uffe5\025\uffe5\030" +
    "\uffe5\034\uffe5\046\uffe5\053\uffe5\061\uffe5\076\uffe5\103\uffe5" +
    "\107\uffe5\111\uffe5\113\uffe5\115\uffe5\001\002\000\004\067" +
    "\237\001\002\000\030\070\uffd0\073\uffd0\102\uffd0\103\uffd0" +
    "\104\uffd0\105\uffd0\106\uffd0\107\211\112\uffd0\114\uffaf\115" +
    "\212\001\002\000\044\003\uffe4\011\uffe4\012\uffe4\016\uffe4" +
    "\022\uffe4\025\uffe4\030\uffe4\034\uffe4\046\uffe4\053\uffe4\061" +
    "\uffe4\076\uffe4\103\uffe4\107\uffe4\111\uffe4\113\uffe4\115\uffe4" +
    "\001\002\000\022\011\165\012\124\053\156\103\152\107" +
    "\127\111\144\113\141\115\155\001\002\000\034\066\uffc8" +
    "\067\uffc8\070\uffc8\073\uffc8\074\uffc8\102\uffc8\103\uffc8\104" +
    "\uffc8\105\uffc8\106\uffc8\110\uffc8\112\uffc8\114\uffc8\001\002" +
    "\000\022\070\175\073\172\102\176\103\173\104\171\105" +
    "\174\106\167\112\170\001\002\000\004\011\232\001\002" +
    "\000\006\070\162\107\161\001\002\000\024\067\160\070" +
    "\uffc7\073\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7" +
    "\112\uffc7\001\002\000\044\003\uffe1\011\uffe1\012\uffe1\016" +
    "\uffe1\022\uffe1\025\uffe1\030\uffe1\034\uffe1\046\uffe1\053\uffe1" +
    "\061\uffe1\076\uffe1\103\uffe1\107\uffe1\111\uffe1\113\uffe1\115" +
    "\uffe1\001\002\000\024\011\165\012\124\053\156\103\152" +
    "\107\127\110\uff78\111\144\113\141\115\155\001\002\000" +
    "\022\011\165\012\124\053\156\103\152\107\127\111\144" +
    "\113\141\115\155\001\002\000\034\066\uffc1\067\uffc1\070" +
    "\uffc1\073\uffc1\074\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1" +
    "\106\uffc1\110\uffc1\112\uffc1\114\uffc1\001\002\000\034\066" +
    "\uffc7\067\uffc7\070\uffc7\073\uffc7\074\uffc7\102\uffc7\103\uffc7" +
    "\104\uffc7\105\uffc7\106\uffc7\110\uffc7\112\uffc7\114\uffc7\001" +
    "\002\000\040\066\uffd0\067\uffd0\070\uffd0\073\uffd0\074\uffd0" +
    "\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0\107\211\110" +
    "\uffd0\112\uffd0\114\uffd0\115\212\001\002\000\034\066\uffc6" +
    "\067\uffc6\070\uffc6\073\172\074\uffc6\102\uffc6\103\uffc6\104" +
    "\uffc6\105\uffc6\106\uffc6\110\uffc6\112\uffc6\114\uffc6\001\002" +
    "\000\022\011\165\012\124\053\156\103\152\107\127\111" +
    "\144\113\141\115\155\001\002\000\022\011\165\012\124" +
    "\053\156\103\152\107\127\111\144\113\141\115\155\001" +
    "\002\000\022\011\165\012\124\053\156\103\152\107\127" +
    "\111\144\113\141\115\155\001\002\000\022\011\165\012" +
    "\124\053\156\103\152\107\127\111\144\113\141\115\155" +
    "\001\002\000\022\011\165\012\124\053\156\103\152\107" +
    "\127\111\144\113\141\115\155\001\002\000\022\011\165" +
    "\012\124\053\156\103\152\107\127\111\144\113\141\115" +
    "\155\001\002\000\022\011\165\012\124\053\156\103\152" +
    "\107\127\111\144\113\141\115\155\001\002\000\022\011" +
    "\165\012\124\053\156\103\152\107\127\111\144\113\141" +
    "\115\155\001\002\000\034\066\uffce\067\uffce\070\175\073" +
    "\172\074\uffce\102\uffce\103\uffce\104\171\105\174\106\167" +
    "\110\uffce\112\170\114\uffce\001\002\000\034\066\uffc5\067" +
    "\uffc5\070\uffc5\073\172\074\uffc5\102\uffc5\103\uffc5\104\uffc5" +
    "\105\uffc5\106\uffc5\110\uffc5\112\uffc5\114\uffc5\001\002\000" +
    "\034\066\uffcb\067\uffcb\070\175\073\172\074\uffcb\102\uffcb" +
    "\103\uffcb\104\uffcb\105\uffcb\106\uffcb\110\uffcb\112\170\114" +
    "\uffcb\001\002\000\034\066\uffcd\067\uffcd\070\175\073\172" +
    "\074\uffcd\102\uffcd\103\uffcd\104\171\105\174\106\167\110" +
    "\uffcd\112\170\114\uffcd\001\002\000\024\070\175\073\172" +
    "\074\204\102\176\103\173\104\171\105\174\106\167\112" +
    "\170\001\002\000\022\011\165\012\124\053\156\103\152" +
    "\107\127\111\144\113\141\115\155\001\002\000\034\066" +
    "\uffd4\067\uffd4\070\uffd4\073\uffd4\074\uffd4\102\uffd4\103\uffd4" +
    "\104\uffd4\105\uffd4\106\uffd4\110\uffd4\112\uffd4\114\uffd4\001" +
    "\002\000\034\066\uffcc\067\uffcc\070\175\073\172\074\uffcc" +
    "\102\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc\110\uffcc\112" +
    "\170\114\uffcc\001\002\000\034\066\uffd3\067\uffd3\070\175" +
    "\073\172\074\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106" +
    "\uffd3\110\uffd3\112\uffd3\114\uffd3\001\002\000\034\066\uffca" +
    "\067\uffca\070\175\073\172\074\uffca\102\uffca\103\uffca\104" +
    "\uffca\105\uffca\106\uffca\110\uffca\112\170\114\uffca\001\002" +
    "\000\024\011\165\012\124\053\156\103\152\107\127\110" +
    "\uff78\111\144\113\141\115\155\001\002\000\034\066\uffc2" +
    "\067\uffc2\070\uffc2\073\uffc2\074\uffc2\102\uffc2\103\uffc2\104" +
    "\uffc2\105\uffc2\106\uffc2\110\uffc2\112\uffc2\114\uffc2\001\002" +
    "\000\004\110\227\001\002\000\006\066\220\110\uff75\001" +
    "\002\000\030\066\220\070\175\073\172\102\176\103\173" +
    "\104\171\105\174\106\167\110\uff75\112\170\114\216\001" +
    "\002\000\022\011\165\012\124\053\156\103\152\107\127" +
    "\111\144\113\141\115\155\001\002\000\004\110\uff7a\001" +
    "\002\000\022\011\165\012\124\053\156\103\152\107\127" +
    "\111\144\113\141\115\155\001\002\000\006\066\220\110" +
    "\uff75\001\002\000\030\066\220\070\175\073\172\102\176" +
    "\103\173\104\171\105\174\106\167\110\uff75\112\170\114" +
    "\216\001\002\000\004\110\uff77\001\002\000\004\110\uff76" +
    "\001\002\000\026\066\uffad\070\175\073\172\102\176\103" +
    "\173\104\171\105\174\106\167\110\uffad\112\170\001\002" +
    "\000\004\110\uff79\001\002\000\034\066\uff6b\067\uff6b\070" +
    "\uff6b\073\uff6b\074\uff6b\102\uff6b\103\uff6b\104\uff6b\105\uff6b" +
    "\106\uff6b\110\uff6b\112\uff6b\114\uff6b\001\002\000\004\110" +
    "\231\001\002\000\034\066\uff6a\067\uff6a\070\uff6a\073\uff6a" +
    "\074\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a\110" +
    "\uff6a\112\uff6a\114\uff6a\001\002\000\034\066\uffc3\067\uffc3" +
    "\070\uffc3\073\uffc3\074\uffc3\102\uffc3\103\uffc3\104\uffc3\105" +
    "\uffc3\106\uffc3\110\uffc3\112\uffc3\114\uffc3\001\002\000\034" +
    "\066\uffc9\067\uffc9\070\175\073\172\074\uffc9\102\uffc9\103" +
    "\uffc9\104\171\105\174\106\167\110\uffc9\112\170\114\uffc9" +
    "\001\002\000\004\114\235\001\002\000\022\011\165\012" +
    "\124\053\156\103\152\107\127\111\144\113\141\115\155" +
    "\001\002\000\024\067\uffae\070\175\073\172\102\176\103" +
    "\173\104\171\105\174\106\167\112\170\001\002\000\044" +
    "\003\uffdf\011\uffdf\012\uffdf\016\uffdf\022\uffdf\025\uffdf\030" +
    "\uffdf\034\uffdf\046\uffdf\053\uffdf\061\uffdf\076\uffdf\103\uffdf" +
    "\107\uffdf\111\uffdf\113\uffdf\115\uffdf\001\002\000\064\003" +
    "\251\011\150\012\124\013\027\015\023\016\243\017\012" +
    "\020\031\022\254\025\145\030\140\034\125\036\015\046" +
    "\133\051\033\053\156\055\016\056\025\061\135\076\ufff9" +
    "\103\152\107\127\111\144\113\141\115\155\001\002\000" +
    "\064\003\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\022\ufff8\025\ufff8\030\ufff8\034\ufff8\036" +
    "\ufff8\046\ufff8\051\ufff8\053\ufff8\055\ufff8\056\ufff8\061\ufff8" +
    "\076\ufff8\103\ufff8\107\ufff8\111\ufff8\113\ufff8\115\ufff8\001" +
    "\002\000\064\003\251\011\150\012\124\013\027\015\023" +
    "\016\243\017\012\020\031\022\254\025\145\030\140\034" +
    "\125\036\015\046\133\051\033\053\156\055\016\056\025" +
    "\061\135\076\ufff9\103\152\107\127\111\144\113\141\115" +
    "\155\001\002\000\004\067\275\001\002\000\004\067\274" +
    "\001\002\000\004\067\273\001\002\000\004\067\272\001" +
    "\002\000\024\067\271\070\uffc1\073\uffc1\102\uffc1\103\uffc1" +
    "\104\uffc1\105\uffc1\106\uffc1\112\uffc1\001\002\000\004\076" +
    "\264\001\002\000\010\067\263\076\261\110\262\001\002" +
    "\000\064\003\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\022\ufff7\025\ufff7\030\ufff7\034\ufff7" +
    "\036\ufff7\046\ufff7\051\ufff7\053\ufff7\055\ufff7\056\ufff7\061" +
    "\ufff7\076\ufff7\103\ufff7\107\ufff7\111\ufff7\113\ufff7\115\ufff7" +
    "\001\002\000\064\003\ufff5\011\ufff5\012\ufff5\013\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\025\ufff5\030\ufff5" +
    "\034\ufff5\036\ufff5\046\ufff5\051\ufff5\053\ufff5\055\ufff5\056" +
    "\ufff5\061\ufff5\076\ufff5\103\ufff5\107\ufff5\111\ufff5\113\ufff5" +
    "\115\ufff5\001\002\000\004\067\260\001\002\000\064\003" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\022\ufff4\025\ufff4\030\ufff4\034\ufff4\036\ufff4\046" +
    "\ufff4\051\ufff4\053\ufff4\055\ufff4\056\ufff4\061\ufff4\076\ufff4" +
    "\103\ufff4\107\ufff4\111\ufff4\113\ufff4\115\ufff4\001\002\000" +
    "\024\067\257\070\uffc7\073\uffc7\102\uffc7\103\uffc7\104\uffc7" +
    "\105\uffc7\106\uffc7\112\uffc7\001\002\000\064\003\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\022\ufff0\025\ufff0\030\ufff0\034\ufff0\036\ufff0\046\ufff0\051" +
    "\ufff0\053\ufff0\055\ufff0\056\ufff0\061\ufff0\076\ufff0\103\ufff0" +
    "\107\ufff0\111\ufff0\113\ufff0\115\ufff0\001\002\000\064\003" +
    "\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\022\uffee\025\uffee\030\uffee\034\uffee\036\uffee\046" +
    "\uffee\051\uffee\053\uffee\055\uffee\056\uffee\061\uffee\076\uffee" +
    "\103\uffee\107\uffee\111\uffee\113\uffee\115\uffee\001\002\000" +
    "\064\003\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\022\uffec\025\uffec\030\uffec\034\uffec\036" +
    "\uffec\046\uffec\051\uffec\053\uffec\055\uffec\056\uffec\061\uffec" +
    "\076\uffec\103\uffec\107\uffec\111\uffec\113\uffec\115\uffec\001" +
    "\002\000\064\003\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\022\uffeb\025\uffeb\030\uffeb\034" +
    "\uffeb\036\uffeb\046\uffeb\051\uffeb\053\uffeb\055\uffeb\056\uffeb" +
    "\061\uffeb\076\uffeb\103\uffeb\107\uffeb\111\uffeb\113\uffeb\115" +
    "\uffeb\001\002\000\064\003\uffed\011\uffed\012\uffed\013\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\022\uffed\025\uffed\030" +
    "\uffed\034\uffed\036\uffed\046\uffed\051\uffed\053\uffed\055\uffed" +
    "\056\uffed\061\uffed\076\uffed\103\uffed\107\uffed\111\uffed\113" +
    "\uffed\115\uffed\001\002\000\004\061\265\001\002\000\004" +
    "\107\266\001\002\000\022\011\165\012\124\053\156\103" +
    "\152\107\127\111\144\113\141\115\155\001\002\000\024" +
    "\070\175\073\172\102\176\103\173\104\171\105\174\106" +
    "\167\110\270\112\170\001\002\000\004\067\uffd7\001\002" +
    "\000\064\003\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\022\ufff3\025\ufff3\030\ufff3\034\ufff3" +
    "\036\ufff3\046\ufff3\051\ufff3\053\ufff3\055\ufff3\056\ufff3\061" +
    "\ufff3\076\ufff3\103\ufff3\107\ufff3\111\ufff3\113\ufff3\115\ufff3" +
    "\001\002\000\064\003\ufff2\011\ufff2\012\ufff2\013\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\025\ufff2\030\ufff2" +
    "\034\ufff2\036\ufff2\046\ufff2\051\ufff2\053\ufff2\055\ufff2\056" +
    "\ufff2\061\ufff2\076\ufff2\103\ufff2\107\ufff2\111\ufff2\113\ufff2" +
    "\115\ufff2\001\002\000\064\003\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\022\ufff1\025\ufff1" +
    "\030\ufff1\034\ufff1\036\ufff1\046\ufff1\051\ufff1\053\ufff1\055" +
    "\ufff1\056\ufff1\061\ufff1\076\ufff1\103\ufff1\107\ufff1\111\ufff1" +
    "\113\ufff1\115\ufff1\001\002\000\064\003\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\022\ufff6" +
    "\025\ufff6\030\ufff6\034\ufff6\036\ufff6\046\ufff6\051\ufff6\053" +
    "\ufff6\055\ufff6\056\ufff6\061\ufff6\076\ufff6\103\ufff6\107\ufff6" +
    "\111\ufff6\113\ufff6\115\ufff6\001\002\000\064\003\uffef\011" +
    "\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\022\uffef\025\uffef\030\uffef\034\uffef\036\uffef\046\uffef\051" +
    "\uffef\053\uffef\055\uffef\056\uffef\061\uffef\076\uffef\103\uffef" +
    "\107\uffef\111\uffef\113\uffef\115\uffef\001\002\000\004\076" +
    "\ufffa\001\002\000\044\003\uffdd\011\uffdd\012\uffdd\016\uffdd" +
    "\022\uffdd\025\uffdd\030\uffdd\034\uffdd\046\uffdd\053\uffdd\061" +
    "\uffdd\076\uffdd\103\uffdd\107\uffdd\111\uffdd\113\uffdd\115\uffdd" +
    "\001\002\000\044\003\uffdc\011\uffdc\012\uffdc\016\uffdc\022" +
    "\uffdc\025\uffdc\030\uffdc\034\uffdc\046\uffdc\053\uffdc\061\uffdc" +
    "\076\uffdc\103\uffdc\107\uffdc\111\uffdc\113\uffdc\115\uffdc\001" +
    "\002\000\044\003\uffde\011\uffde\012\uffde\016\uffde\022\uffde" +
    "\025\uffde\030\uffde\034\uffde\046\uffde\053\uffde\061\uffde\076" +
    "\uffde\103\uffde\107\uffde\111\uffde\113\uffde\115\uffde\001\002" +
    "\000\034\066\uffd1\067\uffd1\070\175\073\172\074\uffd1\102" +
    "\176\103\173\104\171\105\174\106\167\110\uffd1\112\170" +
    "\114\uffd1\001\002\000\024\011\050\013\027\015\023\017" +
    "\012\020\031\036\015\051\033\055\016\056\025\001\002" +
    "\000\004\067\316\001\002\000\004\067\306\001\002\000" +
    "\022\011\165\012\124\053\156\103\152\107\127\111\144" +
    "\113\141\115\155\001\002\000\024\067\310\070\175\073" +
    "\172\102\176\103\173\104\171\105\174\106\167\112\170" +
    "\001\002\000\022\011\165\012\124\053\156\103\152\107" +
    "\127\111\144\113\141\115\155\001\002\000\024\070\175" +
    "\073\172\102\176\103\173\104\171\105\174\106\167\110" +
    "\312\112\170\001\002\000\004\075\313\001\002\000\064" +
    "\003\251\011\150\012\124\013\027\015\023\016\243\017" +
    "\012\020\031\022\254\025\145\030\140\034\125\036\015" +
    "\046\133\051\033\053\156\055\016\056\025\061\135\076" +
    "\ufff9\103\152\107\127\111\144\113\141\115\155\001\002" +
    "\000\004\076\315\001\002\000\064\003\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\022\uffd5" +
    "\025\uffd5\030\uffd5\034\uffd5\036\uffd5\046\uffd5\051\uffd5\053" +
    "\uffd5\055\uffd5\056\uffd5\061\uffd5\076\uffd5\103\uffd5\107\uffd5" +
    "\111\uffd5\113\uffd5\115\uffd5\001\002\000\022\011\165\012" +
    "\124\053\156\103\152\107\127\111\144\113\141\115\155" +
    "\001\002\000\024\067\320\070\175\073\172\102\176\103" +
    "\173\104\171\105\174\106\167\112\170\001\002\000\022" +
    "\011\165\012\124\053\156\103\152\107\127\111\144\113" +
    "\141\115\155\001\002\000\024\070\175\073\172\102\176" +
    "\103\173\104\171\105\174\106\167\110\322\112\170\001" +
    "\002\000\004\075\323\001\002\000\064\003\251\011\150" +
    "\012\124\013\027\015\023\016\243\017\012\020\031\022" +
    "\254\025\145\030\140\034\125\036\015\046\133\051\033" +
    "\053\156\055\016\056\025\061\135\076\ufff9\103\152\107" +
    "\127\111\144\113\141\115\155\001\002\000\004\076\325" +
    "\001\002\000\064\003\uffd6\011\uffd6\012\uffd6\013\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\022\uffd6\025\uffd6\030\uffd6" +
    "\034\uffd6\036\uffd6\046\uffd6\051\uffd6\053\uffd6\055\uffd6\056" +
    "\uffd6\061\uffd6\076\uffd6\103\uffd6\107\uffd6\111\uffd6\113\uffd6" +
    "\115\uffd6\001\002\000\044\003\uffe3\011\uffe3\012\uffe3\016" +
    "\uffe3\022\uffe3\025\uffe3\030\uffe3\034\uffe3\046\uffe3\053\uffe3" +
    "\061\uffe3\076\uffe3\103\uffe3\107\uffe3\111\uffe3\113\uffe3\115" +
    "\uffe3\001\002\000\064\003\142\011\150\012\124\013\027" +
    "\015\023\016\130\017\012\020\031\022\147\025\145\030" +
    "\140\034\125\036\015\046\133\051\033\053\156\055\016" +
    "\056\025\061\135\076\uffe9\103\152\107\127\111\144\113" +
    "\141\115\155\001\002\000\004\076\uff7f\001\002\000\022" +
    "\011\165\012\124\053\156\103\152\107\127\111\144\113" +
    "\141\115\155\001\002\000\024\070\175\073\172\102\176" +
    "\103\173\104\171\105\174\106\167\110\333\112\170\001" +
    "\002\000\004\075\334\001\002\000\064\003\251\011\150" +
    "\012\124\013\027\015\023\016\243\017\012\020\031\022" +
    "\254\025\145\030\140\034\125\036\015\046\133\051\033" +
    "\053\156\055\016\056\025\061\135\076\ufff9\103\152\107" +
    "\127\111\144\113\141\115\155\001\002\000\004\076\336" +
    "\001\002\000\064\003\uffd8\011\uffd8\012\uffd8\013\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8\025\uffd8\030\uffd8" +
    "\034\uffd8\036\uffd8\046\uffd8\051\uffd8\053\uffd8\055\uffd8\056" +
    "\uffd8\061\uffd8\076\uffd8\103\uffd8\107\uffd8\111\uffd8\113\uffd8" +
    "\115\uffd8\001\002\000\044\003\uffe2\011\uffe2\012\uffe2\016" +
    "\uffe2\022\uffe2\025\uffe2\030\uffe2\034\uffe2\046\uffe2\053\uffe2" +
    "\061\uffe2\076\uffe2\103\uffe2\107\uffe2\111\uffe2\113\uffe2\115" +
    "\uffe2\001\002\000\066\003\uff7b\011\uff7b\012\uff7b\013\uff7b" +
    "\015\uff7b\016\uff7b\017\uff7b\020\uff7b\022\uff7b\025\uff7b\030" +
    "\uff7b\034\uff7b\036\uff7b\046\uff7b\051\uff7b\053\uff7b\055\uff7b" +
    "\056\uff7b\061\uff7b\067\uff7d\076\uff7b\103\uff7b\107\uff7b\111" +
    "\uff7b\113\uff7b\115\uff7b\001\002\000\004\067\342\001\002" +
    "\000\064\003\uff7c\011\uff7c\012\uff7c\013\uff7c\015\uff7c\016" +
    "\uff7c\017\uff7c\020\uff7c\022\uff7c\025\uff7c\030\uff7c\034\uff7c" +
    "\036\uff7c\046\uff7c\051\uff7c\053\uff7c\055\uff7c\056\uff7c\061" +
    "\uff7c\076\uff7c\103\uff7c\107\uff7c\111\uff7c\113\uff7c\115\uff7c" +
    "\001\002\000\004\076\344\001\002\000\006\032\uff82\076" +
    "\uff82\001\002\000\044\003\uffe6\011\uffe6\012\uffe6\016\uffe6" +
    "\022\uffe6\025\uffe6\030\uffe6\034\uffe6\046\uffe6\053\uffe6\061" +
    "\uffe6\076\uffe6\103\uffe6\107\uffe6\111\uffe6\113\uffe6\115\uffe6" +
    "\001\002\000\044\003\uffe0\011\uffe0\012\uffe0\016\uffe0\022" +
    "\uffe0\025\uffe0\030\uffe0\034\uffe0\046\uffe0\053\uffe0\061\uffe0" +
    "\076\uffe0\103\uffe0\107\uffe0\111\uffe0\113\uffe0\115\uffe0\001" +
    "\002\000\024\070\175\073\172\102\176\103\173\104\171" +
    "\105\174\106\167\110\350\112\170\001\002\000\034\066" +
    "\uffd2\067\uffd2\070\uffd2\073\uffd2\074\uffd2\102\uffd2\103\uffd2" +
    "\104\uffd2\105\uffd2\106\uffd2\110\uffd2\112\uffd2\114\uffd2\001" +
    "\002\000\022\011\165\012\124\053\156\103\152\107\127" +
    "\111\144\113\141\115\155\001\002\000\024\070\175\073" +
    "\172\102\176\103\173\104\171\105\174\106\167\110\353" +
    "\112\170\001\002\000\004\075\354\001\002\000\064\003" +
    "\251\011\150\012\124\013\027\015\023\016\243\017\012" +
    "\020\031\022\254\025\145\030\140\034\125\036\015\046" +
    "\133\051\033\053\156\055\016\056\025\061\135\076\ufff9" +
    "\103\152\107\127\111\144\113\141\115\155\001\002\000" +
    "\004\076\356\001\002\000\066\003\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\025" +
    "\uffdb\026\360\030\uffdb\034\uffdb\036\uffdb\046\uffdb\051\uffdb" +
    "\053\uffdb\055\uffdb\056\uffdb\061\uffdb\076\uffdb\103\uffdb\107" +
    "\uffdb\111\uffdb\113\uffdb\115\uffdb\001\002\000\064\003\uffda" +
    "\011\uffda\012\uffda\013\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\022\uffda\025\uffda\030\uffda\034\uffda\036\uffda\046\uffda" +
    "\051\uffda\053\uffda\055\uffda\056\uffda\061\uffda\076\uffda\103" +
    "\uffda\107\uffda\111\uffda\113\uffda\115\uffda\001\002\000\004" +
    "\075\361\001\002\000\064\003\251\011\150\012\124\013" +
    "\027\015\023\016\243\017\012\020\031\022\254\025\145" +
    "\030\140\034\125\036\015\046\133\051\033\053\156\055" +
    "\016\056\025\061\135\076\ufff9\103\152\107\127\111\144" +
    "\113\141\115\155\001\002\000\004\076\363\001\002\000" +
    "\064\003\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\022\uffd9\025\uffd9\030\uffd9\034\uffd9\036" +
    "\uffd9\046\uffd9\051\uffd9\053\uffd9\055\uffd9\056\uffd9\061\uffd9" +
    "\076\uffd9\103\uffd9\107\uffd9\111\uffd9\113\uffd9\115\uffd9\001" +
    "\002\000\004\076\uffea\001\002\000\006\003\066\107\070" +
    "\001\002\000\006\003\uff86\075\uff86\001\002\000\020\003" +
    "\uff90\037\uff90\042\uff90\044\uff90\045\uff90\047\uff90\075\uff90" +
    "\001\002\000\004\076\uffa6\001\002\000\032\011\050\013" +
    "\uffa4\015\uffa4\017\uffa4\020\uffa4\032\uffa1\036\uffa4\051\uffa4" +
    "\052\uffa1\055\uffa4\056\uffa4\076\uffa1\001\002\000\004\076" +
    "\uffa2\001\002\000\034\002\uffa8\003\uffa8\013\uffa8\015\uffa8" +
    "\017\uffa8\020\uffa8\023\uffa8\027\uffa8\036\uffa8\051\uffa8\052" +
    "\uffa8\055\uffa8\056\uffa8\001\002\000\034\002\uffa7\003\uffa7" +
    "\013\uffa7\015\uffa7\017\uffa7\020\uffa7\023\uffa7\027\uffa7\036" +
    "\uffa7\051\uffa7\052\uffa7\055\uffa7\056\uffa7\001\002\000\006" +
    "\003\377\075\376\001\002\000\004\011\u0102\001\002\000" +
    "\004\076\u0101\001\002\000\042\002\uff9b\003\uff9b\011\uff9b" +
    "\013\uff9b\015\uff9b\017\uff9b\020\uff9b\023\uff9b\027\uff9b\032" +
    "\uff9b\036\uff9b\051\uff9b\052\uff9b\055\uff9b\056\uff9b\076\uff9b" +
    "\001\002\000\042\002\uff99\003\uff99\011\uff99\013\uff99\015" +
    "\uff99\017\uff99\020\uff99\023\uff99\027\uff99\032\uff99\036\uff99" +
    "\051\uff99\052\uff99\055\uff99\056\uff99\076\uff99\001\002\000" +
    "\006\066\u0104\076\uff97\001\002\000\004\076\u0108\001\002" +
    "\000\004\011\u0106\001\002\000\004\076\uff98\001\002\000" +
    "\006\066\u0104\076\uff97\001\002\000\004\076\uff96\001\002" +
    "\000\042\002\uff9a\003\uff9a\011\uff9a\013\uff9a\015\uff9a\017" +
    "\uff9a\020\uff9a\023\uff9a\027\uff9a\032\uff9a\036\uff9a\051\uff9a" +
    "\052\uff9a\055\uff9a\056\uff9a\076\uff9a\001\002\000\004\075" +
    "\u010a\001\002\000\026\011\050\013\027\015\023\017\012" +
    "\020\031\036\015\051\033\055\016\056\025\076\uffbd\001" +
    "\002\000\004\076\u0112\001\002\000\004\067\u0110\001\002" +
    "\000\004\067\u010e\001\002\000\026\011\050\013\027\015" +
    "\023\017\012\020\031\036\015\051\033\055\016\056\025" +
    "\076\uffbd\001\002\000\004\076\uffbe\001\002\000\026\011" +
    "\050\013\027\015\023\017\012\020\031\036\015\051\033" +
    "\055\016\056\025\076\uffbd\001\002\000\004\076\uffbf\001" +
    "\002\000\040\002\uffc0\003\uffc0\013\uffc0\015\uffc0\017\uffc0" +
    "\020\uffc0\023\uffc0\027\uffc0\032\uffc0\036\uffc0\051\uffc0\052" +
    "\uffc0\055\uffc0\056\uffc0\076\uffc0\001\002\000\004\002\ufffd" +
    "\001\002\000\004\011\uffac\001\002\000\004\072\u0125\001" +
    "\002\000\024\011\165\012\124\053\156\067\u0123\103\152" +
    "\107\127\111\144\113\141\115\155\001\002\000\004\011" +
    "\u0119\001\002\000\004\011\uffab\001\002\000\010\066\uffbc" +
    "\067\uffbc\114\uffba\001\002\000\004\114\u0121\001\002\000" +
    "\006\066\u011c\067\uffb4\001\002\000\004\011\u011e\001\002" +
    "\000\004\067\uffbb\001\002\000\006\066\uffb6\067\uffb6\001" +
    "\002\000\006\066\u011c\067\uffb4\001\002\000\004\067\uffb5" +
    "\001\002\000\022\011\165\012\124\053\156\103\152\107" +
    "\127\111\144\113\141\115\155\001\002\000\024\067\uffb9" +
    "\070\175\073\172\102\176\103\173\104\171\105\174\106" +
    "\167\112\170\001\002\000\004\011\uffaa\001\002\000\024" +
    "\067\uffb7\070\175\073\172\102\176\103\173\104\171\105" +
    "\174\106\167\112\170\001\002\000\004\011\u0126\001\002" +
    "\000\010\066\u0128\067\uffb0\114\u0127\001\002\000\022\011" +
    "\165\012\124\053\156\103\152\107\127\111\144\113\141" +
    "\115\155\001\002\000\004\011\u012a\001\002\000\004\067" +
    "\uffb3\001\002\000\006\066\u0128\067\uffb0\001\002\000\004" +
    "\067\uffb1\001\002\000\024\067\uffb2\070\175\073\172\102" +
    "\176\103\173\104\171\105\174\106\167\112\170\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\033\025\031\027\027\050\013\051" +
    "\012\052\023\054\016\060\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\u0116\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\u0112\025\031\027\027" +
    "\050\013\051\012\052\023\054\016\060\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\036\025\031\027\027\050\013\051\012\052" +
    "\023\054\016\060\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\035\025\031\027\027\050\013\051" +
    "\012\052\023\054\016\060\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\040\025\031\027\027\050" +
    "\013\051\012\052\023\054\016\060\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\044\044\054\045\061" +
    "\043\062\046\075\051\076\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\044\044\054\045\061\367\062" +
    "\046\075\051\076\050\001\001\000\002\001\001\000\004" +
    "\074\233\001\001\000\012\025\060\032\056\063\061\064" +
    "\057\001\001\000\012\027\052\050\013\051\012\052\023" +
    "\001\001\000\002\001\001\000\012\044\044\062\054\075" +
    "\051\076\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\056\064\063\001\001\000\002\001\001\000" +
    "\012\025\060\032\056\063\062\064\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\066\001\001\000\002\001\001\000\004\035\110\001\001" +
    "\000\004\077\071\001\001\000\002\001\001\000\006\050" +
    "\072\051\012\001\001\000\002\001\001\000\004\034\075" +
    "\001\001\000\006\050\100\051\012\001\001\000\004\100" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\102\001\001\000\004\034\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\112\001" +
    "\001\000\004\102\364\001\001\000\004\037\115\001\001" +
    "\000\004\103\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\010\125" +
    "\012\142\013\130\014\145\015\136\021\152\022\153\027" +
    "\135\041\150\042\156\044\133\050\013\051\012\052\023" +
    "\066\122\067\121\070\131\001\001\000\032\010\125\012" +
    "\142\013\130\014\145\015\136\021\152\022\153\041\150" +
    "\042\156\044\133\066\363\067\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\162\021\152\022\346\042\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\342\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\162\021\152\022\301\042\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\074\233\001" +
    "\001\000\002\001\001\000\012\015\162\021\152\022\232" +
    "\042\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\015\162\021\152\022\214\042\163\043" +
    "\227\045\213\001\001\000\012\015\162\021\152\022\165" +
    "\042\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\162\021\152" +
    "\022\207\042\163\001\001\000\012\015\162\021\152\022" +
    "\206\042\163\001\001\000\012\015\162\021\152\022\205" +
    "\042\163\001\001\000\012\015\162\021\152\022\202\042" +
    "\163\001\001\000\012\015\162\021\152\022\201\042\163" +
    "\001\001\000\012\015\162\021\152\022\200\042\163\001" +
    "\001\000\012\015\162\021\152\022\177\042\163\001\001" +
    "\000\012\015\162\021\152\022\176\042\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\162\021\152\022" +
    "\204\042\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\015\162\021" +
    "\152\022\214\042\163\043\212\045\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\225\001\001\000" +
    "\004\031\216\001\001\000\012\015\162\021\152\022\224" +
    "\042\163\001\001\000\002\001\001\000\014\015\162\021" +
    "\152\022\221\042\163\045\220\001\001\000\004\031\223" +
    "\001\001\000\004\031\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\162" +
    "\021\152\022\235\042\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\005\241\010\240\012\251\013\243" +
    "\014\252\015\246\021\152\022\153\027\245\041\254\042" +
    "\255\044\244\050\013\051\012\052\023\065\247\001\001" +
    "\000\002\001\001\000\042\005\241\010\240\012\251\013" +
    "\243\014\252\015\246\021\152\022\153\027\245\041\254" +
    "\042\255\044\244\050\013\051\012\052\023\065\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\162\021\152\022\266\042\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\027\303\044\304" +
    "\050\013\051\012\052\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\162\021\152\022\306\042\163" +
    "\001\001\000\002\001\001\000\012\015\162\021\152\022" +
    "\310\042\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\241\010\240\012\251\013\243\014\252\015" +
    "\246\021\152\022\153\027\245\041\254\042\255\044\244" +
    "\050\013\051\012\052\023\065\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\162\021\152\022\316" +
    "\042\163\001\001\000\002\001\001\000\012\015\162\021" +
    "\152\022\320\042\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\241\010\240\012\251\013\243\014" +
    "\252\015\246\021\152\022\153\027\245\041\254\042\255" +
    "\044\244\050\013\051\012\052\023\065\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\010\125\012\142\013\130\014\145\015\136\021\152\022" +
    "\153\027\135\041\150\042\156\044\133\050\013\051\012" +
    "\052\023\066\122\067\121\070\327\001\001\000\002\001" +
    "\001\000\012\015\162\021\152\022\331\042\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\241\010" +
    "\240\012\251\013\243\014\252\015\246\021\152\022\153" +
    "\027\245\041\254\042\255\044\244\050\013\051\012\052" +
    "\023\065\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\162\021\152\022\351\042\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\241\010\240\012\251\013\243\014\252\015\246\021\152" +
    "\022\153\027\245\041\254\042\255\044\244\050\013\051" +
    "\012\052\023\065\354\001\001\000\002\001\001\000\004" +
    "\011\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\005\241\010\240\012\251\013\243\014\252\015\246" +
    "\021\152\022\153\027\245\041\254\042\255\044\244\050" +
    "\013\051\012\052\023\065\361\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\365\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\044\044\062\371\075\051\076\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\377\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\u0102\001\001" +
    "\000\002\001\001\000\004\057\u0104\001\001\000\002\001" +
    "\001\000\004\056\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\026\u010a\027\u010b\044" +
    "\u010c\050\013\051\012\052\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\026\u010e\027" +
    "\u010b\044\u010c\050\013\051\012\052\023\001\001\000\002" +
    "\001\001\000\016\026\u0110\027\u010b\044\u010c\050\013\051" +
    "\012\052\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\162\021\152\022\u0123\042\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\071\u011a\072\u0119\001" +
    "\001\000\002\001\001\000\004\046\u011c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\u011e\001\001\000" +
    "\004\046\u011f\001\001\000\002\001\001\000\012\015\162" +
    "\021\152\022\u0121\042\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\u0128\001\001\000\012\015\162\021\152\022\u012b\042" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\u012a\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static ArrayList<String> erroresEspec = new ArrayList<String>();
    public static boolean fatalError = false;
    public static boolean specError = false;
    public static Symbol fatalErrorSym;
    public static String specErrorDetail = "";
    
    static TablaSimbolos tabla = new TablaSimbolos();


    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public static void informar_Error_Especifico(String tipoError){
        String specErrorStr = "ERROR: "+tipoError;
        specErrorDetail = specErrorStr;
        erroresEspec.add(specErrorStr);
        specError = true;

        System.err.println(specErrorStr);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // FUNCCALL ::= This ParentAbre PARAMFUNC ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARAMFUNCFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARAMFUNCFILA ::= Coma ASIGVARIABLEFUN PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PARAMFUNCFILA ::= Coma EXPRESION PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PARAMFUNC ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PARAMFUNC ::= ASIGVARIABLEFUN PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PARAMFUNC ::= EXPRESION PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA_RETURN ::= Return Identificador 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Return de función sin punto y coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA_RETURN ::= Return Identificador NT$12 PuntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$12 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 FrmPrincipal.tabla.returnEnFuncionIngresado(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FUNCIONCONTENVARLIS ::= LISTA_SENTENCIAPRIMAFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTENVARLIS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FUNCIONCONTENVARLIS ::= DECLARVARIABLE PuntoComa FUNCIONCONTENVARLIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTENVARLIS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FUNCIONCONTEN ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FUNCIONCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FUNCIONCONTEN ::= LlaveAbre NT$10 FUNCIONCONTENVARLIS NT$11 LlaveCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 FrmPrincipal.tabla.varLocal = false; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$10 ::= 
            {
              Object RESULT =null;
 FrmPrincipal.tabla.varLocal = true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FUNCIONRETURNS ::= Returns NT$9 FUNCIONATRIB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$9 ::= 
            {
              Object RESULT =null;
 FrmPrincipal.tabla.returnsEnFuncion(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FUNATRIBDOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUNATRIBDOS ::= Coma TYPENAME Identificador NT$8 FUNATRIBDOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$8 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 FrmPrincipal.tabla.insertarValorScope(id.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUNCIONATRIB ::= error ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNCIONATRIB ::= ParentAbre ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FUNCIONATRIB ::= ParentAbre NT$6 TYPENAME Identificador FUNATRIBDOS NT$7 ParentCierre 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
 FrmPrincipal.tabla.varParamet = false; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$6 ::= 
            {
              Object RESULT =null;
 FrmPrincipal.tabla.varParamet = true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ENUMCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONTRACTPART3 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONTRACTPART2 ::= CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONTRACTPART1 ::= NT$5 CONTRACTPART2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$5 ::= 
            {
              Object RESULT =null;
 FrmPrincipal.tabla.varGlobal = false; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONTRACTPART1 ::= ASIGVARIABLE PuntoComa CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTRACTPART1 ::= NT$4 DECLARVARIABLE PuntoComa CONTRACTPART1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$4 ::= 
            {
              Object RESULT =null;
 FrmPrincipal.tabla.varGlobal = true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTRACTPART ::= CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTRACTDEF ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ACCESSMOD ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ASIGVARIABLEFUN ::= EXPRESION Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLEFUN",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGVARIABLE ::= Identificador NT$3 Op_atribucion EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 FrmPrincipal.tabla.ultimoIdentificadorIngresado = id.toString(); FrmPrincipal.tabla.insertarValorScope(id.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ARRAYDECLARFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ARRAYDECLARFILA ::= Coma Identificador ARRAYDECLARFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador ARRAYDECLARFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARVARIABLEFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARVARIABLEFILA ::= Coma Identificador NT$2 DECLARVARIABLEFILA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 FrmPrincipal.tabla.insertarValorScope(id.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARVARIABLE ::= TYPENAME error EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador NT$1 Op_atribucion EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 FrmPrincipal.tabla.ultimoIdentificadorIngresado = id.toString(); FrmPrincipal.tabla.insertarValorScope(id.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador NT$0 DECLARVARIABLEFILA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 FrmPrincipal.tabla.insertarValorScope(id.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STRUCTCONTEN ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STRUCTCONTEN ::= ASIGVARIABLE PuntoComa STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STRUCTCONTEN ::= DECLARVARIABLE PuntoComa STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STRUCTDEF ::= Struct Identificador LlaveAbre STRUCTCONTEN LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= SENTENCIA_TERNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= Identificador Op_Incremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= Op_Incremental Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= Literal 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 FrmPrincipal.tabla.insertarValorVariable(valor.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION Punto EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= This Punto EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION_INCREMENTAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION Mod EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION Div EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION Mult EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 FrmPrincipal.tabla.insertarIdValorVariable(id.toString()); RESULT = id; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= Not EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= ParentAbre EXPRESION ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_TERNARIA ::= EXPRESION SignoPregunta EXPRESION DosPuntos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_TERNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_FOR ::= For ParentAbre ASIGVARIABLE PuntoComa EXPRESION PuntoComa EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_FOR ::= For ParentAbre DECLARVARIABLE PuntoComa EXPRESION PuntoComa EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra While ParentAbre EXPRESION ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_WHILE ::= While ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_ELSE ::= Else LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_IF ::= If ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra SENTENCIA_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_IF ::= If ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIAFUN ::= error ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAFUN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIAFUN ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAFUN ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAFUN ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAFUN ::= FUNCCALL PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAFUN ::= ASIGVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAFUN ::= SENTENCIA_TERNARIA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAFUN ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAFUN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAFUN ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAFUN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAFUN ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_SENTENCIAPRIMAFUN ::= 
            {
              Object RESULT =null;
		 FrmPrincipal.tabla.validarReturnFuncion(); RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMAFUN",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_SENTENCIAPRIMAFUN ::= SENTENCIAFUN LISTA_SENTENCIAPRIMAFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMAFUN",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= error ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FUNCCALL PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ASIGVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DECLARVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_TERNARIA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_SENTENCIAPRIMA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIODOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIODOS ::= DECLARVARIABLE PuntoComa INICIODOS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Sintax.informar_Error_Especifico("Declaración fuera de función. En línea: "+pright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIODOS ::= ENUMDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIODOS ::= CONTRACTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIODOS ::= STRUCTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Version PuntoComa INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

