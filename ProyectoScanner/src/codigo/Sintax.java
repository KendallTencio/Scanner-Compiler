
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 13 21:07:54 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 13 21:07:54 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\004\004\000\002\004\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\006\011\000\002\006\015\000\002\007\011\000" +
    "\002\010\012\000\002\011\015\000\002\011\007\000\002" +
    "\012\003\000\002\012\004\000\002\012\006\000\002\012" +
    "\005\000\002\012\007\000\002\012\007\000\002\014\003" +
    "\000\002\014\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\004\000\002\013\005\000\002\013\003\000\002\015" +
    "\005\000\002\020\005\000\002\021\006\000\002\022\006" +
    "\000\002\022\010\000\002\022\003\000\002\041\007\000" +
    "\002\041\011\000\002\042\003\000\002\042\003\000\002" +
    "\042\002\000\002\047\010\000\002\050\004\000\002\050" +
    "\003\000\002\051\004\000\002\051\003\000\002\052\004" +
    "\000\002\052\003\000\002\053\004\000\002\053\002\000" +
    "\002\043\005\000\002\044\007\000\002\045\004\000\002" +
    "\045\002\000\002\046\004\000\002\024\010\000\002\025" +
    "\006\000\002\026\006\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\002\000\002\030\004\000\002\030\002\000\002" +
    "\031\007\000\002\032\002\000\002\033\005\000\002\037" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\034\005\000\002" +
    "\035\007\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\052\003\026\010\041\012\040\014\044\015" +
    "\014\016\010\017\004\021\036\022\031\024\033\026\013" +
    "\027\023\031\025\033\006\035\021\050\037\051\042\054" +
    "\007\055\032\060\017\001\002\000\012\010\uffae\043\uffae" +
    "\044\uffae\070\uffae\001\002\000\004\002\uffff\001\002\000" +
    "\004\106\304\001\002\000\012\010\uffaa\043\uffaa\044\uffaa" +
    "\070\uffaa\001\002\000\012\010\uffaf\043\uffaf\044\uffaf\070" +
    "\uffaf\001\002\000\024\002\ufff7\003\ufff7\015\ufff7\021\ufff7" +
    "\024\ufff7\027\ufff7\033\ufff7\060\ufff7\075\ufff7\001\002\000" +
    "\004\002\ufffa\001\002\000\004\010\271\001\002\000\004" +
    "\066\270\001\002\000\024\002\ufff4\003\ufff4\015\ufff4\021" +
    "\ufff4\024\ufff4\027\ufff4\033\ufff4\060\ufff4\075\ufff4\001\002" +
    "\000\004\002\ufffd\001\002\000\004\106\262\001\002\000" +
    "\004\002\ufffc\001\002\000\012\010\uffac\043\uffac\044\uffac" +
    "\070\uffac\001\002\000\022\002\000\003\026\015\014\021" +
    "\036\024\033\027\023\033\006\060\017\001\002\000\004" +
    "\106\242\001\002\000\034\002\uffd3\012\uffd3\014\uffd3\016" +
    "\uffd3\017\uffd3\031\uffd3\035\uffd3\045\uffd3\050\uffd3\051\uffd3" +
    "\054\uffd3\055\uffd3\075\uffd3\001\002\000\004\010\206\001" +
    "\002\000\006\066\205\075\204\001\002\000\024\002\ufff6" +
    "\003\ufff6\015\ufff6\021\ufff6\024\ufff6\027\ufff6\033\ufff6\060" +
    "\ufff6\075\ufff6\001\002\000\024\002\ufff5\003\ufff5\015\ufff5" +
    "\021\ufff5\024\ufff5\027\ufff5\033\ufff5\060\ufff5\075\ufff5\001" +
    "\002\000\004\010\164\001\002\000\012\010\uffa9\043\uffa9" +
    "\044\uffa9\070\uffa9\001\002\000\004\074\110\001\002\000" +
    "\004\002\ufff9\001\002\000\024\002\ufff3\003\ufff3\015\ufff3" +
    "\021\ufff3\024\ufff3\027\ufff3\033\ufff3\060\ufff3\075\ufff3\001" +
    "\002\000\004\066\107\001\002\000\012\010\uffab\043\uffab" +
    "\044\uffab\070\uffab\001\002\000\012\010\uffad\043\uffad\044" +
    "\uffad\070\uffad\001\002\000\006\106\100\113\077\001\002" +
    "\000\004\010\071\001\002\000\012\010\uffce\043\052\044" +
    "\055\070\053\001\002\000\012\010\uffb0\043\uffb0\044\uffb0" +
    "\070\uffb0\001\002\000\004\002\051\001\002\000\012\010" +
    "\uffb1\043\uffb1\044\uffb1\070\uffb1\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\ufffb\001\002\000\004\002\001\001" +
    "\002\000\004\010\uffd0\001\002\000\004\071\063\001\002" +
    "\000\004\010\056\001\002\000\004\010\uffcf\001\002\000" +
    "\006\066\060\113\057\001\002\000\004\011\061\001\002" +
    "\000\034\002\uffd5\012\uffd5\014\uffd5\016\uffd5\017\uffd5\031" +
    "\uffd5\035\uffd5\045\uffd5\050\uffd5\051\uffd5\054\uffd5\055\uffd5" +
    "\075\uffd5\001\002\000\004\066\062\001\002\000\034\002" +
    "\uffd4\012\uffd4\014\uffd4\016\uffd4\017\uffd4\031\uffd4\035\uffd4" +
    "\045\uffd4\050\uffd4\051\uffd4\054\uffd4\055\uffd4\075\uffd4\001" +
    "\002\000\004\010\064\001\002\000\006\066\066\113\065" +
    "\001\002\000\004\011\067\001\002\000\034\002\uffd2\012" +
    "\uffd2\014\uffd2\016\uffd2\017\uffd2\031\uffd2\035\uffd2\045\uffd2" +
    "\050\uffd2\051\uffd2\054\uffd2\055\uffd2\075\uffd2\001\002\000" +
    "\004\066\070\001\002\000\034\002\uffd1\012\uffd1\014\uffd1" +
    "\016\uffd1\017\uffd1\031\uffd1\035\uffd1\045\uffd1\050\uffd1\051" +
    "\uffd1\054\uffd1\055\uffd1\075\uffd1\001\002\000\004\074\073" +
    "\001\002\000\012\002\uffd7\031\uffd7\051\uffd7\075\uffd7\001" +
    "\002\000\022\012\040\014\044\016\010\017\004\035\021" +
    "\050\037\054\007\055\032\001\002\000\004\075\075\001" +
    "\002\000\004\066\076\001\002\000\012\002\uffd6\031\uffd6" +
    "\051\uffd6\075\uffd6\001\002\000\004\011\106\001\002\000" +
    "\022\012\040\014\044\016\010\017\004\035\021\050\037" +
    "\054\007\055\032\001\002\000\004\010\105\001\002\000" +
    "\004\107\103\001\002\000\004\066\104\001\002\000\004" +
    "\002\uffa7\001\002\000\004\107\uffa6\001\002\000\004\002" +
    "\uffa8\001\002\000\024\002\ufff1\003\ufff1\015\ufff1\021\ufff1" +
    "\024\ufff1\027\ufff1\033\ufff1\060\ufff1\075\ufff1\001\002\000" +
    "\020\003\026\015\014\021\036\024\033\027\023\033\006" +
    "\060\017\001\002\000\022\003\026\015\014\021\036\024" +
    "\033\027\023\033\006\060\017\075\112\001\002\000\004" +
    "\060\114\001\002\000\024\002\ufff8\003\ufff8\015\ufff8\021" +
    "\ufff8\024\ufff8\027\ufff8\033\ufff8\060\ufff8\075\ufff8\001\002" +
    "\000\004\106\115\001\002\000\016\010\125\011\121\102" +
    "\126\106\116\110\120\112\123\001\002\000\016\010\125" +
    "\011\121\102\126\106\116\110\120\112\123\001\002\000" +
    "\004\111\155\001\002\000\006\065\uffe8\107\uffe8\001\002" +
    "\000\022\065\uffd9\101\uffd9\102\uffd9\103\uffd9\104\uffd9\105" +
    "\uffd9\107\uffd9\111\uffd9\001\002\000\004\107\154\001\002" +
    "\000\016\010\125\011\121\102\126\106\145\110\120\112" +
    "\123\001\002\000\022\065\uffe2\101\137\102\136\103\134" +
    "\104\135\105\132\107\uffe2\111\uffe2\001\002\000\010\065" +
    "\uffe1\107\uffe1\111\uffe1\001\002\000\010\011\121\102\126" +
    "\106\130\001\002\000\022\065\uffdb\101\uffdb\102\uffdb\103" +
    "\134\104\135\105\132\107\uffdb\111\uffdb\001\002\000\010" +
    "\011\121\102\126\106\130\001\002\000\016\101\137\102" +
    "\136\103\134\104\135\105\132\107\133\001\002\000\010" +
    "\011\121\102\126\106\130\001\002\000\022\065\uffda\101" +
    "\uffda\102\uffda\103\uffda\104\uffda\105\uffda\107\uffda\111\uffda" +
    "\001\002\000\010\011\121\102\126\106\130\001\002\000" +
    "\010\011\121\102\126\106\130\001\002\000\010\011\121" +
    "\102\126\106\130\001\002\000\010\011\121\102\126\106" +
    "\130\001\002\000\022\065\uffe0\101\uffe0\102\uffe0\103\134" +
    "\104\135\105\132\107\uffe0\111\uffe0\001\002\000\022\065" +
    "\uffdf\101\uffdf\102\uffdf\103\134\104\135\105\132\107\uffdf" +
    "\111\uffdf\001\002\000\022\065\uffdd\101\uffdd\102\uffdd\103" +
    "\uffdd\104\uffdd\105\uffdd\107\uffdd\111\uffdd\001\002\000\022" +
    "\065\uffde\101\uffde\102\uffde\103\uffde\104\uffde\105\uffde\107" +
    "\uffde\111\uffde\001\002\000\022\065\uffdc\101\uffdc\102\uffdc" +
    "\103\uffdc\104\uffdc\105\uffdc\107\uffdc\111\uffdc\001\002\000" +
    "\016\010\125\011\121\102\126\106\116\110\120\112\123" +
    "\001\002\000\006\065\uffe7\107\uffe7\001\002\000\004\107" +
    "\151\001\002\000\020\101\137\102\136\103\134\104\135" +
    "\105\132\107\133\111\uffe2\001\002\000\010\065\uffe6\107" +
    "\uffe6\111\152\001\002\000\012\010\125\011\121\102\126" +
    "\106\130\001\002\000\006\065\uffe3\107\uffe3\001\002\000" +
    "\024\002\uffeb\003\uffeb\015\uffeb\021\uffeb\024\uffeb\027\uffeb" +
    "\033\uffeb\060\uffeb\075\uffeb\001\002\000\012\010\125\011" +
    "\121\102\126\106\156\001\002\000\016\010\125\011\121" +
    "\102\126\106\116\110\120\112\123\001\002\000\006\065" +
    "\uffe5\107\uffe5\001\002\000\004\107\161\001\002\000\006" +
    "\065\uffe4\107\uffe4\001\002\000\004\107\163\001\002\000" +
    "\004\111\152\001\002\000\004\074\165\001\002\000\032" +
    "\012\040\014\044\016\010\017\004\026\013\031\025\035" +
    "\021\050\037\051\042\054\007\055\032\075\uffc5\001\002" +
    "\000\032\012\040\014\044\016\010\017\004\026\013\031" +
    "\025\035\021\050\037\051\042\054\007\055\032\075\uffc5" +
    "\001\002\000\004\075\201\001\002\000\030\012\040\014" +
    "\044\016\010\017\004\031\025\035\021\050\037\051\042" +
    "\054\007\055\032\075\uffc5\001\002\000\010\031\025\051" +
    "\042\075\uffc5\001\002\000\004\075\uffc7\001\002\000\006" +
    "\031\025\075\uffc5\001\002\000\004\075\uffc9\001\002\000" +
    "\004\075\uffcb\001\002\000\004\075\uffc6\001\002\000\004" +
    "\075\uffc8\001\002\000\004\075\uffca\001\002\000\004\066" +
    "\202\001\002\000\004\002\uffcd\001\002\000\004\075\uffcc" +
    "\001\002\000\024\002\uffef\003\uffef\015\uffef\021\uffef\024" +
    "\uffef\027\uffef\033\uffef\060\uffef\075\uffef\001\002\000\024" +
    "\002\ufff0\003\ufff0\015\ufff0\021\ufff0\024\ufff0\027\ufff0\033" +
    "\ufff0\060\ufff0\075\ufff0\001\002\000\004\106\210\001\002" +
    "\000\016\036\223\041\222\043\221\044\224\046\uffb7\074" +
    "\uffb7\001\002\000\022\012\040\014\044\016\010\017\004" +
    "\035\021\050\037\054\007\055\032\001\002\000\004\010" +
    "\212\001\002\000\006\065\214\107\213\001\002\000\016" +
    "\036\uffbc\041\uffbc\043\uffbc\044\uffbc\046\uffbc\074\uffbc\001" +
    "\002\000\022\012\040\014\044\016\010\017\004\035\021" +
    "\050\037\054\007\055\032\001\002\000\016\036\uffbe\041" +
    "\uffbe\043\uffbe\044\uffbe\046\uffbe\074\uffbe\001\002\000\004" +
    "\010\217\001\002\000\006\065\214\107\213\001\002\000" +
    "\016\036\uffbd\041\uffbd\043\uffbd\044\uffbd\046\uffbd\074\uffbd" +
    "\001\002\000\006\046\uffba\074\uffba\001\002\000\006\046" +
    "\uffbb\074\uffbb\001\002\000\006\046\uffb8\074\uffb8\001\002" +
    "\000\006\046\uffb9\074\uffb9\001\002\000\006\046\226\074" +
    "\uffb5\001\002\000\004\106\210\001\002\000\004\074\230" +
    "\001\002\000\022\012\040\014\044\016\010\017\004\035" +
    "\021\050\037\054\007\055\032\001\002\000\010\002\uffbf" +
    "\031\uffbf\075\uffbf\001\002\000\004\045\uffb3\001\002\000" +
    "\004\045\235\001\002\000\004\075\240\001\002\000\004" +
    "\010\236\001\002\000\004\066\237\001\002\000\004\075" +
    "\uffb2\001\002\000\010\002\uffb4\031\uffb4\075\uffb4\001\002" +
    "\000\004\074\uffb6\001\002\000\006\010\245\107\244\001" +
    "\002\000\004\065\252\001\002\000\004\074\250\001\002" +
    "\000\004\113\246\001\002\000\004\011\247\001\002\000" +
    "\006\065\uffd8\107\uffd8\001\002\000\004\075\251\001\002" +
    "\000\024\002\uffe9\003\uffe9\015\uffe9\021\uffe9\024\uffe9\027" +
    "\uffe9\033\uffe9\060\uffe9\075\uffe9\001\002\000\016\010\125" +
    "\011\121\102\126\106\116\110\120\112\123\001\002\000" +
    "\004\065\254\001\002\000\004\010\245\001\002\000\004" +
    "\107\256\001\002\000\004\074\257\001\002\000\020\003" +
    "\026\015\014\021\036\024\033\027\023\033\006\060\017" +
    "\001\002\000\022\003\026\015\014\021\036\024\033\027" +
    "\023\033\006\060\017\075\261\001\002\000\024\002\uffea" +
    "\003\uffea\015\uffea\021\uffea\024\uffea\027\uffea\033\uffea\060" +
    "\uffea\075\uffea\001\002\000\016\010\125\011\121\102\126" +
    "\106\116\110\120\112\123\001\002\000\004\107\264\001" +
    "\002\000\004\074\265\001\002\000\020\003\026\015\014" +
    "\021\036\024\033\027\023\033\006\060\017\001\002\000" +
    "\022\003\026\015\014\021\036\024\033\027\023\033\006" +
    "\060\017\075\267\001\002\000\024\002\uffec\003\uffec\015" +
    "\uffec\021\uffec\024\uffec\027\uffec\033\uffec\060\uffec\075\uffec" +
    "\001\002\000\024\002\ufff2\003\ufff2\015\ufff2\021\ufff2\024" +
    "\ufff2\027\ufff2\033\ufff2\060\ufff2\075\ufff2\001\002\000\004" +
    "\074\272\001\002\000\004\010\274\001\002\000\034\002" +
    "\uffc4\012\uffc4\014\uffc4\016\uffc4\017\uffc4\026\uffc4\031\uffc4" +
    "\035\uffc4\050\uffc4\051\uffc4\054\uffc4\055\uffc4\075\uffc4\001" +
    "\002\000\006\065\276\075\uffc1\001\002\000\004\075\302" +
    "\001\002\000\004\010\300\001\002\000\004\075\uffc2\001" +
    "\002\000\006\065\276\075\uffc1\001\002\000\004\075\uffc0" +
    "\001\002\000\004\066\303\001\002\000\034\002\uffc3\012" +
    "\uffc3\014\uffc3\016\uffc3\017\uffc3\026\uffc3\031\uffc3\035\uffc3" +
    "\050\uffc3\051\uffc3\054\uffc3\055\uffc3\075\uffc3\001\002\000" +
    "\016\010\125\011\121\102\126\106\116\110\120\112\123" +
    "\001\002\000\004\107\306\001\002\000\004\074\307\001" +
    "\002\000\020\003\026\015\014\021\036\024\033\027\023" +
    "\033\006\060\017\001\002\000\022\003\026\015\014\021" +
    "\036\024\033\027\023\033\006\060\017\075\311\001\002" +
    "\000\026\002\uffee\003\uffee\015\uffee\021\uffee\024\uffee\025" +
    "\312\027\uffee\033\uffee\060\uffee\075\uffee\001\002\000\004" +
    "\074\313\001\002\000\020\003\026\015\014\021\036\024" +
    "\033\027\023\033\006\060\017\001\002\000\022\003\026" +
    "\015\014\021\036\024\033\027\023\033\006\060\017\075" +
    "\315\001\002\000\024\002\uffed\003\uffed\015\uffed\021\uffed" +
    "\024\uffed\027\uffed\033\uffed\060\uffed\075\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\044\002\044\003\010\004\021\006\026\007" +
    "\027\010\014\011\034\020\004\022\017\024\046\034\015" +
    "\035\047\037\042\040\045\041\023\043\033\047\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\112\006\026\007\027" +
    "\010\014\011\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\071\001\001\000\002\001" +
    "\001\000\012\022\073\037\042\040\045\041\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\036\101\037\100\040\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\010\004\110\006\026\007\027\010" +
    "\014\011\034\001\001\000\014\003\112\006\026\007\027" +
    "\010\014\011\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\121\013\123\014\116" +
    "\001\001\000\010\012\161\013\147\014\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\145\013\123\014\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\126\001\001" +
    "\000\002\001\001\000\004\013\130\001\001\000\002\001" +
    "\001\000\004\013\143\001\001\000\002\001\001\000\004" +
    "\013\142\001\001\000\004\013\141\001\001\000\004\013" +
    "\140\001\001\000\004\013\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\146\013\147\014\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\123\014\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\123\014\156\001" +
    "\001\000\010\012\157\013\147\014\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\020\170" +
    "\022\167\024\172\037\042\040\045\041\023\043\165\050" +
    "\166\051\174\052\173\053\171\001\001\000\030\020\170" +
    "\022\167\024\172\037\042\040\045\041\023\043\165\050" +
    "\202\051\174\052\173\053\171\001\001\000\002\001\001" +
    "\000\024\020\170\022\167\024\172\037\042\040\045\041" +
    "\023\051\177\052\173\053\171\001\001\000\012\020\170" +
    "\024\172\052\176\053\171\001\001\000\002\001\001\000" +
    "\006\024\172\053\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\206\001" +
    "\001\000\004\027\224\001\001\000\006\037\210\040\045" +
    "\001\001\000\002\001\001\000\004\026\214\001\001\000" +
    "\002\001\001\000\006\037\215\040\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\226\001\001\000" +
    "\004\025\240\001\001\000\004\031\230\001\001\000\012" +
    "\022\231\037\042\040\045\041\023\001\001\000\002\001" +
    "\001\000\004\032\232\001\001\000\004\033\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\252\013\123\014" +
    "\116\001\001\000\002\001\001\000\004\015\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\010\004" +
    "\257\006\026\007\027\010\014\011\034\001\001\000\014" +
    "\003\112\006\026\007\027\010\014\011\034\001\001\000" +
    "\002\001\001\000\010\012\262\013\123\014\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\010\004" +
    "\265\006\026\007\027\010\014\011\034\001\001\000\014" +
    "\003\112\006\026\007\027\010\014\011\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\274\001" +
    "\001\000\002\001\001\000\004\046\276\001\001\000\002" +
    "\001\001\000\004\045\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\304\013\123" +
    "\014\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\010\004\307\006\026\007\027\010\014\011\034" +
    "\001\001\000\014\003\112\006\026\007\027\010\014\011" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\010\004\313\006\026\007\027\010\014\011\034\001" +
    "\001\000\014\003\112\006\026\007\027\010\014\011\034" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();

    public void syntax_error(Symbol s){
        errores.add(s);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMFUNC ::= TYPENAME Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARASIGNA ::= Identificador Op_atribucion Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARASIGNA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCIONRETURN ::= Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCIONCUERPO ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCUERPO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCIONCONTEN ::= LlaveAbre DECLARVARIABLE FUNCIONCUERPO FUNCIONRETURN LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCIONRETURNS ::= Returns FUNCIONATRIB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNATRIBDOS ::= ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNATRIBDOS ::= Coma TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCIONATRIB ::= ParentAbre TYPENAME Identificador FUNATRIBDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTRACTPART3 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONTRACTPART2 ::= CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTRACTPART1 ::= CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTRACTPART1 ::= DECLARVARIABLE CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTRACTPART ::= CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador Op_atribucion Literal PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRUCTCONTEN ::= LlaveAbre DECLARVARIABLE LlaveCierra PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRUCTDEF ::= Struct Identificador STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION_ATRIBUCION ::= Identificador Op_atribucion Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ATRIBUCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRECION_ARITMETICA ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRECION_ARITMETICA ::= ParentAbre EXPRECION_ARITMETICA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRECION_ARITMETICA ::= Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mod EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Div EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Mult EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Resta EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRECION_ARITMETICA ::= EXPRECION_ARITMETICA Suma EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRECION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION_PRIMARIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION_PRIMARIA ::= EXPRECION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_BOOLEANA ::= ParentAbre EXPRESION_BOOLEANA ParentCierre Op_relacional EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION_BOOLEANA ::= EXPRESION_PRIMARIA Op_relacional ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION_BOOLEANA ::= EXPRESION_PRIMARIA Op_relacional EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION_BOOLEANA ::= Not ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION_BOOLEANA ::= Not EXPRESION_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_FOR ::= For ParentAbre ParentCierre LlaveAbre LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_FOR ::= For ParentAbre EXPRESION_ATRIBUCION Coma EXPRESION_BOOLEANA Coma EXPRESION_ATRIBUCION ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIA LlaveCierra While ParentAbre EXPRESION_BOOLEANA ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_WHILE ::= While ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_IFELSE ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra Else LlaveAbre LISTA_SENTENCIA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IFELSE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_IFELSE ::= If ParentAbre EXPRESION_BOOLEANA ParentCierre LlaveAbre LISTA_SENTENCIA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IFELSE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_IFELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_SENTENCIA ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_SENTENCIA ::= LISTA_SENTENCIA SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= ENUMDEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= CONTRACTDEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= DECLARVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= VARASIGNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= FUNCIONDEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= STRUCTDEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

