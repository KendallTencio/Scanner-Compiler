
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 15 23:24:46 CST 2020
//----------------------------------------------------

package codigo;

import java.io.InputStreamReader;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.parser;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 15 23:24:46 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\233\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\002\000\002\065\004\000\002\065\002\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\066\004\000\002\066\002\000\002" +
    "\067\003\000\002\067\003\000\002\067\004\000\002\067" +
    "\003\000\002\067\003\000\002\067\004\000\002\067\004" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\067\004\000\002\067\004\000\002\067\004\000\002" +
    "\010\011\000\002\071\002\000\002\010\013\000\002\011" +
    "\006\000\002\072\002\000\002\012\012\000\002\013\012" +
    "\000\002\014\015\000\002\014\015\000\002\015\007\000" +
    "\002\022\005\000\002\022\005\000\002\022\004\000\002" +
    "\022\003\000\002\022\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\004\000\002\022\003\000\002\022\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\022\004\000\002\022\004\000\002\022\003\000\002\025" +
    "\007\000\002\026\005\000\002\026\005\000\002\026\002" +
    "\000\002\073\002\000\002\027\007\000\002\074\002\000" +
    "\002\027\010\000\002\027\003\000\002\027\005\000\002" +
    "\075\002\000\002\046\006\000\002\046\002\000\002\052" +
    "\007\000\002\052\010\000\002\047\005\000\002\047\002" +
    "\000\002\076\002\000\002\044\006\000\002\045\005\000" +
    "\002\053\003\000\002\053\003\000\002\053\004\000\002" +
    "\053\002\000\002\060\007\000\002\060\004\000\002\061" +
    "\004\000\002\061\003\000\002\077\002\000\002\062\006" +
    "\000\002\062\005\000\002\100\002\000\002\062\004\000" +
    "\002\063\004\000\002\063\003\000\002\064\004\000\002" +
    "\064\002\000\002\054\005\000\002\055\006\000\002\055" +
    "\004\000\002\056\004\000\002\056\002\000\002\057\004" +
    "\000\002\032\010\000\002\101\002\000\002\102\002\000" +
    "\002\103\002\000\002\033\012\000\002\033\004\000\002" +
    "\033\004\000\002\104\002\000\002\034\007\000\002\034" +
    "\002\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\002\000\002\105\002\000" +
    "\002\036\005\000\002\036\002\000\002\106\002\000\002" +
    "\107\002\000\002\037\007\000\002\037\004\000\002\037" +
    "\004\000\002\070\005\000\002\070\003\000\002\110\002" +
    "\000\002\041\006\000\002\041\004\000\002\043\004\000" +
    "\002\043\004\000\002\043\002\000\002\031\005\000\002" +
    "\031\005\000\002\031\002\000\002\050\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\042\006\000\002\042\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\004\043\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\004\067\011\001\002\000" +
    "\034\002\ufffb\003\022\013\027\015\023\017\012\020\032" +
    "\023\026\027\021\036\015\051\033\052\020\055\017\056" +
    "\025\001\002\000\014\003\uff6f\011\uff6f\044\uff6f\045\uff6f" +
    "\071\uff6f\001\002\000\014\003\uff71\011\uff71\044\uff71\045" +
    "\uff71\071\uff71\001\002\000\014\003\u0119\011\uffa7\044\u0117" +
    "\045\u011b\071\u0118\001\002\000\014\003\uff6c\011\uff6c\044" +
    "\uff6c\045\uff6c\071\uff6c\001\002\000\034\002\ufffb\003\022" +
    "\013\027\015\023\017\012\020\032\023\026\027\021\036" +
    "\015\051\033\052\020\055\017\056\025\001\002\000\014" +
    "\003\uff6a\011\uff6a\044\uff6a\045\uff6a\071\uff6a\001\002\000" +
    "\004\011\u010c\001\002\000\004\011\u0100\001\002\000\004" +
    "\076\377\001\002\000\014\003\uff70\011\uff70\044\uff70\045" +
    "\uff70\071\uff70\001\002\000\004\067\uffb6\001\002\000\014" +
    "\003\uff69\011\uff69\044\uff69\045\uff69\071\uff69\001\002\000" +
    "\004\011\042\001\002\000\014\003\uff6d\011\uff6d\044\uff6d" +
    "\045\uff6d\071\uff6d\001\002\000\004\067\040\001\002\000" +
    "\034\002\ufffb\003\022\013\027\015\023\017\012\020\032" +
    "\023\026\027\021\036\015\051\033\052\020\055\017\056" +
    "\025\001\002\000\014\003\uff6e\011\uff6e\044\uff6e\045\uff6e" +
    "\071\uff6e\001\002\000\014\003\uff6b\011\uff6b\044\uff6b\045" +
    "\uff6b\071\uff6b\001\002\000\004\002\000\001\002\000\034" +
    "\002\ufffb\003\022\013\027\015\023\017\012\020\032\023" +
    "\026\027\021\036\015\051\033\052\020\055\017\056\025" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\uffff\001" +
    "\002\000\034\002\ufffb\003\022\013\027\015\023\017\012" +
    "\020\032\023\026\027\021\036\015\051\033\052\020\055" +
    "\017\056\025\001\002\000\004\002\ufffc\001\002\000\004" +
    "\075\043\001\002\000\034\011\052\013\uffa2\015\uffa2\017" +
    "\uffa2\020\uffa2\027\021\032\uff9f\036\uffa2\051\uffa2\052\uff9f" +
    "\055\uffa2\056\uffa2\076\uff9f\001\002\000\004\076\376\001" +
    "\002\000\004\067\374\001\002\000\034\011\052\013\uffa2" +
    "\015\uffa2\017\uffa2\020\uffa2\027\021\032\uff9f\036\uffa2\051" +
    "\uffa2\052\uff9f\055\uffa2\056\uffa2\076\uff9f\001\002\000\010" +
    "\032\147\052\020\076\uff9a\001\002\000\004\076\uffa3\001" +
    "\002\000\022\013\027\015\023\017\012\020\032\036\015" +
    "\051\033\055\017\056\025\001\002\000\004\114\uffad\001" +
    "\002\000\004\114\054\001\002\000\022\011\065\012\060" +
    "\053\057\103\070\107\055\111\056\113\061\115\066\001" +
    "\002\000\022\011\065\012\060\053\057\103\070\107\055" +
    "\111\056\113\061\115\066\001\002\000\034\066\uffcd\067" +
    "\uffcd\070\uffcd\073\uffcd\074\uffcd\102\uffcd\103\uffcd\104\uffcd" +
    "\105\uffcd\106\uffcd\110\uffcd\112\uffcd\114\uffcd\001\002\000" +
    "\006\070\136\107\135\001\002\000\034\066\uffc2\067\uffc2" +
    "\070\uffc2\073\uffc2\074\uffc2\102\uffc2\103\uffc2\104\uffc2\105" +
    "\uffc2\106\uffc2\110\uffc2\112\uffc2\114\uffc2\001\002\000\022" +
    "\011\065\012\060\053\057\103\070\107\055\111\056\113" +
    "\061\115\066\001\002\000\034\066\uffbf\067\uffbf\070\uffbf" +
    "\073\uffbf\074\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106" +
    "\uffbf\110\uffbf\112\uffbf\114\uffbf\001\002\000\034\066\uffc6" +
    "\067\uffc6\070\uffc6\073\uffc6\074\uffc6\102\uffc6\103\uffc6\104" +
    "\uffc6\105\uffc6\106\uffc6\110\uffc6\112\uffc6\114\uffc6\001\002" +
    "\000\034\066\uffc5\067\uffc5\070\uffc5\073\uffc5\074\uffc5\102" +
    "\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\110\uffc5\112\uffc5" +
    "\114\uffc5\001\002\000\040\066\uffce\067\uffce\070\uffce\073" +
    "\uffce\074\uffce\102\uffce\103\uffce\104\uffce\105\uffce\106\uffce" +
    "\107\115\110\uffce\112\uffce\114\uffce\115\116\001\002\000" +
    "\004\011\114\001\002\000\024\067\uffac\070\100\073\075" +
    "\102\101\103\077\104\074\105\076\106\072\112\073\001" +
    "\002\000\022\011\065\012\060\053\057\103\070\107\055" +
    "\111\056\113\061\115\066\001\002\000\034\066\uffc7\067" +
    "\uffc7\070\100\073\075\074\uffc7\102\uffc7\103\uffc7\104\074" +
    "\105\076\106\072\110\uffc7\112\073\114\uffc7\001\002\000" +
    "\022\011\065\012\060\053\057\103\070\107\055\111\056" +
    "\113\061\115\066\001\002\000\022\011\065\012\060\053" +
    "\057\103\070\107\055\111\056\113\061\115\066\001\002" +
    "\000\022\011\065\012\060\053\057\103\070\107\055\111" +
    "\056\113\061\115\066\001\002\000\022\011\065\012\060" +
    "\053\057\103\070\107\055\111\056\113\061\115\066\001" +
    "\002\000\022\011\065\012\060\053\057\103\070\107\055" +
    "\111\056\113\061\115\066\001\002\000\022\011\065\012" +
    "\060\053\057\103\070\107\055\111\056\113\061\115\066" +
    "\001\002\000\022\011\065\012\060\053\057\103\070\107" +
    "\055\111\056\113\061\115\066\001\002\000\022\011\065" +
    "\012\060\053\057\103\070\107\055\111\056\113\061\115" +
    "\066\001\002\000\034\066\uffcc\067\uffcc\070\100\073\075" +
    "\074\uffcc\102\uffcc\103\uffcc\104\074\105\076\106\072\110" +
    "\uffcc\112\073\114\uffcc\001\002\000\034\066\uffc3\067\uffc3" +
    "\070\uffc3\073\075\074\uffc3\102\uffc3\103\uffc3\104\uffc3\105" +
    "\uffc3\106\uffc3\110\uffc3\112\uffc3\114\uffc3\001\002\000\034" +
    "\066\uffcb\067\uffcb\070\100\073\075\074\uffcb\102\uffcb\103" +
    "\uffcb\104\074\105\076\106\072\110\uffcb\112\073\114\uffcb" +
    "\001\002\000\034\066\uffc9\067\uffc9\070\100\073\075\074" +
    "\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\110\uffc9" +
    "\112\073\114\uffc9\001\002\000\024\070\100\073\075\074" +
    "\107\102\101\103\077\104\074\105\076\106\072\112\073" +
    "\001\002\000\022\011\065\012\060\053\057\103\070\107" +
    "\055\111\056\113\061\115\066\001\002\000\034\066\uffd2" +
    "\067\uffd2\070\uffd2\073\uffd2\074\uffd2\102\uffd2\103\uffd2\104" +
    "\uffd2\105\uffd2\106\uffd2\110\uffd2\112\uffd2\114\uffd2\001\002" +
    "\000\034\066\uffca\067\uffca\070\100\073\075\074\uffca\102" +
    "\uffca\103\uffca\104\uffca\105\uffca\106\uffca\110\uffca\112\073" +
    "\114\uffca\001\002\000\034\066\uffd1\067\uffd1\070\100\073" +
    "\075\074\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1" +
    "\110\uffd1\112\uffd1\114\uffd1\001\002\000\034\066\uffc8\067" +
    "\uffc8\070\100\073\075\074\uffc8\102\uffc8\103\uffc8\104\uffc8" +
    "\105\uffc8\106\uffc8\110\uffc8\112\073\114\uffc8\001\002\000" +
    "\034\066\uffc1\067\uffc1\070\uffc1\073\uffc1\074\uffc1\102\uffc1" +
    "\103\uffc1\104\uffc1\105\uffc1\106\uffc1\110\uffc1\112\uffc1\114" +
    "\uffc1\001\002\000\024\011\065\012\060\053\057\103\070" +
    "\107\055\110\uff75\111\056\113\061\115\066\001\002\000" +
    "\034\066\uffc0\067\uffc0\070\uffc0\073\uffc0\074\uffc0\102\uffc0" +
    "\103\uffc0\104\uffc0\105\uffc0\106\uffc0\110\uffc0\112\uffc0\114" +
    "\uffc0\001\002\000\004\110\133\001\002\000\006\066\124" +
    "\110\uff72\001\002\000\030\066\124\070\100\073\075\102" +
    "\101\103\077\104\074\105\076\106\072\110\uff72\112\073" +
    "\114\122\001\002\000\022\011\065\012\060\053\057\103" +
    "\070\107\055\111\056\113\061\115\066\001\002\000\004" +
    "\110\uff77\001\002\000\022\011\065\012\060\053\057\103" +
    "\070\107\055\111\056\113\061\115\066\001\002\000\006" +
    "\066\124\110\uff72\001\002\000\030\066\124\070\100\073" +
    "\075\102\101\103\077\104\074\105\076\106\072\110\uff72" +
    "\112\073\114\122\001\002\000\004\110\uff74\001\002\000" +
    "\004\110\uff73\001\002\000\026\066\uffab\070\100\073\075" +
    "\102\101\103\077\104\074\105\076\106\072\110\uffab\112" +
    "\073\001\002\000\004\110\uff76\001\002\000\034\066\uff68" +
    "\067\uff68\070\uff68\073\uff68\074\uff68\102\uff68\103\uff68\104" +
    "\uff68\105\uff68\106\uff68\110\uff68\112\uff68\114\uff68\001\002" +
    "\000\034\066\uffcf\067\uffcf\070\100\073\075\074\uffcf\102" +
    "\101\103\077\104\074\105\076\106\072\110\uffcf\112\073" +
    "\114\uffcf\001\002\000\024\011\065\012\060\053\057\103" +
    "\070\107\055\110\uff75\111\056\113\061\115\066\001\002" +
    "\000\022\011\065\012\060\053\057\103\070\107\055\111" +
    "\056\113\061\115\066\001\002\000\034\066\uffc4\067\uffc4" +
    "\070\uffc4\073\075\074\uffc4\102\uffc4\103\uffc4\104\uffc4\105" +
    "\uffc4\106\uffc4\110\uffc4\112\uffc4\114\uffc4\001\002\000\004" +
    "\110\141\001\002\000\034\066\uff67\067\uff67\070\uff67\073" +
    "\uff67\074\uff67\102\uff67\103\uff67\104\uff67\105\uff67\106\uff67" +
    "\110\uff67\112\uff67\114\uff67\001\002\000\024\070\100\073" +
    "\075\102\101\103\077\104\074\105\076\106\072\110\143" +
    "\112\073\001\002\000\034\066\uffd0\067\uffd0\070\uffd0\073" +
    "\uffd0\074\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0" +
    "\110\uffd0\112\uffd0\114\uffd0\001\002\000\004\067\145\001" +
    "\002\000\032\011\052\013\uffa2\015\uffa2\017\uffa2\020\uffa2" +
    "\032\uff9f\036\uffa2\051\uffa2\052\uff9f\055\uffa2\056\uffa2\076" +
    "\uff9f\001\002\000\004\076\uffa1\001\002\000\004\011\156" +
    "\001\002\000\006\032\147\076\uff9a\001\002\000\010\032" +
    "\147\052\020\076\uff9a\001\002\000\004\076\uff9c\001\002" +
    "\000\004\076\uff9e\001\002\000\004\076\uff9d\001\002\000" +
    "\004\076\uff9b\001\002\000\006\003\160\107\161\001\002" +
    "\000\020\003\uff85\037\202\042\201\044\200\045\203\047" +
    "\uff85\075\uff85\001\002\000\004\110\177\001\002\000\024" +
    "\013\uff92\015\uff92\017\uff92\020\uff92\036\uff92\051\uff92\055" +
    "\uff92\056\uff92\110\162\001\002\000\020\003\uff8e\037\uff8e" +
    "\042\uff8e\044\uff8e\045\uff8e\047\uff8e\075\uff8e\001\002\000" +
    "\022\013\027\015\023\017\012\020\032\036\015\051\033" +
    "\055\017\056\025\001\002\000\004\011\165\001\002\000" +
    "\006\066\uff91\110\uff91\001\002\000\006\066\167\110\uff8a" +
    "\001\002\000\022\013\027\015\023\017\012\020\032\036" +
    "\015\051\033\055\017\056\025\001\002\000\004\110\uff90" +
    "\001\002\000\004\110\172\001\002\000\020\003\uff8f\037" +
    "\uff8f\042\uff8f\044\uff8f\045\uff8f\047\uff8f\075\uff8f\001\002" +
    "\000\004\011\174\001\002\000\006\066\uff8c\110\uff8c\001" +
    "\002\000\006\066\167\110\uff8a\001\002\000\004\110\uff8b" +
    "\001\002\000\020\003\uff8d\037\uff8d\042\uff8d\044\uff8d\045" +
    "\uff8d\047\uff8d\075\uff8d\001\002\000\010\003\uff88\047\uff88" +
    "\075\uff88\001\002\000\010\003\uff89\047\uff89\075\uff89\001" +
    "\002\000\010\003\uff86\047\uff86\075\uff86\001\002\000\010" +
    "\003\uff87\047\uff87\075\uff87\001\002\000\010\003\uff82\047" +
    "\205\075\uff82\001\002\000\006\003\uff84\107\uff84\001\002" +
    "\000\006\003\210\075\207\001\002\000\064\003\uff81\011" +
    "\uff81\012\uff81\013\uff81\015\uff81\016\uff81\017\uff81\020\uff81" +
    "\022\uff81\025\uff81\030\uff81\034\uff81\036\uff81\046\uff81\051" +
    "\uff81\053\uff81\055\uff81\056\uff81\061\uff81\076\uff81\103\uff81" +
    "\107\uff81\111\uff81\113\uff81\115\uff81\001\002\000\006\067" +
    "\213\076\212\001\002\000\006\032\uff93\076\uff93\001\002" +
    "\000\006\032\uff7e\076\uff7e\001\002\000\006\032\uff7d\076" +
    "\uff7d\001\002\000\064\003\232\011\237\012\060\013\027" +
    "\015\023\016\221\017\012\020\032\022\236\025\234\030" +
    "\231\034\217\036\015\046\224\051\033\053\057\055\017" +
    "\056\025\061\226\076\uffe9\103\070\107\055\111\056\113" +
    "\061\115\066\001\002\000\044\003\232\011\237\012\060" +
    "\016\221\022\236\025\234\030\231\034\217\046\224\053" +
    "\057\061\226\076\uffe9\103\070\107\055\111\056\113\061" +
    "\115\066\001\002\000\004\076\uff7b\001\002\000\004\107" +
    "\354\001\002\000\044\003\uffe8\011\uffe8\012\uffe8\016\uffe8" +
    "\022\uffe8\025\uffe8\030\uffe8\034\uffe8\046\uffe8\053\uffe8\061" +
    "\uffe8\076\uffe8\103\uffe8\107\uffe8\111\uffe8\113\uffe8\115\uffe8" +
    "\001\002\000\004\067\353\001\002\000\004\067\352\001" +
    "\002\000\004\076\uff80\001\002\000\004\011\345\001\002" +
    "\000\004\067\344\001\002\000\004\107\uffd7\001\002\000" +
    "\004\067\333\001\002\000\024\067\332\070\uffbf\073\uffbf" +
    "\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\112\uffbf\001" +
    "\002\000\004\107\307\001\002\000\010\067\306\076\304" +
    "\110\305\001\002\000\044\003\uffe7\011\uffe7\012\uffe7\016" +
    "\uffe7\022\uffe7\025\uffe7\030\uffe7\034\uffe7\046\uffe7\053\uffe7" +
    "\061\uffe7\076\uffe7\103\uffe7\107\uffe7\111\uffe7\113\uffe7\115" +
    "\uffe7\001\002\000\004\075\245\001\002\000\044\003\uffe5" +
    "\011\uffe5\012\uffe5\016\uffe5\022\uffe5\025\uffe5\030\uffe5\034" +
    "\uffe5\046\uffe5\053\uffe5\061\uffe5\076\uffe5\103\uffe5\107\uffe5" +
    "\111\uffe5\113\uffe5\115\uffe5\001\002\000\004\067\244\001" +
    "\002\000\030\070\uffce\073\uffce\102\uffce\103\uffce\104\uffce" +
    "\105\uffce\106\uffce\107\115\112\uffce\114\uffad\115\116\001" +
    "\002\000\044\003\uffe4\011\uffe4\012\uffe4\016\uffe4\022\uffe4" +
    "\025\uffe4\030\uffe4\034\uffe4\046\uffe4\053\uffe4\061\uffe4\076" +
    "\uffe4\103\uffe4\107\uffe4\111\uffe4\113\uffe4\115\uffe4\001\002" +
    "\000\022\070\100\073\075\102\101\103\077\104\074\105" +
    "\076\106\072\112\073\001\002\000\024\067\243\070\uffc5" +
    "\073\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\112" +
    "\uffc5\001\002\000\044\003\uffe1\011\uffe1\012\uffe1\016\uffe1" +
    "\022\uffe1\025\uffe1\030\uffe1\034\uffe1\046\uffe1\053\uffe1\061" +
    "\uffe1\076\uffe1\103\uffe1\107\uffe1\111\uffe1\113\uffe1\115\uffe1" +
    "\001\002\000\044\003\uffdf\011\uffdf\012\uffdf\016\uffdf\022" +
    "\uffdf\025\uffdf\030\uffdf\034\uffdf\046\uffdf\053\uffdf\061\uffdf" +
    "\076\uffdf\103\uffdf\107\uffdf\111\uffdf\113\uffdf\115\uffdf\001" +
    "\002\000\064\003\256\011\237\012\060\013\027\015\023" +
    "\016\250\017\012\020\032\022\261\025\234\030\231\034" +
    "\217\036\015\046\224\051\033\053\057\055\017\056\025" +
    "\061\226\076\ufff9\103\070\107\055\111\056\113\061\115" +
    "\066\001\002\000\064\003\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\022\ufff8\025\ufff8\030" +
    "\ufff8\034\ufff8\036\ufff8\046\ufff8\051\ufff8\053\ufff8\055\ufff8" +
    "\056\ufff8\061\ufff8\076\ufff8\103\ufff8\107\ufff8\111\ufff8\113" +
    "\ufff8\115\ufff8\001\002\000\064\003\256\011\237\012\060" +
    "\013\027\015\023\016\250\017\012\020\032\022\261\025" +
    "\234\030\231\034\217\036\015\046\224\051\033\053\057" +
    "\055\017\056\025\061\226\076\ufff9\103\070\107\055\111" +
    "\056\113\061\115\066\001\002\000\004\067\302\001\002" +
    "\000\004\067\301\001\002\000\004\067\300\001\002\000" +
    "\004\067\277\001\002\000\024\067\276\070\uffbf\073\uffbf" +
    "\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\112\uffbf\001" +
    "\002\000\004\076\271\001\002\000\010\067\270\076\266" +
    "\110\267\001\002\000\064\003\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\025\ufff7" +
    "\030\ufff7\034\ufff7\036\ufff7\046\ufff7\051\ufff7\053\ufff7\055" +
    "\ufff7\056\ufff7\061\ufff7\076\ufff7\103\ufff7\107\ufff7\111\ufff7" +
    "\113\ufff7\115\ufff7\001\002\000\064\003\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5" +
    "\025\ufff5\030\ufff5\034\ufff5\036\ufff5\046\ufff5\051\ufff5\053" +
    "\ufff5\055\ufff5\056\ufff5\061\ufff5\076\ufff5\103\ufff5\107\ufff5" +
    "\111\ufff5\113\ufff5\115\ufff5\001\002\000\004\067\265\001" +
    "\002\000\064\003\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\022\ufff4\025\ufff4\030\ufff4\034" +
    "\ufff4\036\ufff4\046\ufff4\051\ufff4\053\ufff4\055\ufff4\056\ufff4" +
    "\061\ufff4\076\ufff4\103\ufff4\107\ufff4\111\ufff4\113\ufff4\115" +
    "\ufff4\001\002\000\024\067\264\070\uffc5\073\uffc5\102\uffc5" +
    "\103\uffc5\104\uffc5\105\uffc5\106\uffc5\112\uffc5\001\002\000" +
    "\064\003\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\022\ufff0\025\ufff0\030\ufff0\034\ufff0\036" +
    "\ufff0\046\ufff0\051\ufff0\053\ufff0\055\ufff0\056\ufff0\061\ufff0" +
    "\076\ufff0\103\ufff0\107\ufff0\111\ufff0\113\ufff0\115\ufff0\001" +
    "\002\000\064\003\uffee\011\uffee\012\uffee\013\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\022\uffee\025\uffee\030\uffee\034" +
    "\uffee\036\uffee\046\uffee\051\uffee\053\uffee\055\uffee\056\uffee" +
    "\061\uffee\076\uffee\103\uffee\107\uffee\111\uffee\113\uffee\115" +
    "\uffee\001\002\000\064\003\uffec\011\uffec\012\uffec\013\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\022\uffec\025\uffec\030" +
    "\uffec\034\uffec\036\uffec\046\uffec\051\uffec\053\uffec\055\uffec" +
    "\056\uffec\061\uffec\076\uffec\103\uffec\107\uffec\111\uffec\113" +
    "\uffec\115\uffec\001\002\000\064\003\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\022\uffeb\025" +
    "\uffeb\030\uffeb\034\uffeb\036\uffeb\046\uffeb\051\uffeb\053\uffeb" +
    "\055\uffeb\056\uffeb\061\uffeb\076\uffeb\103\uffeb\107\uffeb\111" +
    "\uffeb\113\uffeb\115\uffeb\001\002\000\064\003\uffed\011\uffed" +
    "\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed\022" +
    "\uffed\025\uffed\030\uffed\034\uffed\036\uffed\046\uffed\051\uffed" +
    "\053\uffed\055\uffed\056\uffed\061\uffed\076\uffed\103\uffed\107" +
    "\uffed\111\uffed\113\uffed\115\uffed\001\002\000\004\061\272" +
    "\001\002\000\004\107\273\001\002\000\022\011\065\012" +
    "\060\053\057\103\070\107\055\111\056\113\061\115\066" +
    "\001\002\000\024\070\100\073\075\102\101\103\077\104" +
    "\074\105\076\106\072\110\275\112\073\001\002\000\004" +
    "\067\uffd5\001\002\000\064\003\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\025\ufff3" +
    "\030\ufff3\034\ufff3\036\ufff3\046\ufff3\051\ufff3\053\ufff3\055" +
    "\ufff3\056\ufff3\061\ufff3\076\ufff3\103\ufff3\107\ufff3\111\ufff3" +
    "\113\ufff3\115\ufff3\001\002\000\064\003\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2" +
    "\025\ufff2\030\ufff2\034\ufff2\036\ufff2\046\ufff2\051\ufff2\053" +
    "\ufff2\055\ufff2\056\ufff2\061\ufff2\076\ufff2\103\ufff2\107\ufff2" +
    "\111\ufff2\113\ufff2\115\ufff2\001\002\000\064\003\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\022\ufff1\025\ufff1\030\ufff1\034\ufff1\036\ufff1\046\ufff1\051" +
    "\ufff1\053\ufff1\055\ufff1\056\ufff1\061\ufff1\076\ufff1\103\ufff1" +
    "\107\ufff1\111\ufff1\113\ufff1\115\ufff1\001\002\000\064\003" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\022\ufff6\025\ufff6\030\ufff6\034\ufff6\036\ufff6\046" +
    "\ufff6\051\ufff6\053\ufff6\055\ufff6\056\ufff6\061\ufff6\076\ufff6" +
    "\103\ufff6\107\ufff6\111\ufff6\113\ufff6\115\ufff6\001\002\000" +
    "\064\003\uffef\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\022\uffef\025\uffef\030\uffef\034\uffef\036" +
    "\uffef\046\uffef\051\uffef\053\uffef\055\uffef\056\uffef\061\uffef" +
    "\076\uffef\103\uffef\107\uffef\111\uffef\113\uffef\115\uffef\001" +
    "\002\000\004\076\ufffa\001\002\000\044\003\uffdd\011\uffdd" +
    "\012\uffdd\016\uffdd\022\uffdd\025\uffdd\030\uffdd\034\uffdd\046" +
    "\uffdd\053\uffdd\061\uffdd\076\uffdd\103\uffdd\107\uffdd\111\uffdd" +
    "\113\uffdd\115\uffdd\001\002\000\044\003\uffdc\011\uffdc\012" +
    "\uffdc\016\uffdc\022\uffdc\025\uffdc\030\uffdc\034\uffdc\046\uffdc" +
    "\053\uffdc\061\uffdc\076\uffdc\103\uffdc\107\uffdc\111\uffdc\113" +
    "\uffdc\115\uffdc\001\002\000\044\003\uffde\011\uffde\012\uffde" +
    "\016\uffde\022\uffde\025\uffde\030\uffde\034\uffde\046\uffde\053" +
    "\uffde\061\uffde\076\uffde\103\uffde\107\uffde\111\uffde\113\uffde" +
    "\115\uffde\001\002\000\024\011\052\013\027\015\023\017" +
    "\012\020\032\036\015\051\033\055\017\056\025\001\002" +
    "\000\004\067\322\001\002\000\004\067\312\001\002\000" +
    "\022\011\065\012\060\053\057\103\070\107\055\111\056" +
    "\113\061\115\066\001\002\000\024\067\314\070\100\073" +
    "\075\102\101\103\077\104\074\105\076\106\072\112\073" +
    "\001\002\000\022\011\065\012\060\053\057\103\070\107" +
    "\055\111\056\113\061\115\066\001\002\000\024\070\100" +
    "\073\075\102\101\103\077\104\074\105\076\106\072\110" +
    "\316\112\073\001\002\000\004\075\317\001\002\000\064" +
    "\003\256\011\237\012\060\013\027\015\023\016\250\017" +
    "\012\020\032\022\261\025\234\030\231\034\217\036\015" +
    "\046\224\051\033\053\057\055\017\056\025\061\226\076" +
    "\ufff9\103\070\107\055\111\056\113\061\115\066\001\002" +
    "\000\004\076\321\001\002\000\064\003\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3" +
    "\025\uffd3\030\uffd3\034\uffd3\036\uffd3\046\uffd3\051\uffd3\053" +
    "\uffd3\055\uffd3\056\uffd3\061\uffd3\076\uffd3\103\uffd3\107\uffd3" +
    "\111\uffd3\113\uffd3\115\uffd3\001\002\000\022\011\065\012" +
    "\060\053\057\103\070\107\055\111\056\113\061\115\066" +
    "\001\002\000\024\067\324\070\100\073\075\102\101\103" +
    "\077\104\074\105\076\106\072\112\073\001\002\000\022" +
    "\011\065\012\060\053\057\103\070\107\055\111\056\113" +
    "\061\115\066\001\002\000\024\070\100\073\075\102\101" +
    "\103\077\104\074\105\076\106\072\110\326\112\073\001" +
    "\002\000\004\075\327\001\002\000\064\003\256\011\237" +
    "\012\060\013\027\015\023\016\250\017\012\020\032\022" +
    "\261\025\234\030\231\034\217\036\015\046\224\051\033" +
    "\053\057\055\017\056\025\061\226\076\ufff9\103\070\107" +
    "\055\111\056\113\061\115\066\001\002\000\004\076\331" +
    "\001\002\000\064\003\uffd4\011\uffd4\012\uffd4\013\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4\025\uffd4\030\uffd4" +
    "\034\uffd4\036\uffd4\046\uffd4\051\uffd4\053\uffd4\055\uffd4\056" +
    "\uffd4\061\uffd4\076\uffd4\103\uffd4\107\uffd4\111\uffd4\113\uffd4" +
    "\115\uffd4\001\002\000\044\003\uffe3\011\uffe3\012\uffe3\016" +
    "\uffe3\022\uffe3\025\uffe3\030\uffe3\034\uffe3\046\uffe3\053\uffe3" +
    "\061\uffe3\076\uffe3\103\uffe3\107\uffe3\111\uffe3\113\uffe3\115" +
    "\uffe3\001\002\000\064\003\232\011\237\012\060\013\027" +
    "\015\023\016\221\017\012\020\032\022\236\025\234\030" +
    "\231\034\217\036\015\046\224\051\033\053\057\055\017" +
    "\056\025\061\226\076\uffe9\103\070\107\055\111\056\113" +
    "\061\115\066\001\002\000\004\076\uff7c\001\002\000\004" +
    "\107\336\001\002\000\022\011\065\012\060\053\057\103" +
    "\070\107\055\111\056\113\061\115\066\001\002\000\024" +
    "\070\100\073\075\102\101\103\077\104\074\105\076\106" +
    "\072\110\340\112\073\001\002\000\004\075\341\001\002" +
    "\000\064\003\256\011\237\012\060\013\027\015\023\016" +
    "\250\017\012\020\032\022\261\025\234\030\231\034\217" +
    "\036\015\046\224\051\033\053\057\055\017\056\025\061" +
    "\226\076\ufff9\103\070\107\055\111\056\113\061\115\066" +
    "\001\002\000\004\076\343\001\002\000\064\003\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\022\uffd6\025\uffd6\030\uffd6\034\uffd6\036\uffd6\046\uffd6\051" +
    "\uffd6\053\uffd6\055\uffd6\056\uffd6\061\uffd6\076\uffd6\103\uffd6" +
    "\107\uffd6\111\uffd6\113\uffd6\115\uffd6\001\002\000\044\003" +
    "\uffe2\011\uffe2\012\uffe2\016\uffe2\022\uffe2\025\uffe2\030\uffe2" +
    "\034\uffe2\046\uffe2\053\uffe2\061\uffe2\076\uffe2\103\uffe2\107" +
    "\uffe2\111\uffe2\113\uffe2\115\uffe2\001\002\000\066\003\uff78" +
    "\011\uff78\012\uff78\013\uff78\015\uff78\016\uff78\017\uff78\020" +
    "\uff78\022\uff78\025\uff78\030\uff78\034\uff78\036\uff78\046\uff78" +
    "\051\uff78\053\uff78\055\uff78\056\uff78\061\uff78\067\uff7a\076" +
    "\uff78\103\uff78\107\uff78\111\uff78\113\uff78\115\uff78\001\002" +
    "\000\004\067\347\001\002\000\064\003\uff79\011\uff79\012" +
    "\uff79\013\uff79\015\uff79\016\uff79\017\uff79\020\uff79\022\uff79" +
    "\025\uff79\030\uff79\034\uff79\036\uff79\046\uff79\051\uff79\053" +
    "\uff79\055\uff79\056\uff79\061\uff79\076\uff79\103\uff79\107\uff79" +
    "\111\uff79\113\uff79\115\uff79\001\002\000\004\076\351\001" +
    "\002\000\006\032\uff7f\076\uff7f\001\002\000\044\003\uffe6" +
    "\011\uffe6\012\uffe6\016\uffe6\022\uffe6\025\uffe6\030\uffe6\034" +
    "\uffe6\046\uffe6\053\uffe6\061\uffe6\076\uffe6\103\uffe6\107\uffe6" +
    "\111\uffe6\113\uffe6\115\uffe6\001\002\000\044\003\uffe0\011" +
    "\uffe0\012\uffe0\016\uffe0\022\uffe0\025\uffe0\030\uffe0\034\uffe0" +
    "\046\uffe0\053\uffe0\061\uffe0\076\uffe0\103\uffe0\107\uffe0\111" +
    "\uffe0\113\uffe0\115\uffe0\001\002\000\022\011\065\012\060" +
    "\053\057\103\070\107\055\111\056\113\061\115\066\001" +
    "\002\000\024\070\100\073\075\102\101\103\077\104\074" +
    "\105\076\106\072\110\356\112\073\001\002\000\004\075" +
    "\357\001\002\000\064\003\256\011\237\012\060\013\027" +
    "\015\023\016\250\017\012\020\032\022\261\025\234\030" +
    "\231\034\217\036\015\046\224\051\033\053\057\055\017" +
    "\056\025\061\226\076\ufff9\103\070\107\055\111\056\113" +
    "\061\115\066\001\002\000\004\076\361\001\002\000\066" +
    "\003\uffdb\011\uffdb\012\uffdb\013\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\022\uffdb\025\uffdb\026\uffda\030\uffdb\034\uffdb" +
    "\036\uffdb\046\uffdb\051\uffdb\053\uffdb\055\uffdb\056\uffdb\061" +
    "\uffdb\076\uffdb\103\uffdb\107\uffdb\111\uffdb\113\uffdb\115\uffdb" +
    "\001\002\000\004\026\364\001\002\000\064\003\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\022\uffd9\025\uffd9\030\uffd9\034\uffd9\036\uffd9\046\uffd9\051" +
    "\uffd9\053\uffd9\055\uffd9\056\uffd9\061\uffd9\076\uffd9\103\uffd9" +
    "\107\uffd9\111\uffd9\113\uffd9\115\uffd9\001\002\000\004\075" +
    "\365\001\002\000\064\003\256\011\237\012\060\013\027" +
    "\015\023\016\250\017\012\020\032\022\261\025\234\030" +
    "\231\034\217\036\015\046\224\051\033\053\057\055\017" +
    "\056\025\061\226\076\ufff9\103\070\107\055\111\056\113" +
    "\061\115\066\001\002\000\004\076\367\001\002\000\064" +
    "\003\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\022\uffd8\025\uffd8\030\uffd8\034\uffd8\036\uffd8" +
    "\046\uffd8\051\uffd8\053\uffd8\055\uffd8\056\uffd8\061\uffd8\076" +
    "\uffd8\103\uffd8\107\uffd8\111\uffd8\113\uffd8\115\uffd8\001\002" +
    "\000\004\076\uffea\001\002\000\006\003\160\107\161\001" +
    "\002\000\006\003\uff83\075\uff83\001\002\000\004\076\uffa4" +
    "\001\002\000\032\011\052\013\uffa2\015\uffa2\017\uffa2\020" +
    "\uffa2\032\uff9f\036\uffa2\051\uffa2\052\uff9f\055\uffa2\056\uffa2" +
    "\076\uff9f\001\002\000\004\076\uffa0\001\002\000\034\002" +
    "\uffa6\003\uffa6\013\uffa6\015\uffa6\017\uffa6\020\uffa6\023\uffa6" +
    "\027\uffa6\036\uffa6\051\uffa6\052\uffa6\055\uffa6\056\uffa6\001" +
    "\002\000\034\002\uffa5\003\uffa5\013\uffa5\015\uffa5\017\uffa5" +
    "\020\uffa5\023\uffa5\027\uffa5\036\uffa5\051\uffa5\052\uffa5\055" +
    "\uffa5\056\uffa5\001\002\000\006\003\u0102\075\u0101\001\002" +
    "\000\004\011\u0105\001\002\000\004\076\u0104\001\002\000" +
    "\042\002\uff99\003\uff99\011\uff99\013\uff99\015\uff99\017\uff99" +
    "\020\uff99\023\uff99\027\uff99\032\uff99\036\uff99\051\uff99\052" +
    "\uff99\055\uff99\056\uff99\076\uff99\001\002\000\042\002\uff97" +
    "\003\uff97\011\uff97\013\uff97\015\uff97\017\uff97\020\uff97\023" +
    "\uff97\027\uff97\032\uff97\036\uff97\051\uff97\052\uff97\055\uff97" +
    "\056\uff97\076\uff97\001\002\000\006\066\u0107\076\uff95\001" +
    "\002\000\004\076\u010b\001\002\000\004\011\u0109\001\002" +
    "\000\004\076\uff96\001\002\000\006\066\u0107\076\uff95\001" +
    "\002\000\004\076\uff94\001\002\000\042\002\uff98\003\uff98" +
    "\011\uff98\013\uff98\015\uff98\017\uff98\020\uff98\023\uff98\027" +
    "\uff98\032\uff98\036\uff98\051\uff98\052\uff98\055\uff98\056\uff98" +
    "\076\uff98\001\002\000\004\075\u010d\001\002\000\026\011" +
    "\052\013\027\015\023\017\012\020\032\036\015\051\033" +
    "\055\017\056\025\076\uffbb\001\002\000\004\076\u0115\001" +
    "\002\000\004\067\u0113\001\002\000\004\067\u0111\001\002" +
    "\000\026\011\052\013\027\015\023\017\012\020\032\036" +
    "\015\051\033\055\017\056\025\076\uffbb\001\002\000\004" +
    "\076\uffbc\001\002\000\026\011\052\013\027\015\023\017" +
    "\012\020\032\036\015\051\033\055\017\056\025\076\uffbb" +
    "\001\002\000\004\076\uffbd\001\002\000\040\002\uffbe\003" +
    "\uffbe\013\uffbe\015\uffbe\017\uffbe\020\uffbe\023\uffbe\027\uffbe" +
    "\032\uffbe\036\uffbe\051\uffbe\052\uffbe\055\uffbe\056\uffbe\076" +
    "\uffbe\001\002\000\004\002\ufffd\001\002\000\004\011\uffaa" +
    "\001\002\000\004\072\u0128\001\002\000\024\011\065\012" +
    "\060\053\057\067\u0126\103\070\107\055\111\056\113\061" +
    "\115\066\001\002\000\004\011\u011c\001\002\000\004\011" +
    "\uffa9\001\002\000\010\066\uffba\067\uffba\114\uffb8\001\002" +
    "\000\004\114\u0124\001\002\000\006\066\u011f\067\uffb2\001" +
    "\002\000\004\011\u0121\001\002\000\004\067\uffb9\001\002" +
    "\000\006\066\uffb4\067\uffb4\001\002\000\006\066\u011f\067" +
    "\uffb2\001\002\000\004\067\uffb3\001\002\000\022\011\065" +
    "\012\060\053\057\103\070\107\055\111\056\113\061\115" +
    "\066\001\002\000\024\067\uffb7\070\100\073\075\102\101" +
    "\103\077\104\074\105\076\106\072\112\073\001\002\000" +
    "\004\011\uffa8\001\002\000\024\067\uffb5\070\100\073\075" +
    "\102\101\103\077\104\074\105\076\106\072\112\073\001" +
    "\002\000\004\011\u0129\001\002\000\010\066\u012b\067\uffae" +
    "\114\u012a\001\002\000\022\011\065\012\060\053\057\103" +
    "\070\107\055\111\056\113\061\115\066\001\002\000\004" +
    "\011\u012d\001\002\000\004\067\uffb1\001\002\000\006\066" +
    "\u012b\067\uffae\001\002\000\004\067\uffaf\001\002\000\024" +
    "\067\uffb0\070\100\073\075\102\101\103\077\104\074\105" +
    "\076\106\072\112\073\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\033\025\030\027\027\050\013\051" +
    "\012\052\023\054\015\060\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\u0119\001\001\000\002\001" +
    "\001\000\022\003\u0115\025\030\027\027\050\013\051\012" +
    "\052\023\054\015\060\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\036" +
    "\025\030\027\027\050\013\051\012\052\023\054\015\060" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\035\025\030\027\027\050\013\051" +
    "\012\052\023\054\015\060\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\040\025\030\027\027\050" +
    "\013\051\012\052\023\054\015\060\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\044\044\054\045\061" +
    "\043\062\047\077\050\100\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\044\044\054\045\061\372\062" +
    "\047\077\050\100\046\001\001\000\012\025\150\032\147" +
    "\063\152\064\151\001\001\000\002\001\001\000\012\027" +
    "\143\050\013\051\012\052\023\001\001\000\004\076\052" +
    "\001\001\000\002\001\001\000\012\015\061\021\062\022" +
    "\066\042\063\001\001\000\012\015\061\021\062\022\141" +
    "\042\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\061\021\062\022\133\042\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\061\021\062\022\070\042\063\001\001\000" +
    "\002\001\001\000\012\015\061\021\062\022\112\042\063" +
    "\001\001\000\012\015\061\021\062\022\111\042\063\001" +
    "\001\000\012\015\061\021\062\022\110\042\063\001\001" +
    "\000\012\015\061\021\062\022\105\042\063\001\001\000" +
    "\012\015\061\021\062\022\104\042\063\001\001\000\012" +
    "\015\061\021\062\022\103\042\063\001\001\000\012\015" +
    "\061\021\062\022\102\042\063\001\001\000\012\015\061" +
    "\021\062\022\101\042\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\061\021\062\022\107\042\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\015\061\021" +
    "\062\022\120\042\063\043\116\045\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\131\001\001\000" +
    "\004\031\122\001\001\000\012\015\061\021\062\022\130" +
    "\042\063\001\001\000\002\001\001\000\014\015\061\021" +
    "\062\022\125\042\063\045\124\001\001\000\004\031\127" +
    "\001\001\000\004\031\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\061\021\062\022" +
    "\120\042\063\043\137\045\117\001\001\000\012\015\061" +
    "\021\062\022\136\042\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\044\044\062\145\077" +
    "\050\100\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\147\064\154\001\001\000\012\025\150\032" +
    "\147\063\153\064\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\156\001\001\000\004\035\203\001\001\000\002\001\001" +
    "\000\004\101\162\001\001\000\002\001\001\000\006\050" +
    "\163\051\012\001\001\000\002\001\001\000\004\102\165" +
    "\001\001\000\004\034\167\001\001\000\006\050\172\051" +
    "\012\001\001\000\004\103\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\174\001" +
    "\001\000\004\034\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\205\001\001\000\004" +
    "\105\370\001\001\000\004\037\210\001\001\000\004\106" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\010\217\012\232\013" +
    "\221\014\234\015\227\021\062\022\240\027\226\041\237" +
    "\042\241\044\224\050\013\051\012\052\023\066\215\067" +
    "\214\070\222\001\001\000\032\010\217\012\232\013\221" +
    "\014\234\015\227\021\062\022\240\041\237\042\241\044" +
    "\224\066\367\067\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\347\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\246\010\245\012\256\013\250\014\257" +
    "\015\253\021\062\022\240\027\252\041\261\042\262\044" +
    "\251\050\013\051\012\052\023\065\254\001\001\000\002" +
    "\001\001\000\042\005\246\010\245\012\256\013\250\014" +
    "\257\015\253\021\062\022\240\027\252\041\261\042\262" +
    "\044\251\050\013\051\012\052\023\065\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\061\021\062\022\273\042\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\027\307\044\310\050\013\051\012\052\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\061\021\062\022\312\042\063\001\001\000\002\001\001" +
    "\000\012\015\061\021\062\022\314\042\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\005\246\010\245" +
    "\012\256\013\250\014\257\015\253\021\062\022\240\027" +
    "\252\041\261\042\262\044\251\050\013\051\012\052\023" +
    "\065\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\061\021\062\022\322\042\063\001\001\000\002" +
    "\001\001\000\012\015\061\021\062\022\324\042\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\246" +
    "\010\245\012\256\013\250\014\257\015\253\021\062\022" +
    "\240\027\252\041\261\042\262\044\251\050\013\051\012" +
    "\052\023\065\327\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\010\217\012\232\013\221" +
    "\014\234\015\227\021\062\022\240\027\226\041\237\042" +
    "\241\044\224\050\013\051\012\052\023\066\215\067\214" +
    "\070\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\061\021\062\022\336\042\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\246\010\245\012" +
    "\256\013\250\014\257\015\253\021\062\022\240\027\252" +
    "\041\261\042\262\044\251\050\013\051\012\052\023\065" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\110\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\061\021\062\022" +
    "\354\042\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\246\010\245\012\256\013\250\014\257\015" +
    "\253\021\062\022\240\027\252\041\261\042\262\044\251" +
    "\050\013\051\012\052\023\065\357\001\001\000\002\001" +
    "\001\000\004\071\361\001\001\000\004\011\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\246\010" +
    "\245\012\256\013\250\014\257\015\253\021\062\022\240" +
    "\027\252\041\261\042\262\044\251\050\013\051\012\052" +
    "\023\065\365\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\044\044\062\374\077\050" +
    "\100\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\u0102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\u0105\001\001\000\002\001\001\000\004\057\u0107" +
    "\001\001\000\002\001\001\000\004\056\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\026\u010d\027\u010e\044\u010f\050\013\051\012\052\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\026\u0111\027\u010e\044\u010f\050\013\051\012\052" +
    "\023\001\001\000\002\001\001\000\016\026\u0113\027\u010e" +
    "\044\u010f\050\013\051\012\052\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\061\021\062\022\u0126\042" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\073\u011d\074\u011c\001\001\000\002\001\001\000\004\046" +
    "\u011f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\u0121\001\001\000\004\046\u0122\001\001\000\002\001" +
    "\001\000\012\015\061\021\062\022\u0124\042\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u012b\001\001\000\012\015\061" +
    "\021\062\022\u012e\042\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u012d\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Symbol> errores = new ArrayList<Symbol>();
    public static ArrayList<String> erroresEspec = new ArrayList<String>();
    public static boolean fatalError = false;
    public static boolean specError = false;
    public static Symbol fatalErrorSym;
    public static String specErrorDetail = "";

    

    static TablaSimbolos tabla = new TablaSimbolos();


    public void syntax_error(Symbol s){
        errores.add(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error no recuperable captado");
        fatalError = true;
        fatalErrorSym = s;
    }

    public static void informar_Error_Especifico(String tipoError){
        String specErrorStr = "ERROR: "+tipoError;
        specErrorDetail = specErrorStr;
        erroresEspec.add(specErrorStr);
        specError = true;

        System.err.println(specErrorStr);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FUNCCALL ::= This ParentAbre PARAMFUNC ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // FUNCCALL ::= Identificador ParentAbre PARAMFUNC ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCCALL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ELEMENTARYTYPENAME ::= Uint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ELEMENTARYTYPENAME ::= Ufixed 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ELEMENTARYTYPENAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ELEMENTARYTYPENAME ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ELEMENTARYTYPENAME ::= Address 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ELEMENTARYTYPENAME ::= Bytes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ELEMENTARYTYPENAME ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ELEMENTARYTYPENAME ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTARYTYPENAME",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TYPENAME ::= ELEMENTARYTYPENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPENAME",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PARAMFUNCFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PARAMFUNCFILA ::= Coma ASIGVARIABLEFUN PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARAMFUNCFILA ::= Coma EXPRESION PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCFILA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARAMFUNC ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARAMFUNC ::= ASIGVARIABLEFUN PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PARAMFUNC ::= EXPRESION PARAMFUNCFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA_RETURN ::= Return Identificador 
            {
              Object RESULT =null;
		 Sintax.informar_Error_Especifico("Return de función sin punto y coma"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA_RETURN ::= Return Identificador NT$15 PuntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$15 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 FrmPrincipal.tabla.returnEnFuncionIngresado(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$15",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FUNCIONCONTENVARLIS ::= LISTA_SENTENCIAPRIMAFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTENVARLIS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FUNCIONCONTENVARLIS ::= DECLARVARIABLE PuntoComa FUNCIONCONTENVARLIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTENVARLIS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FUNCIONCONTEN ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FUNCIONCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FUNCIONCONTEN ::= LlaveAbre NT$13 FUNCIONCONTENVARLIS NT$14 LlaveCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONCONTEN",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 FrmPrincipal.tabla.varLocal = false; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$14",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$13 ::= 
            {
              Object RESULT =null;
 FrmPrincipal.tabla.varLocal = true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FUNCIONRETURNS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FUNCIONRETURNS ::= Returns NT$12 FUNCIONATRIB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONRETURNS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$12 ::= 
            {
              Object RESULT =null;
 FrmPrincipal.tabla.returnsEnFuncion(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // MODIFICADORES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MODIFICADORES ::= Internal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // MODIFICADORES ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MODIFICADORES ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MODIFICADORES ::= Payable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FUNATRIBDOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FUNATRIBDOS ::= Coma TYPENAME Identificador NT$11 FUNATRIBDOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNATRIBDOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$11 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 FrmPrincipal.tabla.insertarValorScope(id.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FUNCIONATRIB ::= error ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUNCIONATRIB ::= ParentAbre ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUNCIONATRIB ::= ParentAbre NT$8 TYPENAME Identificador NT$9 FUNATRIBDOS NT$10 ParentCierre 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONATRIB",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
 FrmPrincipal.tabla.varParamet = false; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 FrmPrincipal.tabla.insertarValorScope(id.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$8 ::= 
            {
              Object RESULT =null;
 FrmPrincipal.tabla.varParamet = true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUNCIONDEF ::= Function Identificador FUNCIONATRIB MODIFICADORES FUNCIONRETURNS FUNCIONCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONDEF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ENUMVALUE ::= Identificador ENUMLIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMVALUE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ENUMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ENUMLIST ::= Coma ENUMVALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMLIST",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ENUMCONTEN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ENUMCONTEN ::= LlaveAbre Identificador ENUMLIST LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMCONTEN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ENUMDEF ::= Enum Identificador ENUMCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMDEF",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONTRACTPART3 ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONTRACTPART3 ::= FUNCIONDEF CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART3",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONTRACTPART2 ::= CONTRACTPART3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONTRACTPART2 ::= STRUCTDEF CONTRACTPART2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART2",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONTRACTPART1 ::= NT$7 CONTRACTPART2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$7 ::= 
            {
              Object RESULT =null;
 FrmPrincipal.tabla.varGlobal = false; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONTRACTPART1 ::= ASIGVARIABLE PuntoComa CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONTRACTPART1 ::= NT$6 DECLARVARIABLE PuntoComa CONTRACTPART1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART1",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$6 ::= 
            {
              Object RESULT =null;
 FrmPrincipal.tabla.varGlobal = true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTRACTPART ::= CONTRACTPART1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTRACTPART ::= ENUMDEF CONTRACTPART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTPART",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTRACTDEF ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTRACTDEF ::= Contract Identificador LlaveAbre CONTRACTPART LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRACTDEF",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ACCESSMOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ACCESSMOD ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ACCESSMOD ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ACCESSMOD ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCESSMOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIGVARIABLEFUN ::= EXPRESION Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLEFUN",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASIGVARIABLE ::= Identificador NT$5 Op_atribucion EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		EscritorASM.escribeExp(id.toString(),op.toString(),ex.toString());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGVARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 FrmPrincipal.tabla.ultimoIdentificadorIngresado = id.toString(); FrmPrincipal.tabla.insertarValorScope(id.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARRAYDECLARFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARRAYDECLARFILA ::= Coma Identificador ARRAYDECLARFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLARFILA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador Op_atribucion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ARRAYDECLAR ::= TYPENAME ParenCuadAbre ParenCuadCierra Identificador ARRAYDECLARFILA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYDECLAR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARVARIABLEFILA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARVARIABLEFILA ::= Coma Identificador NT$4 DECLARVARIABLEFILA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLEFILA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
EscritorASM.escribeVariable(id.toString()); FrmPrincipal.tabla.insertarValorScope(id.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARVARIABLE ::= TYPENAME error EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARVARIABLE ::= ARRAYDECLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador NT$3 Op_atribucion EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                                                                                                                            EscritorASM.escribeExp(id.toString(),op.toString(),ex.toString());
                                                                                                                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 FrmPrincipal.tabla.ultimoIdentificadorIngresado = id.toString(); FrmPrincipal.tabla.insertarValorScope(id.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARVARIABLE ::= TYPENAME ACCESSMOD Identificador NT$2 DECLARVARIABLEFILA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARVARIABLE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 FrmPrincipal.tabla.insertarValorScope(id.toString()); EscritorASM.escribeVariable(id.toString());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // STRUCTCONTEN ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STRUCTCONTEN ::= ASIGVARIABLE PuntoComa STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STRUCTCONTEN ::= DECLARVARIABLE PuntoComa STRUCTCONTEN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTCONTEN",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STRUCTDEF ::= Struct Identificador LlaveAbre STRUCTCONTEN LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCTDEF",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= SENTENCIA_TERNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= Identificador Op_Incremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= Op_Incremental Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= Literal 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 FrmPrincipal.tabla.insertarValorVariable(valor.toString());RESULT = valor; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION Punto EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= This Punto EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= FUNCCALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION_INCREMENTAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION Mod EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION Div EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION Mult EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                            String t = EscritorASM.temp();
                                                            EscritorASM.escribeExp(ex1.toString(),op.toString(),ex2.toString());
                                                            RESULT = t;
                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                            String t = EscritorASM.temp();
                                                            EscritorASM.escribeExp(ex1.toString(),op.toString(),ex2.toString());
                                                            RESULT = t;
                                                           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= Op_Booleano 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = op; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 FrmPrincipal.tabla.insertarIdValorVariable(id.toString()); RESULT = id; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= Not EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= ParentAbre EXPRESION ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		String t = EscritorASM.etiq();
                                                                    EscritorASM.escribeExp(ex1.toString(),op.toString(),ex2.toString());
                                                                    RESULT = t;
                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_TERNARIA ::= EXPRESION SignoPregunta EXPRESION DosPuntos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_TERNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_FOR ::= For ParentAbre ASIGVARIABLE PuntoComa EXPRESION PuntoComa EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_FOR ::= For ParentAbre DECLARVARIABLE PuntoComa EXPRESION PuntoComa EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_DOWHILE ::= Do LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra While ParentAbre EXPRESION ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_WHILE ::= While NT$1 ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
                        String t = EscritorASM.etiq();  
                        EscritorASM.escribeExp(null,"whileInit",null);
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$1 ::= 
            {
              Object RESULT =null;

                        String t = EscritorASM.etiq();  
                        EscritorASM.escribeExp(null,"whileInit",null);
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_ELSE ::= Else LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;
		
                                                                    EscritorASM.escribeExp(null,"elseEnd",null);                                                                                                    
                                                                   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_IF ::= If ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra NT$0 SENTENCIA_ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$0 ::= 
            {
              Object RESULT =null;

                                                                                                    EscritorASM.escribeExp(null,"ifEnd",null);
                                                                                                    String t = EscritorASM.etiq();
                                                                                                  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_IF ::= If ParentAbre EXPRESION ParentCierre LlaveAbre LISTA_SENTENCIAPRIMA LlaveCierra 
            {
              Object RESULT =null;
		
                                                                                                    EscritorASM.escribeExp(null,"ifExit",null);                                                                                                    
                                                                                                  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIAFUN ::= error ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAFUN ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIAFUN ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAFUN ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAFUN ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAFUN ::= FUNCCALL PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAFUN ::= ASIGVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAFUN ::= SENTENCIA_TERNARIA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAFUN ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAFUN ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAFUN ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAFUN ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAFUN ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAFUN",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_SENTENCIAPRIMAFUN ::= 
            {
              Object RESULT =null;
		 FrmPrincipal.tabla.validarReturnFuncion(); RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMAFUN",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_SENTENCIAPRIMAFUN ::= SENTENCIAFUN LISTA_SENTENCIAPRIMAFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMAFUN",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= error ParentCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= error LlaveCierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FUNCCALL PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ASIGVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DECLARVARIABLE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_TERNARIA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_DOWHILE PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_SENTENCIAPRIMA ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_SENTENCIAPRIMA ::= SENTENCIA LISTA_SENTENCIAPRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAPRIMA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIODOS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIODOS ::= DECLARVARIABLE PuntoComa INICIODOS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Sintax.informar_Error_Especifico("Declaración fuera de función. En línea: "+pright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIODOS ::= ENUMDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIODOS ::= CONTRACTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIODOS ::= STRUCTDEF INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIODOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Version PuntoComa INICIODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

