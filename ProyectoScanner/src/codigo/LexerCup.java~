/* The following code was generated by JFlex 1.4.3 on 24/07/20 09:02 PM */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/07/20 09:02 PM from the specification file
 * <tt>C:/Users/Franc/Documents/Uned Tec/tecDigital/2020 Semestre I/Compi/ProyectoScannerCompiladores/ProyectoScanner/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 66, 63,  0,  8, 66,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    66, 54, 64,  0,  0, 50, 46, 65, 51, 52, 11, 49, 38,  7,  5, 10, 
     9, 56, 58, 60, 59, 61, 57, 62, 55,  3, 43, 39, 36, 53, 37, 42, 
     0,  4,  4,  4,  4,  6,  4,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 40,  0, 41, 47,  1, 
     0, 12, 16, 22, 13,  2, 27, 31, 28, 25,  1, 19, 18, 26, 23, 17, 
    30,  1, 14, 15, 21, 24, 32, 33, 29, 20, 34, 44, 35, 45, 48,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\7\1\10\20\2\1\11\2\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\1\3\2"+
    "\2\34\2\3\1\35\1\32\1\36\1\6\2\37\1\40"+
    "\1\2\1\41\2\2\1\42\22\2\1\43\21\2\1\12"+
    "\1\44\1\45\2\0\1\3\1\0\3\2\1\3\2\0"+
    "\1\34\1\36\2\0\25\2\1\46\6\2\1\47\2\2"+
    "\1\50\4\2\1\51\2\2\1\52\1\2\1\0\1\53"+
    "\1\2\1\54\1\55\1\3\1\55\1\0\1\36\1\6"+
    "\4\2\1\56\6\2\1\57\1\60\1\2\1\61\1\62"+
    "\1\56\2\2\1\63\3\2\1\64\11\2\1\65\2\2"+
    "\2\0\4\2\1\66\1\2\1\0\1\55\1\0\11\2"+
    "\1\67\1\70\6\2\1\71\7\2\1\64\6\2\2\0"+
    "\4\2\1\72\1\0\1\2\1\73\1\2\1\74\1\2"+
    "\1\75\1\76\1\2\3\77\5\2\1\71\1\100\1\2"+
    "\1\101\3\2\2\0\1\2\1\102\1\2\1\103\1\104"+
    "\1\105\1\106\6\2\1\107\2\2\2\0\1\110\1\111"+
    "\1\112\1\2\1\113\1\114\1\115\1\116\1\117\2\0"+
    "\1\2\2\0\1\2\2\0\1\120\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\u07da\0\u081d"+
    "\0\103\0\u0860\0\103\0\103\0\103\0\u08a3\0\u08a3\0\u08e6"+
    "\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u014f\0\u0abb"+
    "\0\103\0\103\0\u0afe\0\u0b41\0\u0b84\0\103\0\103\0\u0bc7"+
    "\0\206\0\u0c0a\0\u0c4d\0\206\0\u0c90\0\u0cd3\0\u0d16\0\u0d59"+
    "\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71"+
    "\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\206\0\u1146"+
    "\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e"+
    "\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576"+
    "\0\103\0\103\0\103\0\u15b9\0\u08e6\0\103\0\u0929\0\u15fc"+
    "\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u0b84"+
    "\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19"+
    "\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\206\0\u1fab\0\u1fee"+
    "\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\206\0\u2180\0\u21c3"+
    "\0\206\0\u2206\0\u2249\0\206\0\u228c\0\206\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u0b84\0\u241e\0\u2461\0\u24a4\0\u24e7"+
    "\0\206\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\206"+
    "\0\u26bc\0\u26ff\0\206\0\206\0\u2742\0\u2785\0\u27c8\0\u280b"+
    "\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2917"+
    "\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\206\0\u2b72\0\u2bb5"+
    "\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\206\0\u2d8a"+
    "\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2"+
    "\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\206\0\u30f1\0\u3134\0\u3177"+
    "\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f"+
    "\0\u32c6\0\u33d2\0\u3415\0\u3458\0\206\0\u349b\0\u34de\0\u3521"+
    "\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739"+
    "\0\u377c\0\206\0\u37bf\0\u3802\0\206\0\u3845\0\u3888\0\u38cb"+
    "\0\206\0\206\0\u390e\0\206\0\u3951\0\u3994\0\u39d7\0\u3a1a"+
    "\0\u3a5d\0\u3aa0\0\u3ae3\0\206\0\206\0\u3b26\0\206\0\u3b69"+
    "\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\206\0\u3cfb\0\206"+
    "\0\103\0\206\0\206\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a"+
    "\0\u3e8d\0\206\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\206\0\206"+
    "\0\206\0\u3fdc\0\206\0\206\0\206\0\206\0\206\0\u401f"+
    "\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4\0\206"+
    "\0\u4237\0\u427a\0\u42bd\0\u4300";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\3\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\3\3\1\21\1\22\1\23\1\3\1\24\1\25"+
    "\1\26\1\27\1\30\1\3\1\31\1\3\1\32\1\33"+
    "\1\3\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\10\5\1\10\1\60"+
    "\1\61\1\10\104\0\4\3\1\0\1\3\2\0\1\3"+
    "\2\0\27\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\6\3\1\62\2\3\1\63\1\3"+
    "\1\64\13\3\24\0\10\3\4\0\2\65\1\66\1\5"+
    "\1\65\1\67\1\66\1\0\1\65\1\5\2\0\27\65"+
    "\24\0\10\5\1\0\2\65\4\0\1\70\5\0\1\70"+
    "\55\0\10\70\13\0\1\71\55\0\1\72\25\0\1\10"+
    "\66\0\1\10\2\0\1\10\2\65\1\66\1\73\1\65"+
    "\1\67\1\66\1\0\1\65\1\73\2\0\27\65\24\0"+
    "\10\73\1\0\2\65\13\0\1\74\1\75\51\0\1\72"+
    "\27\0\1\76\1\77\51\0\1\72\16\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\1\3\1\100\1\3\1\101"+
    "\23\3\24\0\10\3\5\0\1\3\1\102\2\3\1\0"+
    "\1\3\2\0\1\3\2\0\1\103\4\3\1\104\21\3"+
    "\24\0\10\3\5\0\1\3\1\105\2\3\1\0\1\3"+
    "\2\0\1\3\2\0\27\3\24\0\10\3\5\0\1\3"+
    "\1\106\2\3\1\0\1\3\2\0\1\3\2\0\5\3"+
    "\1\107\3\3\1\110\14\3\1\111\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\1\112\1\3"+
    "\1\113\2\3\1\114\2\3\1\115\16\3\24\0\10\3"+
    "\5\0\1\3\1\116\2\3\1\0\1\3\2\0\1\3"+
    "\2\0\27\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\2\3\1\117\15\3\1\120\6\3"+
    "\24\0\10\3\5\0\4\3\1\0\1\3\2\0\1\3"+
    "\2\0\1\121\4\3\1\122\21\3\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\15\3\1\123"+
    "\1\3\1\124\7\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\13\3\1\125\2\3\1\126"+
    "\1\127\7\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\1\130\4\3\1\131\7\3\1\132"+
    "\11\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\1\133\1\3\1\134\2\3\1\135\6\3"+
    "\1\136\1\137\11\3\24\0\10\3\5\0\1\3\1\140"+
    "\2\3\1\0\1\3\2\0\1\3\2\0\5\3\1\141"+
    "\21\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\1\142\1\3\1\143\11\3\1\144\12\3"+
    "\24\0\10\3\5\0\4\3\1\0\1\3\2\0\1\3"+
    "\2\0\1\145\14\3\1\146\11\3\24\0\10\3\5\0"+
    "\1\3\1\147\2\3\1\0\1\3\2\0\1\3\2\0"+
    "\20\3\1\150\6\3\24\0\10\3\47\0\1\151\103\0"+
    "\1\152\20\0\1\151\62\0\1\153\17\0\1\151\73\0"+
    "\1\151\35\0\1\154\152\0\1\71\3\0\1\72\102\0"+
    "\1\151\15\0\63\155\2\0\12\155\1\0\1\156\2\155"+
    "\63\157\2\0\12\157\1\0\1\157\1\156\1\157\1\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\3\3\1\160"+
    "\23\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\20\3\1\161\6\3\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\14\3\1\162"+
    "\12\3\24\0\10\3\4\0\5\65\1\0\1\65\1\0"+
    "\2\65\2\0\27\65\24\0\10\65\1\0\2\65\1\0"+
    "\3\65\1\163\1\65\1\0\1\65\1\164\1\65\1\163"+
    "\2\0\27\65\16\0\1\164\5\0\10\163\1\0\2\65"+
    "\3\0\1\165\1\70\2\0\1\165\2\0\1\70\55\0"+
    "\10\70\4\0\2\65\1\166\1\73\1\65\1\167\1\166"+
    "\1\0\1\65\1\73\2\0\27\65\24\0\10\73\1\0"+
    "\2\65\1\0\77\74\1\0\3\74\13\170\1\171\67\170"+
    "\1\0\4\3\1\0\1\3\2\0\1\3\2\0\1\3"+
    "\1\172\25\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\6\3\1\173\20\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\10\3"+
    "\1\174\16\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\11\3\1\175\15\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\12\3"+
    "\1\176\1\177\13\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\6\3\1\200\20\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\2\3\1\201\24\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\1\202\26\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\6\3"+
    "\1\203\20\3\24\0\10\3\5\0\1\3\1\204\2\3"+
    "\1\0\1\3\2\0\1\3\2\0\27\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\5\3"+
    "\1\205\21\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\11\3\1\206\15\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\1\207"+
    "\26\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\1\210\13\3\1\211\12\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\15\3"+
    "\1\212\11\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\6\3\1\213\20\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\13\3"+
    "\1\214\13\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\13\3\1\215\13\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\15\3"+
    "\1\216\11\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\11\3\1\217\15\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\22\3"+
    "\1\220\4\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\22\3\1\221\4\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\1\3"+
    "\1\222\25\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\13\3\1\223\13\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\6\3"+
    "\1\224\20\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\5\3\1\225\21\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\2\3"+
    "\1\226\24\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\13\3\1\227\13\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\13\3"+
    "\1\230\13\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\21\3\1\231\5\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\14\3"+
    "\1\207\12\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\10\3\1\232\16\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\1\233"+
    "\14\3\1\234\11\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\4\3\1\235\22\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\2\3\1\236\24\3\24\0\10\3\5\0\1\3\1\237"+
    "\2\3\1\0\1\3\2\0\1\3\2\0\27\3\24\0"+
    "\10\3\5\0\1\3\1\240\2\3\1\0\1\3\2\0"+
    "\1\3\2\0\15\3\1\241\11\3\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\15\3\1\242"+
    "\11\3\24\0\10\3\11\0\1\243\76\0\1\3\1\244"+
    "\2\3\1\0\1\3\2\0\1\3\2\0\27\3\24\0"+
    "\10\3\5\0\1\3\1\245\2\3\1\0\1\3\2\0"+
    "\1\3\2\0\27\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\16\3\1\246\10\3\24\0"+
    "\10\3\4\0\3\65\1\163\1\65\1\247\1\65\1\0"+
    "\1\65\1\163\2\0\27\65\24\0\10\163\1\0\2\65"+
    "\4\0\1\250\5\0\1\250\55\0\10\250\7\0\1\250"+
    "\3\0\1\164\1\0\1\250\47\0\1\164\5\0\10\250"+
    "\4\0\3\65\1\251\1\65\1\0\1\65\1\252\1\65"+
    "\1\251\2\0\27\65\16\0\1\252\5\0\10\251\1\0"+
    "\2\65\4\0\1\253\5\0\1\253\55\0\10\253\4\0"+
    "\12\170\1\254\1\171\67\170\1\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\2\3\1\255\24\3\24\0\10\3"+
    "\5\0\1\3\1\256\2\3\1\0\1\3\2\0\1\3"+
    "\2\0\27\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\3\3\1\241\23\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\14\3"+
    "\1\257\12\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\5\3\1\260\21\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\1\3"+
    "\1\261\25\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\15\3\1\262\11\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\14\3"+
    "\1\263\1\264\11\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\4\3\1\265\22\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\1\266\26\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\1\267\26\3\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\6\3\1\270"+
    "\20\3\24\0\10\3\5\0\1\3\1\271\2\3\1\0"+
    "\1\3\2\0\1\3\2\0\27\3\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\2\3\1\174"+
    "\24\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\13\3\1\272\13\3\24\0\10\3\5\0"+
    "\1\3\1\273\2\3\1\0\1\3\2\0\1\3\2\0"+
    "\27\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\3\3\1\274\23\3\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\6\3\1\275"+
    "\20\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\3\3\1\276\5\3\1\277\15\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\11\3\1\300\15\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\21\3\1\301\5\3\24\0"+
    "\10\3\5\0\1\3\1\302\1\303\1\3\1\0\1\3"+
    "\2\0\1\3\2\0\27\3\24\0\1\304\1\305\1\306"+
    "\1\307\1\310\1\311\1\303\1\311\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\5\3\1\312\21\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\22\3\1\313\4\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\15\3\1\314\11\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\14\3\1\315\12\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\3\3\1\211\23\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\16\3\1\316\10\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\12\3\1\317\14\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\13\3\1\320\13\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\27\3\24\0\10\3\1\0"+
    "\1\321\1\322\2\0\4\3\1\0\1\3\2\0\1\3"+
    "\2\0\1\323\26\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\23\3\1\324\3\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\24\3\1\325\2\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\6\3\1\326\20\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\25\3\1\327\1\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\7\3\1\174\17\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\6\3\1\330\20\3\24\0\10\3\77\0\1\331\10\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\2\3\1\241"+
    "\24\3\24\0\10\3\7\0\1\247\5\0\1\247\55\0"+
    "\10\247\7\0\1\250\1\0\1\247\3\0\1\250\55\0"+
    "\10\250\4\0\3\65\1\251\1\65\1\247\1\65\1\0"+
    "\1\65\1\251\2\0\27\65\24\0\10\251\1\0\2\65"+
    "\4\0\1\332\5\0\1\332\55\0\10\332\6\0\1\333"+
    "\1\253\2\0\1\333\2\0\1\253\55\0\10\253\5\0"+
    "\1\3\1\334\2\3\1\0\1\3\2\0\1\3\2\0"+
    "\27\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\11\3\1\335\11\3\1\336\3\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\2\3\1\337\24\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\13\3\1\340\13\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\1\3\1\341\25\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\12\3\1\342\14\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\13\3\1\343\13\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\5\3\1\241\21\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\13\3\1\344\13\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\7\3\1\345\17\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\3\3\1\346\23\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\3\3\1\347\23\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\12\3\1\350\14\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\11\3\1\351\15\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\2\3\1\352\12\3\1\353\11\3\24\0\10\3\5\0"+
    "\2\3\1\354\1\3\1\0\1\3\2\0\1\3\2\0"+
    "\27\3\24\0\1\355\1\356\1\357\1\360\1\361\1\362"+
    "\1\354\1\362\5\0\1\3\1\363\2\3\1\0\1\3"+
    "\2\0\1\3\2\0\27\3\24\0\10\3\5\0\4\3"+
    "\1\0\1\3\2\0\1\3\2\0\2\3\1\364\24\3"+
    "\24\0\10\3\5\0\4\3\1\0\1\3\2\0\1\3"+
    "\2\0\27\3\24\0\2\3\1\365\5\3\5\0\4\3"+
    "\1\0\1\3\2\0\1\365\2\0\27\3\24\0\1\365"+
    "\7\3\5\0\2\3\1\311\1\3\1\0\1\3\2\0"+
    "\1\306\2\0\27\3\24\0\1\306\1\311\1\304\1\310"+
    "\1\306\1\303\1\311\1\303\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\27\3\24\0\4\3\1\365\3\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\310\2\0\27\3"+
    "\24\0\1\3\1\303\1\3\1\306\1\304\1\311\1\303"+
    "\1\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\27\3\24\0\3\3\1\365\4\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\2\3\1\366\24\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\15\3\1\367\11\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\17\3\1\370\7\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\11\3\1\371\15\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\11\3\1\372\15\3\24\0"+
    "\10\3\5\0\1\3\1\373\2\3\1\0\1\3\2\0"+
    "\1\3\2\0\27\3\24\0\10\3\6\0\3\374\1\0"+
    "\1\374\2\0\1\374\2\0\2\374\2\0\1\374\5\0"+
    "\1\374\4\0\1\374\33\0\10\374\6\0\3\375\1\0"+
    "\1\375\2\0\1\375\2\0\2\375\2\0\1\375\5\0"+
    "\1\375\4\0\1\375\33\0\10\375\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\4\3\1\376\22\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\16\3\1\377\10\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\1\u0100\26\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\15\3"+
    "\1\u0101\11\3\24\0\10\3\5\0\1\3\1\u0102\2\3"+
    "\1\0\1\3\2\0\1\3\2\0\27\3\24\0\10\3"+
    "\11\0\1\u0103\100\0\1\332\1\0\1\247\3\0\1\332"+
    "\55\0\10\332\7\0\1\332\3\0\1\252\1\0\1\332"+
    "\47\0\1\252\5\0\10\332\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\3\3\1\u0104\23\3\24\0\10\3"+
    "\5\0\1\3\1\u0105\2\3\1\0\1\3\2\0\1\3"+
    "\2\0\27\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\1\u0106\26\3\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\13\3\1\u0107"+
    "\13\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\1\3\1\174\25\3\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\15\3\1\u0108"+
    "\11\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\11\3\1\u0109\15\3\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\23\3\1\u010a"+
    "\3\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\12\3\1\u010b\14\3\24\0\10\3\5\0"+
    "\2\3\1\u010c\1\3\1\0\1\3\2\0\1\3\2\0"+
    "\27\3\24\0\1\u010c\1\u010d\1\u010c\1\u010d\1\u010c\1\u010e"+
    "\2\u010c\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\17\3\1\u010f\7\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\5\3\1\u0110\21\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\2\3\1\u0111\24\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\1\u0112\26\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\13\3"+
    "\1\u0113\13\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\27\3\24\0\2\3\1\u0114\5\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\u0114\2\0\27\3"+
    "\24\0\1\u0114\7\3\5\0\2\3\1\362\1\3\1\0"+
    "\1\3\2\0\1\357\2\0\27\3\24\0\1\357\1\362"+
    "\1\355\1\361\1\357\1\354\1\362\1\354\5\0\4\3"+
    "\1\0\1\3\2\0\1\3\2\0\27\3\24\0\4\3"+
    "\1\u0114\3\3\5\0\4\3\1\0\1\3\2\0\1\361"+
    "\2\0\27\3\24\0\1\3\1\354\1\3\1\357\1\355"+
    "\1\362\1\354\1\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\27\3\24\0\3\3\1\u0114\4\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\1\3\1\u0115"+
    "\25\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\13\3\1\u0116\13\3\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\11\3\1\u0117"+
    "\15\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\13\3\1\u0118\13\3\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\15\3\1\u0119"+
    "\11\3\24\0\10\3\5\0\1\3\1\174\2\3\1\0"+
    "\1\3\2\0\1\3\2\0\27\3\24\0\10\3\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\15\3\1\u011a"+
    "\11\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\10\3\1\241\16\3\24\0\10\3\6\0"+
    "\3\u011b\1\0\1\u011b\2\0\1\u011b\2\0\2\u011b\2\0"+
    "\1\u011b\5\0\1\u011b\4\0\1\u011b\33\0\10\u011b\6\0"+
    "\3\u011c\1\0\1\u011c\2\0\1\u011c\2\0\2\u011c\2\0"+
    "\1\u011c\5\0\1\u011c\4\0\1\u011c\33\0\10\u011c\5\0"+
    "\4\3\1\0\1\3\2\0\1\3\2\0\6\3\1\u011d"+
    "\20\3\24\0\10\3\5\0\4\3\1\0\1\3\2\0"+
    "\1\3\2\0\1\u011e\26\3\24\0\10\3\5\0\4\3"+
    "\1\0\1\3\2\0\1\3\2\0\11\3\1\u011f\15\3"+
    "\24\0\10\3\5\0\4\3\1\0\1\3\2\0\1\3"+
    "\2\0\12\3\1\u0120\14\3\24\0\10\3\15\0\1\u0121"+
    "\72\0\4\3\1\0\1\3\2\0\1\3\2\0\3\3"+
    "\1\u0122\23\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\11\3\1\u010b\15\3\24\0\10\3"+
    "\5\0\4\3\1\0\1\3\2\0\1\3\2\0\3\3"+
    "\1\u0123\23\3\24\0\10\3\5\0\4\3\1\0\1\3"+
    "\2\0\1\3\2\0\11\3\1\u0124\15\3\24\0\10\3"+
    "\5\0\1\3\1\261\2\3\1\0\1\3\2\0\1\3"+
    "\2\0\27\3\24\0\10\3\5\0\2\3\1\u010c\1\3"+
    "\1\0\1\3\2\0\1\u010c\2\0\27\3\24\0\10\u010c"+
    "\5\0\4\3\1\0\1\3\2\0\1\u010c\2\0\27\3"+
    "\24\0\1\3\1\u010c\1\3\1\u010c\4\3\5\0\1\3"+
    "\1\u0125\2\3\1\0\1\3\2\0\1\3\2\0\27\3"+
    "\24\0\10\3\5\0\4\3\1\0\1\3\2\0\1\3"+
    "\2\0\1\3\1\u010b\25\3\24\0\10\3\5\0\4\3"+
    "\1\0\1\3\2\0\1\3\2\0\14\3\1\u0126\12\3"+
    "\24\0\10\3\5\0\4\3\1\0\1\3\2\0\1\3"+
    "\2\0\12\3\1\u0127\14\3\24\0\10\3\5\0\4\3"+
    "\1\0\1\3\2\0\1\3\2\0\14\3\1\u0128\12\3"+
    "\24\0\10\3\5\0\4\3\1\0\1\3\2\0\1\3"+
    "\2\0\1\u0129\26\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\23\3\1\u012a\3\3\24\0"+
    "\10\3\5\0\1\3\1\u012b\2\3\1\0\1\3\2\0"+
    "\1\3\2\0\27\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\5\3\1\u012c\21\3\24\0"+
    "\10\3\6\0\3\u012d\1\0\1\u012d\2\0\1\u012d\2\0"+
    "\2\u012d\2\0\1\u012d\5\0\1\u012d\4\0\1\u012d\33\0"+
    "\10\u012d\6\0\3\u012e\1\0\1\u012e\2\0\1\u012e\2\0"+
    "\2\u012e\2\0\1\u012e\5\0\1\u012e\4\0\1\u012e\33\0"+
    "\10\u012e\5\0\1\3\1\u012f\2\3\1\0\1\3\2\0"+
    "\1\3\2\0\27\3\24\0\10\3\5\0\1\3\1\u0130"+
    "\2\3\1\0\1\3\2\0\1\3\2\0\27\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\10\3\1\u0131\16\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\2\3\1\261\24\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\12\3\1\u0132\14\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\11\3\1\u0133\15\3\24\0"+
    "\10\3\5\0\1\3\1\u0134\2\3\1\0\1\3\2\0"+
    "\1\3\2\0\27\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\6\3\1\u0135\20\3\24\0"+
    "\10\3\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\2\3\1\u0136\24\3\24\0\10\3\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\13\3\1\u0137\13\3\24\0"+
    "\10\3\6\0\3\u0138\1\0\1\u0138\2\0\1\u0138\2\0"+
    "\2\u0138\2\0\1\u0138\5\0\1\u0138\4\0\1\u0138\33\0"+
    "\10\u0138\6\0\3\u0139\1\0\1\u0139\2\0\1\u0139\2\0"+
    "\2\u0139\2\0\1\u0139\5\0\1\u0139\4\0\1\u0139\33\0"+
    "\10\u0139\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\11\3\1\u013a\15\3\24\0\10\3\6\0\3\u013b\1\0"+
    "\1\u013b\2\0\1\u013b\2\0\2\u013b\2\0\1\u013b\5\0"+
    "\1\u013b\4\0\1\u013b\33\0\10\u013b\6\0\3\u013c\1\0"+
    "\1\u013c\2\0\1\u013c\2\0\2\u013c\2\0\1\u013c\5\0"+
    "\1\u013c\4\0\1\u013c\33\0\10\u013c\5\0\4\3\1\0"+
    "\1\3\2\0\1\3\2\0\5\3\1\u013d\21\3\24\0"+
    "\10\3\6\0\3\u013e\1\0\1\u013e\2\0\1\u013e\2\0"+
    "\2\u013e\2\0\1\u013e\5\0\1\u013e\4\0\1\u013e\33\0"+
    "\10\u013e\6\0\3\u013f\1\0\1\u013f\2\0\1\u013f\2\0"+
    "\2\u013f\2\0\1\u013f\5\0\1\u013f\4\0\1\u013f\33\0"+
    "\10\u013f\5\0\4\3\1\0\1\3\2\0\1\3\2\0"+
    "\2\3\1\u0140\24\3\24\0\10\3\6\0\3\u0141\1\0"+
    "\1\u0141\2\0\1\u0141\2\0\2\u0141\2\0\1\u0141\5\0"+
    "\1\u0141\4\0\1\u0141\33\0\10\u0141\6\0\3\u0142\1\0"+
    "\1\u0142\2\0\1\u0142\2\0\2\u0142\2\0\1\u0142\5\0"+
    "\1\u0142\4\0\1\u0142\33\0\10\u0142\6\0\3\u0143\1\0"+
    "\1\u0143\2\0\1\u0143\2\0\2\u0143\2\0\1\u0143\5\0"+
    "\1\u0143\4\0\1\u0143\33\0\10\u0143\6\0\3\u0144\1\0"+
    "\1\u0144\2\0\1\u0144\2\0\2\u0144\2\0\1\u0144\5\0"+
    "\1\u0144\4\0\1\u0144\33\0\10\u0144\6\0\3\u0143\1\0"+
    "\1\u0143\2\0\1\u0143\2\0\2\u0143\2\0\1\u0143\5\0"+
    "\1\u0143\4\0\1\u0143\33\0\10\u0143\1\0\1\156\4\0"+
    "\3\u0144\1\0\1\u0144\2\0\1\u0144\2\0\2\u0144\2\0"+
    "\1\u0144\5\0\1\u0144\4\0\1\u0144\33\0\10\u0144\2\0"+
    "\1\156\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17219];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\10\11\2\1\1\11\1\1\3\11"+
    "\13\1\2\11\3\1\2\11\51\1\3\11\2\0\1\11"+
    "\1\0\4\1\2\0\2\1\2\0\51\1\1\0\6\1"+
    "\1\0\46\1\2\0\6\1\1\0\1\1\1\0\40\1"+
    "\2\0\5\1\1\0\27\1\2\0\4\1\1\11\13\1"+
    "\2\0\11\1\2\0\1\1\2\0\1\1\2\0\1\1"+
    "\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 67: 
          { return new Symbol(sym.Public, yychar, yyline, yytext());
          }
        case 81: break;
        case 3: 
          { return new Symbol(sym.Literal, yychar, yyline, yytext());
          }
        case 82: break;
        case 71: 
          { return new Symbol(sym.Mapping, yychar, yyline, yytext());
          }
        case 83: break;
        case 39: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 84: break;
        case 30: 
          { return new Symbol(sym.ERROR_LiteralCero, yychar, yyline, yytext());
          }
        case 85: break;
        case 16: 
          { return new Symbol(sym.DosPuntos, yychar, yyline, yytext());
          }
        case 86: break;
        case 46: 
          { return new Symbol(sym.Transac, yychar, yyline, yytext());
          }
        case 87: break;
        case 10: 
          { return new Symbol(sym.Op_relacional, yychar, yyline, yytext());
          }
        case 88: break;
        case 33: 
          { return new Symbol(sym.As, yychar, yyline, yytext());
          }
        case 89: break;
        case 50: 
          { return new Symbol(sym.This, yychar, yyline, yytext());
          }
        case 90: break;
        case 40: 
          { return new Symbol(sym.Hex, yychar, yyline, yytext());
          }
        case 91: break;
        case 48: 
          { return new Symbol(sym.Byte, yychar, yyline, yytext());
          }
        case 92: break;
        case 29: 
          { return new Symbol(sym.Op_Incremental, yychar, yyline, yytext());
          }
        case 93: break;
        case 66: 
          { return new Symbol(sym.Pragma, yychar, yyline, yytext());
          }
        case 94: break;
        case 54: 
          { return new Symbol(sym.View, yychar, yyline, yytext());
          }
        case 95: break;
        case 11: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 96: break;
        case 59: 
          { return new Symbol(sym.Delete, yychar, yyline, yytext());
          }
        case 97: break;
        case 53: 
          { return new Symbol(sym.From, yychar, yyline, yytext());
          }
        case 98: break;
        case 13: 
          { return new Symbol(sym.ParenCuadAbre, yychar, yyline, yytext());
          }
        case 99: break;
        case 31: 
          { return new Symbol(sym.ERROR_Comentario, yychar, yyline, yytext());
          }
        case 100: break;
        case 55: 
          { return new Symbol(sym.Break, yychar, yyline, yytext());
          }
        case 101: break;
        case 6: 
          { /*Ignore*/
          }
        case 102: break;
        case 74: 
          { return new Symbol(sym.Solidity, yychar, yyline, yytext());
          }
        case 103: break;
        case 75: 
          { return new Symbol(sym.Contract, yychar, yyline, yytext());
          }
        case 104: break;
        case 9: 
          { return new Symbol(sym.Pipe, yychar, yyline, yytext());
          }
        case 105: break;
        case 76: 
          { return new Symbol(sym.Continue, yychar, yyline, yytext());
          }
        case 106: break;
        case 36: 
          { return new Symbol(sym.ShiftLeft, yychar, yyline, yytext());
          }
        case 107: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 108: break;
        case 7: 
          { return new Symbol(sym.Div, yychar, yyline, yytext());
          }
        case 109: break;
        case 27: 
          { return new Symbol(sym.Not, yychar, yyline, yytext());
          }
        case 110: break;
        case 77: 
          { return new Symbol(sym.Internal, yychar, yyline, yytext());
          }
        case 111: break;
        case 37: 
          { return new Symbol(sym.ShiftRight, yychar, yyline, yytext());
          }
        case 112: break;
        case 69: 
          { return new Symbol(sym.Address, yychar, yyline, yytext());
          }
        case 113: break;
        case 26: 
          { return new Symbol(sym.Op_atribucion, yychar, yyline, yytext());
          }
        case 114: break;
        case 18: 
          { return new Symbol(sym.LlaveCierra, yychar, yyline, yytext());
          }
        case 115: break;
        case 42: 
          { return new Symbol(sym.Units, yychar, yyline, yytext());
          }
        case 116: break;
        case 12: 
          { return new Symbol(sym.PuntoComa, yychar, yyline, yytext());
          }
        case 117: break;
        case 44: 
          { return new Symbol(sym.Enum, yychar, yyline, yytext());
          }
        case 118: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 119: break;
        case 43: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 120: break;
        case 38: 
          { return new Symbol(sym.Int, yychar, yyline, yytext());
          }
        case 121: break;
        case 57: 
          { return new Symbol(sym.UintValue, yychar, yyline, yytext());
          }
        case 122: break;
        case 64: 
          { return new Symbol(sym.Ufixed, yychar, yyline, yytext());
          }
        case 123: break;
        case 8: 
          { return new Symbol(sym.Mult, yychar, yyline, yytext());
          }
        case 124: break;
        case 68: 
          { return new Symbol(sym.Version, yychar, yyline, yytext());
          }
        case 125: break;
        case 20: 
          { return new Symbol(sym.Elevar, yychar, yyline, yytext());
          }
        case 126: break;
        case 72: 
          { return new Symbol(sym.Payable, yychar, yyline, yytext());
          }
        case 127: break;
        case 32: 
          { return new Symbol(sym.DobleAsterisco, yychar, yyline, yytext());
          }
        case 128: break;
        case 22: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 129: break;
        case 21: 
          { return new Symbol(sym.Virgulilla, yychar, yyline, yytext());
          }
        case 130: break;
        case 52: 
          { return new Symbol(sym.IntValue, yychar, yyline, yytext());
          }
        case 131: break;
        case 73: 
          { return new Symbol(sym.Private, yychar, yyline, yytext());
          }
        case 132: break;
        case 78: 
          { return new Symbol(sym.Modifier, yychar, yyline, yytext());
          }
        case 133: break;
        case 61: 
          { return new Symbol(sym.Struct, yychar, yyline, yytext());
          }
        case 134: break;
        case 70: 
          { return new Symbol(sym.Returns, yychar, yyline, yytext());
          }
        case 135: break;
        case 80: 
          { return new Symbol(sym.Constructor, yychar, yyline, yytext());
          }
        case 136: break;
        case 14: 
          { return new Symbol(sym.ParenCuadCierra, yychar, yyline, yytext());
          }
        case 137: break;
        case 49: 
          { return new Symbol(sym.Op_Booleano, yychar, yyline, yytext());
          }
        case 138: break;
        case 19: 
          { return new Symbol(sym.Ampersand, yychar, yyline, yytext());
          }
        case 139: break;
        case 15: 
          { return new Symbol(sym.SignoPregunta, yychar, yyline, yytext());
          }
        case 140: break;
        case 79: 
          { return new Symbol(sym.Function, yychar, yyline, yytext());
          }
        case 141: break;
        case 35: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 142: break;
        case 47: 
          { return new Symbol(sym.Bool, yychar, yyline, yytext());
          }
        case 143: break;
        case 4: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 144: break;
        case 51: 
          { return new Symbol(sym.Uint, yychar, yyline, yytext());
          }
        case 145: break;
        case 45: 
          { return new Symbol(sym.ERROR_NotacionCientifica, yychar, yyline, yytext());
          }
        case 146: break;
        case 34: 
          { return new Symbol(sym.Do, yychar, yyline, yytext());
          }
        case 147: break;
        case 24: 
          { return new Symbol(sym.ParentAbre, yychar, yyline, yytext());
          }
        case 148: break;
        case 17: 
          { return new Symbol(sym.LlaveAbre, yychar, yyline, yytext());
          }
        case 149: break;
        case 25: 
          { return new Symbol(sym.ParentCierre, yychar, yyline, yytext());
          }
        case 150: break;
        case 5: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 151: break;
        case 63: 
          { return new Symbol(sym.BytesValue, yychar, yyline, yytext());
          }
        case 152: break;
        case 56: 
          { return new Symbol(sym.Bytes, yychar, yyline, yytext());
          }
        case 153: break;
        case 28: 
          { return new Symbol(sym.ERROR_Identificador, yychar, yyline, yytext());
          }
        case 154: break;
        case 62: 
          { return new Symbol(sym.String, yychar, yyline, yytext());
          }
        case 155: break;
        case 41: 
          { return new Symbol(sym.Var, yychar, yyline, yytext());
          }
        case 156: break;
        case 65: 
          { return new Symbol(sym.Import, yychar, yyline, yytext());
          }
        case 157: break;
        case 60: 
          { return new Symbol(sym.Return, yychar, yyline, yytext());
          }
        case 158: break;
        case 58: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 159: break;
        case 23: 
          { return new Symbol(sym.Mod, yychar, yyline, yytext());
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
