/* The following code was generated by JFlex 1.4.3 on 7/11/20 4:31 PM */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/11/20 4:31 PM from the specification file
 * <tt>C:/Users/kenda/Desktop/Archivos/TEC/V Semestre/Compiladores e Interpretes/Proyecto/1/Code/ProyectoScannerCompiladores/ProyectoScanner/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 63,  0,  0,  8,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     8, 54, 64,  0,  0, 50, 45, 65, 51, 52, 36, 48, 37,  7,  5, 49, 
     9, 56, 58, 60, 59, 61, 57, 62, 55,  3, 42, 38, 34, 53, 35, 41, 
     0,  4,  4,  4,  4,  6,  4,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 39,  0, 40, 46,  1, 
     0, 10, 14, 20, 11,  2, 25, 29, 26, 23,  1, 17, 16, 24, 21, 15, 
    28,  1, 12, 13, 19, 22, 30, 31, 27, 18, 32, 43, 33, 44, 47,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\1\4\1\5\20\2\1\6"+
    "\2\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\2\1\5\2\2\33\1\31"+
    "\1\2\1\34\2\2\1\35\22\2\1\36\21\2\1\7"+
    "\1\37\1\40\1\41\1\0\1\5\1\0\1\33\1\0"+
    "\3\2\2\0\25\2\1\42\6\2\1\43\2\2\1\44"+
    "\4\2\1\45\2\2\1\46\1\2\1\0\1\47\1\2"+
    "\1\50\1\33\4\2\1\51\6\2\1\52\1\53\1\2"+
    "\1\54\1\55\1\51\2\2\1\56\3\2\1\57\11\2"+
    "\1\60\2\2\2\0\4\2\1\61\1\2\1\5\11\2"+
    "\1\62\1\63\6\2\1\64\7\2\1\57\6\2\2\0"+
    "\4\2\1\65\1\2\1\66\1\2\1\67\1\2\1\70"+
    "\1\71\1\2\3\72\5\2\1\64\1\73\1\2\1\74"+
    "\3\2\2\0\1\2\1\75\1\2\1\76\1\77\1\100"+
    "\6\2\1\101\2\2\2\0\1\102\1\103\1\104\1\2"+
    "\1\105\1\106\1\107\1\110\1\111\2\0\1\2\2\0"+
    "\1\2\2\0\1\112\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u01ce\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\u0738\0\102\0\102\0\u018c"+
    "\0\u077a\0\102\0\102\0\102\0\u07bc\0\u07bc\0\u07fe\0\u0840"+
    "\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a\0\u014a\0\u09cc\0\102"+
    "\0\u0a0e\0\204\0\u0a50\0\u0a92\0\204\0\u0ad4\0\u0b16\0\u0b58"+
    "\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68"+
    "\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\204"+
    "\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\u1398\0\102\0\102\0\102\0\102\0\u13da\0\u141c\0\u07fe"+
    "\0\102\0\u0840\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8"+
    "\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8"+
    "\0\u1c1a\0\u1c5c\0\u1c9e\0\204\0\u1ce0\0\u1d22\0\u1d64\0\u1da6"+
    "\0\u1de8\0\u1e2a\0\u1e6c\0\204\0\u1eae\0\u1ef0\0\204\0\u1f32"+
    "\0\u1f74\0\204\0\u1fb6\0\204\0\u1524\0\u1ff8\0\u203a\0\u207c"+
    "\0\u20be\0\204\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a"+
    "\0\204\0\u228c\0\u22ce\0\204\0\204\0\u2310\0\u2352\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4"+
    "\0\u24de\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\204\0\u2730"+
    "\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\204"+
    "\0\u2940\0\u13da\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc"+
    "\0\u2b0e\0\u2b50\0\u2b92\0\204\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a"+
    "\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2da2"+
    "\0\u2eaa\0\u2eec\0\u2f2e\0\204\0\u2f70\0\u2fb2\0\u2ff4\0\u3036"+
    "\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246"+
    "\0\204\0\u3288\0\204\0\u32ca\0\u330c\0\u334e\0\204\0\204"+
    "\0\u3390\0\204\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c"+
    "\0\u355e\0\204\0\204\0\u35a0\0\204\0\u35e2\0\u3624\0\u3666"+
    "\0\u36a8\0\u36ea\0\u372c\0\204\0\u376e\0\204\0\204\0\204"+
    "\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\204\0\u393c"+
    "\0\u397e\0\u39c0\0\u3a02\0\204\0\204\0\204\0\u3a44\0\204"+
    "\0\204\0\204\0\204\0\204\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c"+
    "\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\204\0\u3c96\0\u3cd8\0\u3d1a"+
    "\0\u3d5c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\3\1\7"+
    "\1\10\1\5\1\11\1\12\1\13\1\14\1\15\3\3"+
    "\1\16\1\17\1\20\1\3\1\21\1\22\1\23\1\24"+
    "\1\25\1\3\1\26\1\3\1\27\1\30\1\3\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\10\5\1\10\1\57"+
    "\1\60\103\0\4\3\1\0\1\3\2\0\30\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\7\3\1\61"+
    "\2\3\1\62\1\3\1\63\13\3\26\0\10\3\3\0"+
    "\2\64\1\65\1\5\1\64\1\66\1\65\2\0\1\5"+
    "\27\64\26\0\10\5\1\0\2\64\3\0\1\67\5\0"+
    "\1\67\55\0\10\67\70\0\1\70\24\0\1\10\34\0"+
    "\1\10\31\0\1\10\3\0\4\3\1\0\1\3\2\0"+
    "\2\3\1\71\1\3\1\72\23\3\26\0\10\3\4\0"+
    "\1\3\1\73\2\3\1\0\1\3\2\0\1\3\1\74"+
    "\4\3\1\75\21\3\26\0\10\3\4\0\1\3\1\76"+
    "\2\3\1\0\1\3\2\0\30\3\26\0\10\3\4\0"+
    "\1\3\1\77\2\3\1\0\1\3\2\0\6\3\1\100"+
    "\3\3\1\101\14\3\1\102\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\1\3\1\103\1\3\1\104\2\3"+
    "\1\105\2\3\1\106\16\3\26\0\10\3\4\0\1\3"+
    "\1\107\2\3\1\0\1\3\2\0\30\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\3\3\1\110\15\3"+
    "\1\111\6\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\1\3\1\112\4\3\1\113\21\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\16\3\1\114\1\3"+
    "\1\115\7\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\14\3\1\116\2\3\1\117\1\120\7\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\1\3\1\121"+
    "\4\3\1\122\7\3\1\123\11\3\26\0\10\3\4\0"+
    "\4\3\1\0\1\3\2\0\1\3\1\124\1\3\1\125"+
    "\2\3\1\126\6\3\1\127\1\130\11\3\26\0\10\3"+
    "\4\0\1\3\1\131\2\3\1\0\1\3\2\0\6\3"+
    "\1\132\21\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\1\3\1\133\1\3\1\134\11\3\1\135\12\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\1\3"+
    "\1\136\14\3\1\137\11\3\26\0\10\3\4\0\1\3"+
    "\1\140\2\3\1\0\1\3\2\0\21\3\1\141\6\3"+
    "\26\0\10\3\44\0\1\142\102\0\1\143\22\0\1\142"+
    "\57\0\1\144\21\0\1\142\60\0\1\145\20\0\1\70"+
    "\71\0\1\142\70\0\1\146\14\0\1\147\3\0\1\70"+
    "\101\0\1\142\14\0\63\150\2\0\12\150\1\0\1\151"+
    "\1\150\63\152\2\0\12\152\1\0\1\152\1\151\1\0"+
    "\4\3\1\0\1\3\2\0\4\3\1\153\23\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\21\3\1\154"+
    "\6\3\26\0\10\3\4\0\4\3\1\0\1\3\2\0"+
    "\15\3\1\155\12\3\26\0\10\3\3\0\5\64\1\0"+
    "\1\64\2\0\30\64\26\0\10\64\1\0\7\64\1\0"+
    "\1\64\1\156\1\0\30\64\17\0\1\156\6\0\10\64"+
    "\1\0\2\64\2\0\1\157\1\67\2\0\1\157\2\0"+
    "\1\67\55\0\10\67\4\0\4\3\1\0\1\3\2\0"+
    "\2\3\1\160\25\3\26\0\10\3\4\0\4\3\1\0"+
    "\1\3\2\0\7\3\1\161\20\3\26\0\10\3\4\0"+
    "\4\3\1\0\1\3\2\0\11\3\1\162\16\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\12\3\1\163"+
    "\15\3\26\0\10\3\4\0\4\3\1\0\1\3\2\0"+
    "\13\3\1\164\1\165\13\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\7\3\1\166\20\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\3\3\1\167\24\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\1\3"+
    "\1\170\26\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\7\3\1\171\20\3\26\0\10\3\4\0\1\3"+
    "\1\172\2\3\1\0\1\3\2\0\30\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\6\3\1\173\21\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\12\3"+
    "\1\174\15\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\1\3\1\175\26\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\1\3\1\176\13\3\1\177\12\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\16\3"+
    "\1\200\11\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\7\3\1\201\20\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\14\3\1\202\13\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\14\3\1\203\13\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\16\3"+
    "\1\204\11\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\12\3\1\205\15\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\23\3\1\206\4\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\23\3\1\207\4\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\2\3"+
    "\1\210\25\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\14\3\1\211\13\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\7\3\1\212\20\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\6\3\1\213\21\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\3\3"+
    "\1\214\24\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\14\3\1\215\13\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\14\3\1\216\13\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\22\3\1\217\5\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\15\3"+
    "\1\175\12\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\11\3\1\220\16\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\1\3\1\221\14\3\1\222\11\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\5\3"+
    "\1\223\22\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\3\3\1\224\24\3\26\0\10\3\4\0\1\3"+
    "\1\225\2\3\1\0\1\3\2\0\30\3\26\0\10\3"+
    "\4\0\1\3\1\226\2\3\1\0\1\3\2\0\16\3"+
    "\1\227\11\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\16\3\1\230\11\3\26\0\10\3\3\0\44\146"+
    "\1\231\35\146\77\147\1\0\2\147\1\0\1\3\1\232"+
    "\2\3\1\0\1\3\2\0\30\3\26\0\10\3\4\0"+
    "\1\3\1\233\2\3\1\0\1\3\2\0\30\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\17\3\1\234"+
    "\10\3\26\0\10\3\6\0\1\235\5\0\1\235\55\0"+
    "\10\235\6\0\1\235\3\0\1\156\1\0\1\235\46\0"+
    "\1\156\6\0\10\235\4\0\4\3\1\0\1\3\2\0"+
    "\3\3\1\236\24\3\26\0\10\3\4\0\1\3\1\237"+
    "\2\3\1\0\1\3\2\0\30\3\26\0\10\3\4\0"+
    "\4\3\1\0\1\3\2\0\4\3\1\227\23\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\15\3\1\240"+
    "\12\3\26\0\10\3\4\0\4\3\1\0\1\3\2\0"+
    "\6\3\1\241\21\3\26\0\10\3\4\0\4\3\1\0"+
    "\1\3\2\0\2\3\1\242\25\3\26\0\10\3\4\0"+
    "\4\3\1\0\1\3\2\0\16\3\1\243\11\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\15\3\1\244"+
    "\1\245\11\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\5\3\1\246\22\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\1\3\1\247\26\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\1\3\1\250\26\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\7\3"+
    "\1\251\20\3\26\0\10\3\4\0\1\3\1\252\2\3"+
    "\1\0\1\3\2\0\30\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\3\3\1\162\24\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\14\3\1\253\13\3"+
    "\26\0\10\3\4\0\1\3\1\254\2\3\1\0\1\3"+
    "\2\0\30\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\4\3\1\255\23\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\7\3\1\256\20\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\4\3\1\257\5\3"+
    "\1\260\15\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\12\3\1\261\15\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\22\3\1\262\5\3\26\0\10\3"+
    "\4\0\1\3\1\263\1\264\1\3\1\0\1\3\2\0"+
    "\30\3\26\0\1\265\1\266\1\267\1\270\1\271\1\272"+
    "\1\264\1\272\4\0\4\3\1\0\1\3\2\0\6\3"+
    "\1\273\21\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\23\3\1\274\4\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\16\3\1\275\11\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\15\3\1\276\12\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\4\3"+
    "\1\177\23\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\17\3\1\277\10\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\13\3\1\300\14\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\14\3\1\301\13\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\30\3"+
    "\26\0\10\3\1\0\1\302\1\303\1\0\4\3\1\0"+
    "\1\3\2\0\1\3\1\304\26\3\26\0\10\3\4\0"+
    "\4\3\1\0\1\3\2\0\24\3\1\305\3\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\25\3\1\306"+
    "\2\3\26\0\10\3\4\0\4\3\1\0\1\3\2\0"+
    "\7\3\1\307\20\3\26\0\10\3\4\0\4\3\1\0"+
    "\1\3\2\0\26\3\1\310\1\3\26\0\10\3\4\0"+
    "\4\3\1\0\1\3\2\0\10\3\1\162\17\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\7\3\1\311"+
    "\20\3\26\0\10\3\3\0\44\146\1\231\14\146\1\312"+
    "\20\146\1\0\4\3\1\0\1\3\2\0\3\3\1\227"+
    "\24\3\26\0\10\3\4\0\1\3\1\313\2\3\1\0"+
    "\1\3\2\0\30\3\26\0\10\3\4\0\4\3\1\0"+
    "\1\3\2\0\12\3\1\314\11\3\1\315\3\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\3\3\1\316"+
    "\24\3\26\0\10\3\4\0\4\3\1\0\1\3\2\0"+
    "\14\3\1\317\13\3\26\0\10\3\4\0\4\3\1\0"+
    "\1\3\2\0\2\3\1\320\25\3\26\0\10\3\4\0"+
    "\4\3\1\0\1\3\2\0\13\3\1\321\14\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\14\3\1\322"+
    "\13\3\26\0\10\3\4\0\4\3\1\0\1\3\2\0"+
    "\6\3\1\227\21\3\26\0\10\3\4\0\4\3\1\0"+
    "\1\3\2\0\14\3\1\323\13\3\26\0\10\3\4\0"+
    "\4\3\1\0\1\3\2\0\10\3\1\324\17\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\4\3\1\325"+
    "\23\3\26\0\10\3\4\0\4\3\1\0\1\3\2\0"+
    "\4\3\1\326\23\3\26\0\10\3\4\0\4\3\1\0"+
    "\1\3\2\0\13\3\1\327\14\3\26\0\10\3\4\0"+
    "\4\3\1\0\1\3\2\0\12\3\1\330\15\3\26\0"+
    "\10\3\4\0\4\3\1\0\1\3\2\0\3\3\1\331"+
    "\12\3\1\332\11\3\26\0\10\3\4\0\2\3\1\333"+
    "\1\3\1\0\1\3\2\0\30\3\26\0\1\334\1\335"+
    "\1\336\1\337\1\340\1\341\1\333\1\341\4\0\1\3"+
    "\1\342\2\3\1\0\1\3\2\0\30\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\3\3\1\343\24\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\30\3"+
    "\26\0\2\3\1\344\5\3\4\0\4\3\1\0\1\3"+
    "\2\0\1\344\27\3\26\0\1\344\7\3\4\0\2\3"+
    "\1\272\1\3\1\0\1\3\2\0\1\267\27\3\26\0"+
    "\1\267\1\272\1\265\1\271\1\267\1\264\1\272\1\264"+
    "\4\0\4\3\1\0\1\3\2\0\30\3\26\0\4\3"+
    "\1\344\3\3\4\0\4\3\1\0\1\3\2\0\1\271"+
    "\27\3\26\0\1\3\1\264\1\3\1\267\1\265\1\272"+
    "\1\264\1\3\4\0\4\3\1\0\1\3\2\0\30\3"+
    "\26\0\3\3\1\344\4\3\4\0\4\3\1\0\1\3"+
    "\2\0\3\3\1\345\24\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\16\3\1\346\11\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\20\3\1\347\7\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\12\3"+
    "\1\350\15\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\12\3\1\351\15\3\26\0\10\3\4\0\1\3"+
    "\1\352\2\3\1\0\1\3\2\0\30\3\26\0\10\3"+
    "\5\0\3\353\1\0\1\353\2\0\3\353\2\0\1\353"+
    "\5\0\1\353\4\0\1\353\35\0\10\353\5\0\3\354"+
    "\1\0\1\354\2\0\3\354\2\0\1\354\5\0\1\354"+
    "\4\0\1\354\35\0\10\354\4\0\4\3\1\0\1\3"+
    "\2\0\5\3\1\355\22\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\17\3\1\356\10\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\1\3\1\357\26\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\16\3"+
    "\1\360\11\3\26\0\10\3\4\0\1\3\1\361\2\3"+
    "\1\0\1\3\2\0\30\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\4\3\1\362\23\3\26\0\10\3"+
    "\4\0\1\3\1\363\2\3\1\0\1\3\2\0\30\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\1\3"+
    "\1\364\26\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\14\3\1\365\13\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\2\3\1\162\25\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\16\3\1\366\11\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\12\3"+
    "\1\367\15\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\24\3\1\370\3\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\13\3\1\371\14\3\26\0\10\3"+
    "\4\0\2\3\1\372\1\3\1\0\1\3\2\0\30\3"+
    "\26\0\1\372\1\373\1\372\1\373\1\372\1\374\2\372"+
    "\4\0\4\3\1\0\1\3\2\0\20\3\1\375\7\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\6\3"+
    "\1\376\21\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\3\3\1\377\24\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\1\3\1\u0100\26\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\14\3\1\u0101\13\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\30\3"+
    "\26\0\2\3\1\u0102\5\3\4\0\4\3\1\0\1\3"+
    "\2\0\1\u0102\27\3\26\0\1\u0102\7\3\4\0\2\3"+
    "\1\341\1\3\1\0\1\3\2\0\1\336\27\3\26\0"+
    "\1\336\1\341\1\334\1\340\1\336\1\333\1\341\1\333"+
    "\4\0\4\3\1\0\1\3\2\0\30\3\26\0\4\3"+
    "\1\u0102\3\3\4\0\4\3\1\0\1\3\2\0\1\340"+
    "\27\3\26\0\1\3\1\333\1\3\1\336\1\334\1\341"+
    "\1\333\1\3\4\0\4\3\1\0\1\3\2\0\30\3"+
    "\26\0\3\3\1\u0102\4\3\4\0\4\3\1\0\1\3"+
    "\2\0\2\3\1\u0103\25\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\14\3\1\u0104\13\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\12\3\1\u0105\15\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\14\3"+
    "\1\u0106\13\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\16\3\1\u0107\11\3\26\0\10\3\4\0\1\3"+
    "\1\162\2\3\1\0\1\3\2\0\30\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\16\3\1\u0108\11\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\11\3"+
    "\1\227\16\3\26\0\10\3\5\0\3\u0109\1\0\1\u0109"+
    "\2\0\3\u0109\2\0\1\u0109\5\0\1\u0109\4\0\1\u0109"+
    "\35\0\10\u0109\5\0\3\u010a\1\0\1\u010a\2\0\3\u010a"+
    "\2\0\1\u010a\5\0\1\u010a\4\0\1\u010a\35\0\10\u010a"+
    "\4\0\4\3\1\0\1\3\2\0\7\3\1\u010b\20\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\1\3"+
    "\1\u010c\26\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\12\3\1\u010d\15\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\13\3\1\u010e\14\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\4\3\1\u010f\23\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\12\3"+
    "\1\371\15\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\4\3\1\u0110\23\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\12\3\1\u0111\15\3\26\0\10\3"+
    "\4\0\1\3\1\242\2\3\1\0\1\3\2\0\30\3"+
    "\26\0\10\3\4\0\2\3\1\372\1\3\1\0\1\3"+
    "\2\0\1\372\27\3\26\0\10\372\4\0\4\3\1\0"+
    "\1\3\2\0\1\372\27\3\26\0\1\3\1\372\1\3"+
    "\1\372\4\3\4\0\1\3\1\u0112\2\3\1\0\1\3"+
    "\2\0\30\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\2\3\1\371\25\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\15\3\1\u0113\12\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\13\3\1\u0114\14\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\15\3"+
    "\1\u0115\12\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\1\3\1\u0116\26\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\24\3\1\u0117\3\3\26\0\10\3"+
    "\4\0\1\3\1\u0118\2\3\1\0\1\3\2\0\30\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\6\3"+
    "\1\u0119\21\3\26\0\10\3\5\0\3\u011a\1\0\1\u011a"+
    "\2\0\3\u011a\2\0\1\u011a\5\0\1\u011a\4\0\1\u011a"+
    "\35\0\10\u011a\5\0\3\u011b\1\0\1\u011b\2\0\3\u011b"+
    "\2\0\1\u011b\5\0\1\u011b\4\0\1\u011b\35\0\10\u011b"+
    "\4\0\1\3\1\u011c\2\3\1\0\1\3\2\0\30\3"+
    "\26\0\10\3\4\0\1\3\1\u011d\2\3\1\0\1\3"+
    "\2\0\30\3\26\0\10\3\4\0\4\3\1\0\1\3"+
    "\2\0\11\3\1\u011e\16\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\3\3\1\242\24\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\13\3\1\u011f\14\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\12\3"+
    "\1\u0120\15\3\26\0\10\3\4\0\1\3\1\u0121\2\3"+
    "\1\0\1\3\2\0\30\3\26\0\10\3\4\0\4\3"+
    "\1\0\1\3\2\0\7\3\1\u0122\20\3\26\0\10\3"+
    "\4\0\4\3\1\0\1\3\2\0\3\3\1\u0123\24\3"+
    "\26\0\10\3\4\0\4\3\1\0\1\3\2\0\14\3"+
    "\1\u0124\13\3\26\0\10\3\5\0\3\u0125\1\0\1\u0125"+
    "\2\0\3\u0125\2\0\1\u0125\5\0\1\u0125\4\0\1\u0125"+
    "\35\0\10\u0125\5\0\3\u0126\1\0\1\u0126\2\0\3\u0126"+
    "\2\0\1\u0126\5\0\1\u0126\4\0\1\u0126\35\0\10\u0126"+
    "\4\0\4\3\1\0\1\3\2\0\12\3\1\u0127\15\3"+
    "\26\0\10\3\5\0\3\u0128\1\0\1\u0128\2\0\3\u0128"+
    "\2\0\1\u0128\5\0\1\u0128\4\0\1\u0128\35\0\10\u0128"+
    "\5\0\3\u0129\1\0\1\u0129\2\0\3\u0129\2\0\1\u0129"+
    "\5\0\1\u0129\4\0\1\u0129\35\0\10\u0129\4\0\4\3"+
    "\1\0\1\3\2\0\6\3\1\u012a\21\3\26\0\10\3"+
    "\5\0\3\u012b\1\0\1\u012b\2\0\3\u012b\2\0\1\u012b"+
    "\5\0\1\u012b\4\0\1\u012b\35\0\10\u012b\5\0\3\u012c"+
    "\1\0\1\u012c\2\0\3\u012c\2\0\1\u012c\5\0\1\u012c"+
    "\4\0\1\u012c\35\0\10\u012c\4\0\4\3\1\0\1\3"+
    "\2\0\3\3\1\u012d\24\3\26\0\10\3\5\0\3\u012e"+
    "\1\0\1\u012e\2\0\3\u012e\2\0\1\u012e\5\0\1\u012e"+
    "\4\0\1\u012e\35\0\10\u012e\5\0\3\u012f\1\0\1\u012f"+
    "\2\0\3\u012f\2\0\1\u012f\5\0\1\u012f\4\0\1\u012f"+
    "\35\0\10\u012f\5\0\3\u0130\1\0\1\u0130\2\0\3\u0130"+
    "\2\0\1\u0130\5\0\1\u0130\4\0\1\u0130\35\0\10\u0130"+
    "\5\0\3\u0131\1\0\1\u0131\2\0\3\u0131\2\0\1\u0131"+
    "\5\0\1\u0131\4\0\1\u0131\35\0\10\u0131\5\0\3\u0130"+
    "\1\0\1\u0130\2\0\3\u0130\2\0\1\u0130\5\0\1\u0130"+
    "\4\0\1\u0130\35\0\10\u0130\1\0\1\151\3\0\3\u0131"+
    "\1\0\1\u0131\2\0\3\u0131\2\0\1\u0131\5\0\1\u0131"+
    "\4\0\1\u0131\35\0\10\u0131\2\0\1\151";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15774];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\7\11\1\1\2\11\2\1\3\11"+
    "\13\1\1\11\51\1\4\11\1\0\1\1\1\0\1\11"+
    "\1\0\3\1\2\0\51\1\1\0\50\1\2\0\47\1"+
    "\2\0\34\1\2\0\17\1\2\0\11\1\2\0\1\1"+
    "\2\0\1\1\2\0\1\1\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { return new Symbol(sym.Public, yychar, yyline, yytext());
          }
        case 75: break;
        case 27: 
          { return new Symbol(sym.Literal, yychar, yyline, yytext());
          }
        case 76: break;
        case 65: 
          { return new Symbol(sym.Mapping, yychar, yyline, yytext());
          }
        case 77: break;
        case 35: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 78: break;
        case 14: 
          { return new Symbol(sym.DosPuntos, yychar, yyline, yytext());
          }
        case 79: break;
        case 41: 
          { return new Symbol(sym.Transac, yychar, yyline, yytext());
          }
        case 80: break;
        case 7: 
          { return new Symbol(sym.Op_relacional, yychar, yyline, yytext());
          }
        case 81: break;
        case 28: 
          { return new Symbol(sym.As, yychar, yyline, yytext());
          }
        case 82: break;
        case 45: 
          { return new Symbol(sym.This, yychar, yyline, yytext());
          }
        case 83: break;
        case 36: 
          { return new Symbol(sym.Hex, yychar, yyline, yytext());
          }
        case 84: break;
        case 43: 
          { return new Symbol(sym.Byte, yychar, yyline, yytext());
          }
        case 85: break;
        case 61: 
          { return new Symbol(sym.Pragma, yychar, yyline, yytext());
          }
        case 86: break;
        case 49: 
          { return new Symbol(sym.View, yychar, yyline, yytext());
          }
        case 87: break;
        case 9: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 88: break;
        case 54: 
          { return new Symbol(sym.Delete, yychar, yyline, yytext());
          }
        case 89: break;
        case 48: 
          { return new Symbol(sym.From, yychar, yyline, yytext());
          }
        case 90: break;
        case 11: 
          { return new Symbol(sym.ParenCuadAbre, yychar, yyline, yytext());
          }
        case 91: break;
        case 50: 
          { return new Symbol(sym.Break, yychar, yyline, yytext());
          }
        case 92: break;
        case 5: 
          { /*Ignore*/
          }
        case 93: break;
        case 68: 
          { return new Symbol(sym.Solidity, yychar, yyline, yytext());
          }
        case 94: break;
        case 69: 
          { return new Symbol(sym.Contract, yychar, yyline, yytext());
          }
        case 95: break;
        case 6: 
          { return new Symbol(sym.Pipe, yychar, yyline, yytext());
          }
        case 96: break;
        case 70: 
          { return new Symbol(sym.Continue, yychar, yyline, yytext());
          }
        case 97: break;
        case 31: 
          { return new Symbol(sym.ShiftLeft, yychar, yyline, yytext());
          }
        case 98: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 99: break;
        case 21: 
          { return new Symbol(sym.Div, yychar, yyline, yytext());
          }
        case 100: break;
        case 26: 
          { return new Symbol(sym.Not, yychar, yyline, yytext());
          }
        case 101: break;
        case 71: 
          { return new Symbol(sym.Internal, yychar, yyline, yytext());
          }
        case 102: break;
        case 32: 
          { return new Symbol(sym.ShiftRight, yychar, yyline, yytext());
          }
        case 103: break;
        case 63: 
          { return new Symbol(sym.Address, yychar, yyline, yytext());
          }
        case 104: break;
        case 25: 
          { return new Symbol(sym.Op_atribucion, yychar, yyline, yytext());
          }
        case 105: break;
        case 16: 
          { return new Symbol(sym.LlaveCierra, yychar, yyline, yytext());
          }
        case 106: break;
        case 38: 
          { return new Symbol(sym.Units, yychar, yyline, yytext());
          }
        case 107: break;
        case 10: 
          { return new Symbol(sym.PuntoComa, yychar, yyline, yytext());
          }
        case 108: break;
        case 40: 
          { return new Symbol(sym.Enum, yychar, yyline, yytext());
          }
        case 109: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 110: break;
        case 39: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 111: break;
        case 34: 
          { return new Symbol(sym.Int, yychar, yyline, yytext());
          }
        case 112: break;
        case 52: 
          { return new Symbol(sym.UintValue, yychar, yyline, yytext());
          }
        case 113: break;
        case 59: 
          { return new Symbol(sym.Ufixed, yychar, yyline, yytext());
          }
        case 114: break;
        case 8: 
          { return new Symbol(sym.Mult, yychar, yyline, yytext());
          }
        case 115: break;
        case 18: 
          { return new Symbol(sym.Elevar, yychar, yyline, yytext());
          }
        case 116: break;
        case 66: 
          { return new Symbol(sym.Payable, yychar, yyline, yytext());
          }
        case 117: break;
        case 33: 
          { return new Symbol(sym.DobleAsterisco, yychar, yyline, yytext());
          }
        case 118: break;
        case 20: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 119: break;
        case 19: 
          { return new Symbol(sym.Virgulilla, yychar, yyline, yytext());
          }
        case 120: break;
        case 47: 
          { return new Symbol(sym.IntValue, yychar, yyline, yytext());
          }
        case 121: break;
        case 67: 
          { return new Symbol(sym.Private, yychar, yyline, yytext());
          }
        case 122: break;
        case 72: 
          { return new Symbol(sym.Modifier, yychar, yyline, yytext());
          }
        case 123: break;
        case 56: 
          { return new Symbol(sym.Struct, yychar, yyline, yytext());
          }
        case 124: break;
        case 64: 
          { return new Symbol(sym.Returns, yychar, yyline, yytext());
          }
        case 125: break;
        case 74: 
          { return new Symbol(sym.Constructor, yychar, yyline, yytext());
          }
        case 126: break;
        case 12: 
          { return new Symbol(sym.ParenCuadCierra, yychar, yyline, yytext());
          }
        case 127: break;
        case 44: 
          { return new Symbol(sym.Op_Booleano, yychar, yyline, yytext());
          }
        case 128: break;
        case 17: 
          { return new Symbol(sym.Ampersand, yychar, yyline, yytext());
          }
        case 129: break;
        case 13: 
          { return new Symbol(sym.SignoPregunta, yychar, yyline, yytext());
          }
        case 130: break;
        case 73: 
          { return new Symbol(sym.Function, yychar, yyline, yytext());
          }
        case 131: break;
        case 30: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 132: break;
        case 42: 
          { return new Symbol(sym.Bool, yychar, yyline, yytext());
          }
        case 133: break;
        case 3: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 134: break;
        case 46: 
          { return new Symbol(sym.Uint, yychar, yyline, yytext());
          }
        case 135: break;
        case 29: 
          { return new Symbol(sym.Do, yychar, yyline, yytext());
          }
        case 136: break;
        case 23: 
          { return new Symbol(sym.ParentAbre, yychar, yyline, yytext());
          }
        case 137: break;
        case 15: 
          { return new Symbol(sym.LlaveAbre, yychar, yyline, yytext());
          }
        case 138: break;
        case 24: 
          { return new Symbol(sym.ParentCierre, yychar, yyline, yytext());
          }
        case 139: break;
        case 4: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 140: break;
        case 58: 
          { return new Symbol(sym.BytesValue, yychar, yyline, yytext());
          }
        case 141: break;
        case 51: 
          { return new Symbol(sym.Bytes, yychar, yyline, yytext());
          }
        case 142: break;
        case 57: 
          { return new Symbol(sym.String, yychar, yyline, yytext());
          }
        case 143: break;
        case 37: 
          { return new Symbol(sym.Var, yychar, yyline, yytext());
          }
        case 144: break;
        case 60: 
          { return new Symbol(sym.Import, yychar, yyline, yytext());
          }
        case 145: break;
        case 55: 
          { return new Symbol(sym.Return, yychar, yyline, yytext());
          }
        case 146: break;
        case 53: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 147: break;
        case 22: 
          { return new Symbol(sym.Mod, yychar, yyline, yytext());
          }
        case 148: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
