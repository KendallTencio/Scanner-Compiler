/* The following code was generated by JFlex 1.4.3 on 22/05/20 07:00 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/05/20 07:00 PM from the specification file
 * <tt>C:/Users/Franc/Documents/Uned Tec/tecDigital/2020 Semestre I/Compi/ProyectoScannerCompiladores/ProyectoScanner/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\16\2\0\1\11\22\0\1\11\1\57\1\14\2\0"+
    "\1\62\1\61\1\15\1\17\1\17\1\56\1\10\1\11\1\5\1\6"+
    "\1\55\1\2\1\51\1\50\1\47\1\53\1\2\1\52\1\2\1\46"+
    "\1\2\1\62\1\62\1\63\1\60\1\64\1\62\1\0\4\4\1\7"+
    "\1\4\11\1\1\43\12\1\1\62\1\21\1\62\1\62\1\1\1\0"+
    "\1\24\1\27\1\34\1\25\1\3\1\40\1\42\1\12\1\36\1\1"+
    "\1\32\1\31\1\37\1\22\1\30\1\41\1\1\1\20\1\26\1\23"+
    "\1\35\1\44\1\45\1\13\1\33\1\54\1\62\1\62\1\62\1\62"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\3\4\1\5\1\2"+
    "\2\1\1\6\1\4\20\2\5\4\2\7\1\3\4\2"+
    "\1\3\1\0\1\3\2\2\1\0\1\3\2\0\1\3"+
    "\1\0\4\2\1\10\40\2\1\5\1\0\1\3\1\0"+
    "\1\3\3\2\2\0\1\10\24\2\1\10\14\2\1\11"+
    "\1\2\1\0\1\3\1\0\1\2\3\0\4\2\1\12"+
    "\7\2\1\10\1\12\2\2\1\10\15\2\1\5\2\0"+
    "\11\2\1\10\15\2\2\0\1\10\12\2\2\0\4\2"+
    "\2\0\1\2\2\0\1\2\6\0\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\65\0\65\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601"+
    "\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\u013e\0\u087d\0\u08b2\0\u08e7\0\u0212"+
    "\0\u0212\0\u091c\0\u0247\0\u0247\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\152\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3"+
    "\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b"+
    "\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203"+
    "\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553"+
    "\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb"+
    "\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3"+
    "\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\152\0\u1a16"+
    "\0\u1a4b\0\u1199\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89"+
    "\0\u1bbe\0\u1bf3\0\u1c28\0\152\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc"+
    "\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c"+
    "\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\65\0\u218a\0\u21bf"+
    "\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367"+
    "\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f"+
    "\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7"+
    "\0\u26ec\0\u13ab\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a"+
    "\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2"+
    "\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a"+
    "\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\3"+
    "\1\10\1\11\1\12\1\3\1\13\1\14\1\15\1\16"+
    "\1\17\1\2\1\3\1\20\1\21\1\22\1\23\1\24"+
    "\3\3\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\3\1\34\1\35\1\36\6\4\1\3\1\37\1\40"+
    "\2\10\1\41\1\16\1\42\1\43\66\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\33\3\10\0"+
    "\2\44\1\4\1\45\1\44\1\0\1\46\1\44\2\0"+
    "\4\44\2\0\26\44\6\4\1\44\11\0\4\3\2\0"+
    "\1\3\2\0\1\3\1\47\4\0\1\3\1\0\1\50"+
    "\1\51\5\3\1\52\23\3\12\0\1\53\3\0\1\54"+
    "\37\0\6\53\4\0\1\16\6\0\1\55\43\0\6\55"+
    "\71\0\1\16\15\0\1\11\54\0\2\3\1\56\1\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\6\3"+
    "\1\57\24\3\10\0\14\60\1\61\1\60\3\0\1\62"+
    "\2\0\41\60\15\63\1\64\3\0\1\65\2\0\41\63"+
    "\1\0\2\3\1\66\1\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\3\1\0\33\3\11\0\4\3\2\0\1\3"+
    "\2\0\1\67\1\3\4\0\1\70\1\0\33\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\3\3\1\71\1\72\26\3\11\0\2\3\1\73\1\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\2\3"+
    "\1\74\3\3\1\72\24\3\11\0\2\3\1\75\1\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\1\3"+
    "\1\76\4\3\1\77\23\3\1\100\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\101\1\0\2\3\1\102"+
    "\3\3\1\103\2\3\1\104\21\3\11\0\2\3\1\105"+
    "\1\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\33\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\2\3\1\106\3\3\1\107\24\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\14\3\1\110\1\3\1\111\14\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\1\112\14\3"+
    "\1\113\1\72\14\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\2\3\1\114\3\3\1\115"+
    "\5\3\1\116\16\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\117\1\0\2\3\1\120\3\3\1\121"+
    "\4\3\1\122\1\123\16\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\124\1\0\2\3\1\125\10\3"+
    "\1\126\17\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\127\1\0\33\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\2\3\1\121\11\3"+
    "\1\130\16\3\11\0\2\3\1\131\1\3\2\0\1\3"+
    "\2\0\1\132\1\3\4\0\1\3\1\0\33\3\65\0"+
    "\1\133\1\134\1\0\1\16\62\0\1\16\1\0\1\16"+
    "\65\0\1\16\63\0\1\16\2\0\1\16\61\0\1\16"+
    "\3\0\1\16\5\44\2\0\1\44\2\0\4\44\2\0"+
    "\35\44\10\0\2\44\1\135\2\44\1\136\1\0\1\44"+
    "\2\0\4\44\2\0\26\44\6\135\1\44\12\0\1\137"+
    "\43\0\6\137\12\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\3\1\0\12\3\1\72\20\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\13\3"+
    "\1\140\17\3\11\0\4\3\2\0\1\3\2\0\1\141"+
    "\1\3\4\0\1\3\1\0\33\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\4\3\1\142"+
    "\26\3\12\0\1\53\1\143\2\0\1\46\37\0\6\53"+
    "\13\0\1\55\1\144\3\0\1\144\36\0\6\55\12\0"+
    "\4\3\2\0\1\3\2\0\1\3\1\145\4\0\1\3"+
    "\1\0\33\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\3\1\0\13\3\1\146\17\3\30\0\1\60"+
    "\1\0\2\60\61\0\1\63\1\0\2\63\42\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\1\3"+
    "\1\147\31\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\3\1\0\14\3\1\150\16\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\2\3"+
    "\1\151\10\3\1\142\17\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\3\3\1\152\27\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\7\3\1\153\23\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\11\3\1\154\21\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\1\155\11\3\1\156\20\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\157\1\0\33\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\7\3\1\160\23\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\2\3\1\161\30\3\11\0"+
    "\2\3\1\162\1\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\33\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\7\3\1\163\23\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\6\3\1\164\24\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\1\3\1\165\31\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\2\3\1\146\30\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\7\3\1\166\23\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\1\167\32\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\3\1\0\1\170\32\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\14\3\1\171"+
    "\16\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\1\3\1\172\31\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\17\3\1\173"+
    "\13\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\17\3\1\174\13\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\3\3\1\175"+
    "\27\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\1\176\32\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\6\3\1\140\24\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\7\3\1\52\23\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\72\1\0\33\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\1\177"+
    "\32\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\1\200\32\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\14\3\1\201\16\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\11\3\1\202\21\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\5\3\1\203\25\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\2\3\1\204\30\3\11\0\2\3\1\205\1\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\33\3"+
    "\11\0\2\3\1\206\1\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\3\1\0\14\3\1\207\16\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\14\3"+
    "\1\210\16\3\10\0\16\133\1\0\46\133\56\134\1\211"+
    "\6\134\2\44\1\135\2\44\2\0\1\44\2\0\4\44"+
    "\2\0\26\44\6\135\1\44\12\0\1\212\43\0\6\212"+
    "\13\0\1\137\1\213\3\0\1\213\36\0\6\137\12\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\15\3\1\72\15\3\11\0\2\3\1\214\1\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\33\3\11\0"+
    "\2\3\1\72\1\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\33\3\12\0\1\212\2\0\1\136\40\0"+
    "\6\212\13\0\1\46\2\0\1\215\2\0\1\215\35\0"+
    "\6\46\12\0\4\3\2\0\1\3\2\0\2\3\1\216"+
    "\1\217\2\0\1\3\1\0\33\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\154\1\0\33\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\13\3\1\220\17\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\4\3\1\72\26\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\1\221\32\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\222\1\0\33\3\11\0\2\3\1\223\1\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\33\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\4\3\1\207\26\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\3\3\1\224\27\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\6\3\1\225\24\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\13\3\1\226\1\227"+
    "\16\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\14\3\1\230\16\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\5\3\1\231"+
    "\25\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\2\3\1\232\30\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\2\3\1\233"+
    "\30\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\7\3\1\72\23\3\11\0\2\3\1\234"+
    "\1\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\33\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\7\3\1\235\23\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\1\3\1\236"+
    "\2\3\1\237\26\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\1\3\1\240\31\3\11\0"+
    "\4\3\2\0\1\3\2\0\1\3\1\241\4\0\1\3"+
    "\1\0\33\3\11\0\2\3\1\242\1\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\27\3\1\243\3\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\6\3\1\244\24\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\17\3\1\245\13\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\14\3\1\246\16\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\13\3\1\247\17\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\12\3\1\250\20\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\1\251\32\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\22\3\1\252\10\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\2\3\1\253\30\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\7\3\1\254\23\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\20\3\1\255\12\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\23\3\1\72\7\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\10\3\1\154\22\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\7\3\1\142\23\3\10\0\55\134\1\256\1\211\6\134"+
    "\2\0\1\212\2\0\1\136\2\0\1\136\35\0\6\212"+
    "\12\0\4\3\2\0\1\3\2\0\2\3\4\0\1\207"+
    "\1\0\33\3\12\0\1\46\43\0\6\46\13\0\3\257"+
    "\2\0\1\257\14\0\2\257\1\0\1\257\4\0\1\257"+
    "\3\0\1\257\5\0\6\257\13\0\3\260\2\0\1\260"+
    "\14\0\2\260\1\0\1\260\4\0\1\260\3\0\1\260"+
    "\5\0\6\260\12\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\261\1\0\33\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\4\3\1\262\26\3"+
    "\11\0\2\3\1\263\1\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\3\1\0\33\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\1\3\1\142\16\3"+
    "\1\264\12\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\3\1\0\1\265\32\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\12\3\1\266"+
    "\20\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\1\267\32\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\3\3\1\270\27\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\6\3\1\207\24\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\10\3\1\72\22\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\1\271\32\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\4\3\1\272\26\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\12\3\1\273\20\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\274\1\0\14\3\1\275\16\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\1\3\1\276\31\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\24\3\1\72\1\277\5\3"+
    "\11\0\2\3\1\300\1\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\3\1\0\33\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\301\1\0\33\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\30\3"+
    "\1\72\2\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\266\1\0\33\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\14\3\1\227\16\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\16\3\1\302\14\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\1\3\1\303\31\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\1\3\1\304\31\3\11\0\2\3\1\305\1\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\33\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\2\3\1\306\30\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\5\3\1\210\25\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\14\3\1\47\16\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\15\3\1\307\15\3"+
    "\12\0\3\310\2\0\1\310\14\0\2\310\1\0\1\310"+
    "\4\0\1\310\3\0\1\310\5\0\6\310\13\0\3\311"+
    "\2\0\1\311\14\0\2\311\1\0\1\311\4\0\1\311"+
    "\3\0\1\311\5\0\6\311\12\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\1\312\32\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\16\3\1\313\14\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\4\3\1\150\26\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\2\3\1\314\30\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\3\3\1\154\27\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\1\3\1\72\31\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\20\3\1\72\12\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\14\3\1\315\16\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\12\3\1\316\20\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\24\3\1\72\4\3\1\72\1\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\6\3\1\317"+
    "\24\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\2\3\1\226\30\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\1\320\32\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\321"+
    "\1\0\33\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\3\1\0\26\3\1\72\4\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\3\3"+
    "\1\72\27\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\3\1\0\1\322\32\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\14\3\1\323"+
    "\16\3\11\0\2\3\1\154\1\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\33\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\14\3\1\324"+
    "\16\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\11\3\1\207\21\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\1\3\1\142"+
    "\31\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\2\3\1\72\30\3\12\0\3\325\2\0"+
    "\1\325\14\0\2\325\1\0\1\325\4\0\1\325\3\0"+
    "\1\325\5\0\6\325\13\0\3\326\2\0\1\326\14\0"+
    "\2\326\1\0\1\326\4\0\1\326\3\0\1\326\5\0"+
    "\6\326\12\0\2\3\1\327\1\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\33\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\1\3\1\316"+
    "\31\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\1\3\1\330\31\3\11\0\2\3\1\224"+
    "\1\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\33\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\3\3\1\316\27\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\13\3\1\142"+
    "\17\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\0\13\3\1\331\17\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\2\3\1\164"+
    "\30\3\11\0\2\3\1\121\1\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\33\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\0\6\3\1\332"+
    "\24\3\12\0\3\333\2\0\1\333\14\0\2\333\1\0"+
    "\1\333\4\0\1\333\3\0\1\333\5\0\6\333\13\0"+
    "\3\334\2\0\1\334\14\0\2\334\1\0\1\334\4\0"+
    "\1\334\3\0\1\334\5\0\6\334\12\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\224\1\0\33\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\11\3\1\72\21\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\0\12\3\1\335\20\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\1\72\32\3\12\0\3\336\2\0\1\336\14\0\2\336"+
    "\1\0\1\336\4\0\1\336\3\0\1\336\5\0\6\336"+
    "\13\0\3\337\2\0\1\337\14\0\2\337\1\0\1\337"+
    "\4\0\1\337\3\0\1\337\5\0\6\337\12\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\1\3"+
    "\1\340\31\3\12\0\3\341\2\0\1\341\14\0\2\341"+
    "\1\0\1\341\4\0\1\341\3\0\1\341\5\0\6\341"+
    "\13\0\3\342\2\0\1\342\14\0\2\342\1\0\1\342"+
    "\4\0\1\342\3\0\1\342\5\0\6\342\12\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\0\6\3"+
    "\1\121\24\3\12\0\3\343\2\0\1\343\14\0\2\343"+
    "\1\0\1\343\4\0\1\343\3\0\1\343\5\0\6\343"+
    "\13\0\3\344\2\0\1\344\14\0\2\344\1\0\1\344"+
    "\4\0\1\344\3\0\1\344\5\0\6\344\13\0\3\345"+
    "\2\0\1\345\14\0\2\345\1\0\1\345\4\0\1\345"+
    "\3\0\1\345\5\0\6\345\13\0\3\346\2\0\1\346"+
    "\14\0\2\346\1\0\1\346\4\0\1\346\3\0\1\346"+
    "\5\0\6\346\13\0\3\345\2\0\1\345\4\0\1\347"+
    "\7\0\2\345\1\0\1\345\4\0\1\345\3\0\1\345"+
    "\5\0\6\345\13\0\3\346\2\0\1\346\5\0\1\347"+
    "\6\0\2\346\1\0\1\346\4\0\1\346\3\0\1\346"+
    "\5\0\6\346\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11501];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\2\11\35\1\1\0\3\1\1\0"+
    "\1\1\2\0\1\1\1\0\46\1\1\0\1\1\1\0"+
    "\4\1\2\0\44\1\1\0\1\1\1\0\1\1\3\0"+
    "\36\1\1\11\2\0\27\1\2\0\13\1\2\0\4\1"+
    "\2\0\1\1\2\0\1\1\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { lexeme=yytext(); return Operador;
          }
        case 11: break;
        case 1: 
          { return ERROR;
          }
        case 12: break;
        case 8: 
          { lexeme=yytext(); return Reservadas;
          }
        case 13: break;
        case 9: 
          { lexeme=yytext(); return Units;
          }
        case 14: break;
        case 7: 
          { lexeme=yytext(); return ERROR;
          }
        case 15: break;
        case 10: 
          { lexeme=yytext(); return Transac;
          }
        case 16: break;
        case 6: 
          { return Linea;
          }
        case 17: break;
        case 3: 
          { lexeme=yytext(); return Literal;
          }
        case 18: break;
        case 5: 
          { /*Ignore*/
          }
        case 19: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 20: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
