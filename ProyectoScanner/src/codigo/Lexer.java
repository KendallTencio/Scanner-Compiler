/* The following code was generated by JFlex 1.4.3 on 18/05/20 01:30 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18/05/20 01:30 PM from the specification file
 * <tt>C:/Users/Franc/Documents/Uned Tec/tecDigital/2020 Semestre I/Compi/ProyectoScannerCompiladores/ProyectoScanner/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\50\2\0\1\4\22\0\1\4\1\0\1\10\4\0"+
    "\1\11\1\53\1\54\1\51\1\51\1\4\1\52\1\0\1\47\1\2"+
    "\1\43\1\42\1\41\1\45\1\2\1\44\1\2\1\40\1\2\3\0"+
    "\1\51\3\0\6\3\11\1\1\35\12\1\1\0\1\12\2\0\1\1"+
    "\1\0\1\17\1\22\1\27\1\20\1\6\1\32\1\34\1\5\1\30"+
    "\1\1\1\25\1\24\1\31\1\14\1\23\1\33\1\1\1\16\1\21"+
    "\1\15\1\13\1\36\1\37\1\7\1\26\1\46\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\2\1\1\20\2"+
    "\2\5\1\1\6\2\1\0\1\3\1\0\6\2\1\6"+
    "\36\2\1\4\1\0\1\6\4\2\2\0\23\2\1\6"+
    "\15\2\1\7\3\0\1\2\2\0\1\6\5\2\1\10"+
    "\7\2\1\6\1\10\16\2\2\0\13\2\1\6\13\2"+
    "\2\0\1\2\1\6\11\2\2\0\4\2\2\0\1\2"+
    "\2\0\1\2\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\55\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546"+
    "\0\u0573\0\u013b\0\55\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654"+
    "\0\u0681\0\u06ae\0\132\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f"+
    "\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7"+
    "\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f"+
    "\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7"+
    "\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f"+
    "\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97"+
    "\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff"+
    "\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167"+
    "\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf"+
    "\0\u12fc\0\u1329\0\u1356\0\132\0\u1383\0\u13b0\0\u13dd\0\u140a"+
    "\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572"+
    "\0\132\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad"+
    "\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815"+
    "\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d"+
    "\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5"+
    "\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d"+
    "\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5"+
    "\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u0e10\0\u1e96\0\u1ec3\0\u1ef0"+
    "\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058"+
    "\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0"+
    "\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\3"+
    "\1\10\2\2\1\11\1\3\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\3\3\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\3\1\26\1\27\1\30\6\4\1\3\1\31"+
    "\1\5\2\32\1\33\1\2\56\0\3\3\1\0\3\3"+
    "\3\0\34\3\10\0\1\4\35\0\6\4\13\0\1\5"+
    "\43\0\1\5\5\0\3\3\1\0\1\3\1\34\1\3"+
    "\3\0\10\3\1\35\23\3\7\0\3\3\1\0\2\3"+
    "\1\36\3\0\1\3\1\37\1\40\6\3\1\41\22\3"+
    "\7\0\7\42\1\43\1\0\1\44\34\42\1\0\1\42"+
    "\5\0\3\3\1\0\3\3\3\0\15\3\1\45\1\3"+
    "\1\46\14\3\7\0\3\3\1\0\1\47\2\3\3\0"+
    "\3\3\1\50\30\3\7\0\3\3\1\0\1\3\1\51"+
    "\1\3\3\0\34\3\7\0\3\3\1\0\3\3\3\0"+
    "\5\3\1\52\1\53\25\3\7\0\3\3\1\0\1\3"+
    "\1\54\1\3\3\0\4\3\1\55\3\3\1\53\23\3"+
    "\7\0\3\3\1\0\1\3\1\56\1\3\3\0\2\3"+
    "\1\57\5\3\1\60\22\3\1\61\7\0\3\3\1\0"+
    "\3\3\3\0\3\3\1\62\1\63\3\3\1\64\2\3"+
    "\1\65\20\3\7\0\3\3\1\0\1\3\1\66\1\3"+
    "\3\0\34\3\7\0\3\3\1\0\3\3\3\0\4\3"+
    "\1\67\3\3\1\70\23\3\7\0\3\3\1\0\3\3"+
    "\3\0\1\3\1\71\14\3\1\72\1\53\14\3\7\0"+
    "\3\3\1\0\3\3\3\0\4\3\1\73\3\3\1\74"+
    "\4\3\1\75\16\3\7\0\3\3\1\0\3\3\3\0"+
    "\1\76\2\3\1\77\1\100\3\3\1\101\4\3\1\102"+
    "\16\3\7\0\3\3\1\0\3\3\3\0\1\103\2\3"+
    "\1\104\1\105\27\3\7\0\3\3\1\0\3\3\3\0"+
    "\3\3\1\106\30\3\7\0\3\3\1\0\3\3\3\0"+
    "\4\3\1\101\10\3\1\107\16\3\7\0\3\3\1\0"+
    "\1\110\1\111\1\3\3\0\34\3\55\0\1\112\57\0"+
    "\1\113\3\0\3\3\1\0\2\3\1\114\3\0\34\3"+
    "\7\0\3\3\1\0\3\3\3\0\1\115\33\3\7\0"+
    "\3\3\1\0\3\3\3\0\14\3\1\53\17\3\7\0"+
    "\3\3\1\0\3\3\3\0\1\116\33\3\7\0\3\3"+
    "\1\0\1\117\2\3\3\0\34\3\7\0\3\3\1\0"+
    "\3\3\3\0\6\3\1\120\25\3\15\0\1\121\3\0"+
    "\1\122\3\42\37\0\3\3\1\0\3\3\3\0\1\3"+
    "\1\123\32\3\7\0\3\3\1\0\3\3\3\0\15\3"+
    "\1\124\16\3\7\0\3\3\1\0\3\3\3\0\15\3"+
    "\1\125\16\3\7\0\3\3\1\0\3\3\3\0\1\120"+
    "\3\3\1\126\27\3\7\0\3\3\1\0\3\3\3\0"+
    "\2\3\1\127\31\3\7\0\3\3\1\0\3\3\3\0"+
    "\5\3\1\130\26\3\7\0\3\3\1\0\3\3\3\0"+
    "\11\3\1\131\22\3\7\0\3\3\1\0\3\3\3\0"+
    "\13\3\1\132\20\3\7\0\3\3\1\0\3\3\3\0"+
    "\1\3\1\133\12\3\1\134\17\3\7\0\3\3\1\0"+
    "\3\3\3\0\3\3\1\135\30\3\7\0\3\3\1\0"+
    "\3\3\3\0\11\3\1\136\22\3\7\0\3\3\1\0"+
    "\3\3\3\0\4\3\1\137\27\3\7\0\3\3\1\0"+
    "\1\3\1\140\1\3\3\0\34\3\7\0\3\3\1\0"+
    "\3\3\3\0\11\3\1\141\22\3\7\0\3\3\1\0"+
    "\3\3\3\0\10\3\1\142\23\3\7\0\3\3\1\0"+
    "\3\3\3\0\2\3\1\143\31\3\7\0\3\3\1\0"+
    "\3\3\3\0\4\3\1\115\27\3\7\0\3\3\1\0"+
    "\3\3\3\0\11\3\1\144\22\3\7\0\3\3\1\0"+
    "\3\3\3\0\1\3\1\145\32\3\7\0\3\3\1\0"+
    "\3\3\3\0\2\3\1\146\31\3\7\0\3\3\1\0"+
    "\3\3\3\0\20\3\1\147\13\3\7\0\3\3\1\0"+
    "\3\3\3\0\20\3\1\150\13\3\7\0\3\3\1\0"+
    "\3\3\3\0\5\3\1\151\26\3\7\0\3\3\1\0"+
    "\3\3\3\0\1\3\1\152\32\3\7\0\3\3\1\0"+
    "\3\3\3\0\1\3\1\153\32\3\7\0\3\3\1\0"+
    "\3\3\3\0\10\3\1\116\23\3\7\0\3\3\1\0"+
    "\3\3\3\0\11\3\1\41\22\3\7\0\3\3\1\0"+
    "\3\3\3\0\3\3\1\53\30\3\7\0\3\3\1\0"+
    "\3\3\3\0\1\3\1\154\32\3\7\0\3\3\1\0"+
    "\3\3\3\0\7\3\1\155\24\3\7\0\3\3\1\0"+
    "\3\3\3\0\15\3\1\156\16\3\7\0\3\3\1\0"+
    "\3\3\3\0\13\3\1\157\20\3\7\0\3\3\1\0"+
    "\3\3\3\0\4\3\1\160\27\3\7\0\3\3\1\0"+
    "\1\3\1\161\1\3\3\0\34\3\7\0\3\3\1\0"+
    "\3\3\3\0\15\3\1\162\16\3\7\0\3\3\1\0"+
    "\1\3\1\163\1\3\3\0\15\3\1\164\16\3\6\0"+
    "\50\112\1\0\4\112\2\0\1\165\35\0\6\165\10\0"+
    "\3\3\1\0\3\3\1\166\1\167\1\0\34\3\7\0"+
    "\3\3\1\0\3\3\3\0\3\3\1\132\30\3\7\0"+
    "\3\3\1\0\3\3\3\0\16\3\1\53\15\3\7\0"+
    "\3\3\1\0\1\3\1\170\1\3\3\0\34\3\7\0"+
    "\3\3\1\0\1\3\1\53\1\3\3\0\34\3\10\0"+
    "\2\171\2\0\1\171\10\0\2\171\1\0\1\171\4\0"+
    "\1\171\2\0\1\171\5\0\6\171\11\0\2\172\2\0"+
    "\1\172\10\0\2\172\1\0\1\172\4\0\1\172\2\0"+
    "\1\172\5\0\6\172\10\0\3\3\1\0\3\3\3\0"+
    "\2\3\1\173\31\3\7\0\3\3\1\0\2\3\1\174"+
    "\3\0\34\3\7\0\3\3\1\0\3\3\3\0\6\3"+
    "\1\53\25\3\7\0\3\3\1\0\3\3\3\0\1\3"+
    "\1\175\32\3\7\0\3\3\1\0\3\3\3\0\1\176"+
    "\33\3\7\0\3\3\1\0\3\3\3\0\3\3\1\177"+
    "\30\3\7\0\3\3\1\0\1\3\1\200\1\3\3\0"+
    "\34\3\7\0\3\3\1\0\3\3\3\0\6\3\1\164"+
    "\25\3\7\0\3\3\1\0\3\3\3\0\5\3\1\201"+
    "\26\3\7\0\3\3\1\0\3\3\3\0\10\3\1\202"+
    "\23\3\7\0\3\3\1\0\3\3\3\0\1\203\14\3"+
    "\1\204\16\3\7\0\3\3\1\0\3\3\3\0\15\3"+
    "\1\205\16\3\7\0\3\3\1\0\3\3\3\0\7\3"+
    "\1\206\24\3\7\0\3\3\1\0\3\3\3\0\4\3"+
    "\1\207\27\3\7\0\3\3\1\0\3\3\3\0\4\3"+
    "\1\210\27\3\7\0\3\3\1\0\3\3\3\0\11\3"+
    "\1\53\22\3\7\0\3\3\1\0\1\3\1\211\1\3"+
    "\3\0\34\3\7\0\3\3\1\0\3\3\3\0\11\3"+
    "\1\212\22\3\7\0\3\3\1\0\3\3\3\0\2\3"+
    "\1\213\3\3\1\214\25\3\7\0\3\3\1\0\1\3"+
    "\1\215\1\3\3\0\30\3\1\216\3\3\7\0\3\3"+
    "\1\0\3\3\3\0\10\3\1\217\23\3\7\0\3\3"+
    "\1\0\3\3\3\0\20\3\1\220\13\3\7\0\3\3"+
    "\1\0\3\3\3\0\15\3\1\221\16\3\7\0\3\3"+
    "\1\0\3\3\3\0\1\222\33\3\7\0\3\3\1\0"+
    "\3\3\3\0\14\3\1\223\17\3\7\0\3\3\1\0"+
    "\3\3\3\0\1\3\1\224\32\3\7\0\3\3\1\0"+
    "\3\3\3\0\11\3\1\225\22\3\7\0\3\3\1\0"+
    "\3\3\3\0\23\3\1\226\10\3\7\0\3\3\1\0"+
    "\3\3\3\0\4\3\1\227\27\3\7\0\3\3\1\0"+
    "\3\3\3\0\21\3\1\230\12\3\7\0\3\3\1\0"+
    "\3\3\3\0\24\3\1\53\7\3\7\0\3\3\1\0"+
    "\3\3\3\0\11\3\1\120\22\3\7\0\3\3\1\0"+
    "\3\3\3\0\12\3\1\132\21\3\10\0\1\165\35\0"+
    "\6\165\6\0\1\43\2\0\2\231\2\0\1\231\10\0"+
    "\2\231\1\0\1\231\4\0\1\231\2\0\1\231\5\0"+
    "\6\231\11\0\2\232\2\0\1\232\10\0\2\232\1\0"+
    "\1\232\4\0\1\232\2\0\1\232\5\0\6\232\10\0"+
    "\3\3\1\0\3\3\3\0\3\3\1\164\30\3\10\0"+
    "\2\42\2\0\1\42\10\0\2\42\1\0\1\42\4\0"+
    "\1\42\2\0\1\42\5\0\6\42\11\0\2\121\2\0"+
    "\1\121\10\0\2\121\1\0\1\121\4\0\1\121\2\0"+
    "\1\121\5\0\6\121\10\0\3\3\1\0\3\3\3\0"+
    "\25\3\1\53\1\233\5\3\7\0\3\3\1\0\1\3"+
    "\1\234\1\3\3\0\34\3\7\0\3\3\1\0\3\3"+
    "\3\0\6\3\1\235\25\3\7\0\3\3\1\0\3\3"+
    "\3\0\3\3\1\236\30\3\7\0\3\3\1\0\1\3"+
    "\1\237\1\3\3\0\34\3\7\0\3\3\1\0\3\3"+
    "\3\0\2\3\1\120\16\3\1\240\12\3\7\0\3\3"+
    "\1\0\3\3\3\0\1\3\1\241\32\3\7\0\3\3"+
    "\1\0\3\3\3\0\14\3\1\242\17\3\7\0\3\3"+
    "\1\0\3\3\3\0\1\3\1\243\32\3\7\0\3\3"+
    "\1\0\3\3\3\0\5\3\1\244\26\3\7\0\3\3"+
    "\1\0\3\3\3\0\10\3\1\164\23\3\7\0\3\3"+
    "\1\0\3\3\3\0\12\3\1\53\21\3\7\0\3\3"+
    "\1\0\3\3\3\0\1\3\1\245\32\3\7\0\3\3"+
    "\1\0\3\3\3\0\6\3\1\246\25\3\7\0\3\3"+
    "\1\0\3\3\3\0\14\3\1\247\17\3\7\0\3\3"+
    "\1\0\3\3\3\0\3\3\1\250\11\3\1\251\16\3"+
    "\7\0\3\3\1\0\3\3\3\0\2\3\1\252\31\3"+
    "\7\0\3\3\1\0\3\3\3\0\3\3\1\253\30\3"+
    "\7\0\3\3\1\0\3\3\3\0\31\3\1\53\2\3"+
    "\7\0\3\3\1\0\3\3\3\0\3\3\1\242\30\3"+
    "\7\0\3\3\1\0\3\3\3\0\15\3\1\204\16\3"+
    "\7\0\3\3\1\0\3\3\3\0\17\3\1\254\14\3"+
    "\7\0\3\3\1\0\3\3\3\0\2\3\1\255\31\3"+
    "\7\0\3\3\1\0\3\3\3\0\2\3\1\256\31\3"+
    "\7\0\3\3\1\0\1\3\1\257\1\3\3\0\34\3"+
    "\7\0\3\3\1\0\3\3\3\0\15\3\1\36\16\3"+
    "\7\0\3\3\1\0\3\3\3\0\4\3\1\260\27\3"+
    "\7\0\3\3\1\0\3\3\3\0\7\3\1\162\24\3"+
    "\7\0\3\3\1\0\3\3\3\0\16\3\1\261\15\3"+
    "\10\0\2\262\2\0\1\262\10\0\2\262\1\0\1\262"+
    "\4\0\1\262\2\0\1\262\5\0\6\262\11\0\2\263"+
    "\2\0\1\263\10\0\2\263\1\0\1\263\4\0\1\263"+
    "\2\0\1\263\5\0\6\263\10\0\3\3\1\0\3\3"+
    "\3\0\27\3\1\53\4\3\7\0\3\3\1\0\3\3"+
    "\3\0\5\3\1\53\26\3\7\0\3\3\1\0\3\3"+
    "\3\0\17\3\1\264\14\3\7\0\3\3\1\0\3\3"+
    "\3\0\1\3\1\265\32\3\7\0\3\3\1\0\3\3"+
    "\3\0\6\3\1\125\25\3\7\0\3\3\1\0\3\3"+
    "\3\0\4\3\1\266\27\3\7\0\3\3\1\0\3\3"+
    "\3\0\5\3\1\132\26\3\7\0\3\3\1\0\3\3"+
    "\3\0\2\3\1\53\31\3\7\0\3\3\1\0\3\3"+
    "\3\0\21\3\1\53\12\3\7\0\3\3\1\0\3\3"+
    "\3\0\15\3\1\267\16\3\7\0\3\3\1\0\3\3"+
    "\3\0\14\3\1\270\17\3\7\0\3\3\1\0\3\3"+
    "\3\0\25\3\1\53\4\3\1\53\1\3\7\0\3\3"+
    "\1\0\3\3\3\0\10\3\1\271\23\3\7\0\3\3"+
    "\1\0\3\3\3\0\4\3\1\203\27\3\7\0\3\3"+
    "\1\0\3\3\3\0\1\3\1\272\32\3\7\0\3\3"+
    "\1\0\3\3\3\0\3\3\1\273\30\3\7\0\3\3"+
    "\1\0\3\3\3\0\1\3\1\274\32\3\7\0\3\3"+
    "\1\0\3\3\3\0\15\3\1\275\16\3\7\0\3\3"+
    "\1\0\1\3\1\132\1\3\3\0\34\3\7\0\3\3"+
    "\1\0\3\3\3\0\15\3\1\276\16\3\7\0\3\3"+
    "\1\0\3\3\3\0\13\3\1\164\20\3\7\0\3\3"+
    "\1\0\3\3\3\0\2\3\1\120\31\3\7\0\3\3"+
    "\1\0\3\3\3\0\4\3\1\53\27\3\10\0\2\277"+
    "\2\0\1\277\10\0\2\277\1\0\1\277\4\0\1\277"+
    "\2\0\1\277\5\0\6\277\11\0\2\300\2\0\1\300"+
    "\10\0\2\300\1\0\1\300\4\0\1\300\2\0\1\300"+
    "\5\0\6\300\10\0\3\3\1\0\1\3\1\301\1\3"+
    "\3\0\34\3\7\0\3\3\1\0\3\3\3\0\2\3"+
    "\1\270\31\3\7\0\3\3\1\0\3\3\3\0\2\3"+
    "\1\302\31\3\7\0\3\3\1\0\1\3\1\201\1\3"+
    "\3\0\34\3\7\0\3\3\1\0\3\3\3\0\5\3"+
    "\1\270\26\3\7\0\3\3\1\0\3\3\3\0\1\120"+
    "\33\3\7\0\3\3\1\0\3\3\3\0\1\303\33\3"+
    "\7\0\3\3\1\0\3\3\3\0\4\3\1\142\27\3"+
    "\7\0\3\3\1\0\1\3\1\101\1\3\3\0\34\3"+
    "\7\0\3\3\1\0\3\3\3\0\10\3\1\304\23\3"+
    "\10\0\2\305\2\0\1\305\10\0\2\305\1\0\1\305"+
    "\4\0\1\305\2\0\1\305\5\0\6\305\11\0\2\306"+
    "\2\0\1\306\10\0\2\306\1\0\1\306\4\0\1\306"+
    "\2\0\1\306\5\0\6\306\10\0\3\3\1\0\3\3"+
    "\3\0\3\3\1\201\30\3\7\0\3\3\1\0\3\3"+
    "\3\0\13\3\1\53\20\3\7\0\3\3\1\0\3\3"+
    "\3\0\14\3\1\307\17\3\7\0\3\3\1\0\3\3"+
    "\3\0\1\3\1\53\32\3\10\0\2\310\2\0\1\310"+
    "\10\0\2\310\1\0\1\310\4\0\1\310\2\0\1\310"+
    "\5\0\6\310\11\0\2\311\2\0\1\311\10\0\2\311"+
    "\1\0\1\311\4\0\1\311\2\0\1\311\5\0\6\311"+
    "\10\0\3\3\1\0\3\3\3\0\2\3\1\312\31\3"+
    "\10\0\2\313\2\0\1\313\10\0\2\313\1\0\1\313"+
    "\4\0\1\313\2\0\1\313\5\0\6\313\11\0\2\314"+
    "\2\0\1\314\10\0\2\314\1\0\1\314\4\0\1\314"+
    "\2\0\1\314\5\0\6\314\10\0\3\3\1\0\3\3"+
    "\3\0\10\3\1\101\23\3\10\0\2\315\2\0\1\315"+
    "\10\0\2\315\1\0\1\315\4\0\1\315\2\0\1\315"+
    "\5\0\6\315\11\0\2\316\2\0\1\316\10\0\2\316"+
    "\1\0\1\316\4\0\1\316\2\0\1\316\5\0\6\316"+
    "\11\0\2\317\2\0\1\317\10\0\2\317\1\0\1\317"+
    "\4\0\1\317\2\0\1\317\5\0\6\317\11\0\2\320"+
    "\2\0\1\320\10\0\2\320\1\0\1\320\4\0\1\320"+
    "\2\0\1\320\5\0\6\320\11\0\2\317\2\0\1\317"+
    "\1\0\1\43\6\0\2\317\1\0\1\317\4\0\1\317"+
    "\2\0\1\317\5\0\6\317\11\0\2\320\2\0\1\320"+
    "\2\0\1\43\5\0\2\320\1\0\1\320\4\0\1\320"+
    "\2\0\1\320\5\0\6\320\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9045];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\11\7\1\1\0\1\11\1\0"+
    "\46\1\1\0\5\1\2\0\42\1\3\0\1\1\2\0"+
    "\36\1\2\0\27\1\2\0\13\1\2\0\4\1\2\0"+
    "\1\1\2\0\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { /*Ignore*/
          }
        case 9: break;
        case 5: 
          { return Operador;
          }
        case 10: break;
        case 8: 
          { return Transac;
          }
        case 11: break;
        case 6: 
          { lexeme=yytext(); return Reservadas;
          }
        case 12: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 13: break;
        case 1: 
          { return ERROR;
          }
        case 14: break;
        case 7: 
          { return Units;
          }
        case 15: break;
        case 3: 
          { lexeme=yytext(); return Literal;
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
