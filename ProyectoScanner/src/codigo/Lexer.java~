/* The following code was generated by JFlex 1.4.3 on 5/17/20 7:18 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/17/20 7:18 PM from the specification file
 * <tt>C:/Users/kenda/Desktop/Archivos/TEC/V Semestre/Compiladores e Interpretes/Proyecto/1/Code/ProyectoScannerCompiladores/ProyectoScanner/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\44\2\0\1\4\22\0\1\4\1\45\1\55\2\0"+
    "\1\50\1\47\1\56\1\50\1\50\1\53\1\45\1\4\1\54\1\50"+
    "\1\43\1\2\1\37\1\36\1\35\1\41\1\2\1\40\1\2\1\34"+
    "\1\2\1\50\1\50\1\51\1\46\1\52\1\50\1\0\17\1\1\31"+
    "\12\1\1\50\1\0\1\50\1\50\1\1\1\0\1\5\1\11\1\17"+
    "\1\6\1\3\1\24\1\30\1\25\1\22\1\1\1\14\1\13\1\23"+
    "\1\20\1\12\1\27\1\1\1\7\1\10\1\16\1\21\1\32\1\33"+
    "\1\26\1\15\1\42\1\50\1\50\1\50\1\50\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\4\21\2\10\5"+
    "\2\1\1\2\1\0\5\2\1\6\45\2\1\4\1\0"+
    "\1\3\2\0\1\3\1\0\27\2\1\6\14\2\1\7"+
    "\6\2\1\10\6\2\1\6\1\2\1\10\2\2\1\6"+
    "\25\2\1\6\17\2\1\6\17\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u0468\0\u0497\0\57\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa"+
    "\0\136\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb"+
    "\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33"+
    "\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab"+
    "\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0582"+
    "\0\57\0\u0e23\0\u0e52\0\u0e81\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e"+
    "\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086"+
    "\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe"+
    "\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376"+
    "\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee"+
    "\0\u151d\0\136\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637"+
    "\0\136\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780"+
    "\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8"+
    "\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70"+
    "\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8"+
    "\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60"+
    "\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8"+
    "\0\u1f07\0\u1f36\0\u11fe\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021"+
    "\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199"+
    "\0\u21c8\0\u21f7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\3\3\1\14\1\15\1\16\1\3\1\17"+
    "\1\20\1\21\1\22\1\23\1\3\1\24\1\3\1\25"+
    "\1\26\1\27\6\4\1\3\1\30\1\6\2\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\60\0"+
    "\3\3\1\42\36\3\1\0\1\42\14\0\1\4\1\43"+
    "\30\0\6\4\16\0\3\3\1\42\6\3\1\44\2\3"+
    "\1\45\1\3\1\46\5\3\1\47\14\3\1\0\1\42"+
    "\13\0\1\3\1\0\1\3\1\6\27\3\6\0\1\3"+
    "\1\0\1\6\13\0\3\3\1\42\1\3\1\50\1\3"+
    "\1\51\32\3\1\0\1\42\13\0\2\3\1\52\1\42"+
    "\1\53\4\3\1\51\30\3\1\0\1\42\13\0\2\3"+
    "\1\54\1\42\36\3\1\0\1\42\13\0\2\3\1\55"+
    "\1\42\5\3\1\56\3\3\1\57\23\3\1\60\1\0"+
    "\1\42\13\0\3\3\1\42\1\61\1\3\1\62\2\3"+
    "\1\63\2\3\1\64\25\3\1\0\1\42\13\0\2\3"+
    "\1\65\1\42\36\3\1\0\1\42\13\0\3\3\1\42"+
    "\2\3\1\66\15\3\1\67\15\3\1\0\1\42\13\0"+
    "\3\3\1\42\1\70\4\3\1\71\30\3\1\0\1\42"+
    "\13\0\3\3\1\42\15\3\1\72\1\3\1\73\16\3"+
    "\1\0\1\42\13\0\3\3\1\42\13\3\1\74\2\3"+
    "\1\75\1\51\16\3\1\0\1\42\13\0\3\3\1\42"+
    "\1\76\4\3\1\77\7\3\1\100\20\3\1\0\1\42"+
    "\13\0\3\3\1\42\1\101\1\3\1\102\2\3\1\103"+
    "\6\3\1\104\1\105\20\3\1\0\1\42\13\0\2\3"+
    "\1\106\1\42\5\3\1\107\30\3\1\0\1\42\13\0"+
    "\3\3\1\42\1\110\1\3\1\111\11\3\1\112\21\3"+
    "\1\0\1\42\13\0\3\3\1\42\2\3\1\113\33\3"+
    "\1\0\1\42\13\0\3\3\1\42\1\103\14\3\1\114"+
    "\20\3\1\0\1\42\13\0\2\3\1\115\1\42\20\3"+
    "\1\116\15\3\1\0\1\42\55\0\1\117\2\0\1\33"+
    "\56\0\1\33\57\0\1\33\55\0\1\33\2\0\1\33"+
    "\53\0\1\33\3\0\1\33\52\0\1\33\4\0\1\33"+
    "\5\0\1\4\31\0\6\4\4\0\1\33\11\0\42\120"+
    "\1\0\1\120\10\0\1\121\2\0\1\122\1\123\1\122"+
    "\1\0\27\122\6\123\1\122\20\0\1\42\37\0\1\42"+
    "\14\0\1\124\31\0\6\124\12\0\1\125\3\0\3\3"+
    "\1\42\3\3\1\126\32\3\1\0\1\42\13\0\3\3"+
    "\1\42\20\3\1\127\15\3\1\0\1\42\13\0\3\3"+
    "\1\42\14\3\1\130\21\3\1\0\1\42\13\0\3\3"+
    "\1\42\12\3\1\51\23\3\1\0\1\42\13\0\3\3"+
    "\1\42\1\3\1\131\34\3\1\0\1\42\13\0\3\3"+
    "\1\42\6\3\1\132\27\3\1\0\1\42\13\0\3\3"+
    "\1\42\10\3\1\133\25\3\1\0\1\42\13\0\3\3"+
    "\1\42\11\3\1\134\24\3\1\0\1\42\13\0\3\3"+
    "\1\42\12\3\1\135\1\136\22\3\1\0\1\42\13\0"+
    "\3\3\1\42\6\3\1\137\27\3\1\0\1\42\13\0"+
    "\3\3\1\42\2\3\1\140\33\3\1\0\1\42\13\0"+
    "\3\3\1\42\1\141\35\3\1\0\1\42\13\0\3\3"+
    "\1\42\6\3\1\142\27\3\1\0\1\42\13\0\2\3"+
    "\1\143\1\42\36\3\1\0\1\42\13\0\3\3\1\42"+
    "\5\3\1\144\30\3\1\0\1\42\13\0\3\3\1\42"+
    "\11\3\1\145\24\3\1\0\1\42\13\0\3\3\1\42"+
    "\1\146\35\3\1\0\1\42\13\0\3\3\1\42\1\147"+
    "\13\3\1\126\21\3\1\0\1\42\13\0\3\3\1\42"+
    "\15\3\1\150\20\3\1\0\1\42\13\0\3\3\1\42"+
    "\6\3\1\151\27\3\1\0\1\42\13\0\3\3\1\42"+
    "\13\3\1\152\22\3\1\0\1\42\13\0\3\3\1\42"+
    "\13\3\1\153\22\3\1\0\1\42\13\0\3\3\1\42"+
    "\15\3\1\154\20\3\1\0\1\42\13\0\3\3\1\42"+
    "\11\3\1\155\24\3\1\0\1\42\13\0\3\3\1\42"+
    "\22\3\1\156\13\3\1\0\1\42\13\0\3\3\1\42"+
    "\22\3\1\157\13\3\1\0\1\42\13\0\3\3\1\42"+
    "\1\3\1\160\34\3\1\0\1\42\13\0\3\3\1\42"+
    "\13\3\1\161\22\3\1\0\1\42\13\0\3\3\1\42"+
    "\6\3\1\44\27\3\1\0\1\42\13\0\3\3\1\42"+
    "\5\3\1\130\30\3\1\0\1\42\13\0\3\3\1\42"+
    "\2\3\1\51\33\3\1\0\1\42\13\0\3\3\1\42"+
    "\13\3\1\162\22\3\1\0\1\42\13\0\3\3\1\42"+
    "\13\3\1\163\22\3\1\0\1\42\13\0\3\3\1\42"+
    "\21\3\1\51\14\3\1\0\1\42\13\0\3\3\1\42"+
    "\14\3\1\146\21\3\1\0\1\42\13\0\3\3\1\42"+
    "\10\3\1\164\25\3\1\0\1\42\13\0\3\3\1\42"+
    "\15\3\1\165\20\3\1\0\1\42\13\0\3\3\1\42"+
    "\4\3\1\166\31\3\1\0\1\42\13\0\3\3\1\42"+
    "\1\167\35\3\1\0\1\42\13\0\2\3\1\170\1\42"+
    "\36\3\1\0\1\42\13\0\2\3\1\171\1\42\15\3"+
    "\1\172\20\3\1\0\1\42\13\0\3\3\1\42\15\3"+
    "\1\173\20\3\1\0\1\42\12\0\44\117\1\0\12\117"+
    "\1\0\1\122\1\0\1\122\1\0\27\122\6\0\1\122"+
    "\13\0\1\121\2\0\1\123\31\0\6\123\14\0\1\121"+
    "\2\0\1\124\31\0\6\124\16\0\2\3\1\51\1\42"+
    "\36\3\1\0\1\42\13\0\2\3\1\174\1\42\36\3"+
    "\1\0\1\42\13\0\3\3\1\42\16\3\1\51\17\3"+
    "\1\0\1\42\13\0\3\3\1\42\2\3\1\175\33\3"+
    "\1\0\1\42\13\0\2\3\1\176\1\42\36\3\1\0"+
    "\1\42\13\0\3\3\1\42\3\3\1\172\32\3\1\0"+
    "\1\42\13\0\3\3\1\42\14\3\1\177\21\3\1\0"+
    "\1\42\13\0\3\3\1\42\5\3\1\200\30\3\1\0"+
    "\1\42\13\0\3\3\1\42\1\3\1\201\34\3\1\0"+
    "\1\42\13\0\3\3\1\42\15\3\1\202\20\3\1\0"+
    "\1\42\13\0\3\3\1\42\14\3\1\203\1\204\20\3"+
    "\1\0\1\42\13\0\3\3\1\42\4\3\1\205\31\3"+
    "\1\0\1\42\13\0\3\3\1\42\1\206\35\3\1\0"+
    "\1\42\13\0\3\3\1\42\1\207\35\3\1\0\1\42"+
    "\13\0\3\3\1\42\6\3\1\51\27\3\1\0\1\42"+
    "\13\0\2\3\1\210\1\42\36\3\1\0\1\42\13\0"+
    "\3\3\1\42\2\3\1\133\33\3\1\0\1\42\13\0"+
    "\3\3\1\42\13\3\1\211\22\3\1\0\1\42\13\0"+
    "\3\3\1\42\3\3\1\51\32\3\1\0\1\42\13\0"+
    "\3\3\1\42\6\3\1\212\27\3\1\0\1\42\13\0"+
    "\3\3\1\42\3\3\1\213\5\3\1\214\24\3\1\0"+
    "\1\42\13\0\3\3\1\42\11\3\1\215\24\3\1\0"+
    "\1\42\13\0\3\3\1\42\21\3\1\216\14\3\1\0"+
    "\1\42\13\0\2\3\1\217\1\42\32\3\1\220\3\3"+
    "\1\0\1\42\13\0\3\3\1\42\5\3\1\221\30\3"+
    "\1\0\1\42\13\0\3\3\1\42\22\3\1\222\13\3"+
    "\1\0\1\42\13\0\3\3\1\42\15\3\1\223\20\3"+
    "\1\0\1\42\13\0\3\3\1\42\14\3\1\224\21\3"+
    "\1\0\1\42\13\0\3\3\1\42\12\3\1\225\23\3"+
    "\1\0\1\42\13\0\3\3\1\42\13\3\1\226\22\3"+
    "\1\0\1\42\13\0\3\3\1\42\1\227\35\3\1\0"+
    "\1\42\13\0\3\3\1\42\25\3\1\230\10\3\1\0"+
    "\1\42\13\0\3\3\1\42\6\3\1\231\27\3\1\0"+
    "\1\42\13\0\3\3\1\42\23\3\1\232\12\3\1\0"+
    "\1\42\13\0\3\3\1\42\26\3\1\51\7\3\1\0"+
    "\1\42\13\0\3\3\1\42\7\3\1\133\26\3\1\0"+
    "\1\42\13\0\3\3\1\42\6\3\1\126\27\3\1\0"+
    "\1\42\13\0\3\3\1\42\2\3\1\172\33\3\1\0"+
    "\1\42\13\0\2\3\1\233\1\42\36\3\1\0\1\42"+
    "\13\0\3\3\1\42\11\3\1\126\11\3\1\234\12\3"+
    "\1\0\1\42\13\0\3\3\1\42\2\3\1\235\33\3"+
    "\1\0\1\42\13\0\3\3\1\42\13\3\1\236\22\3"+
    "\1\0\1\42\13\0\3\3\1\42\1\3\1\237\34\3"+
    "\1\0\1\42\13\0\3\3\1\42\12\3\1\240\23\3"+
    "\1\0\1\42\13\0\3\3\1\42\13\3\1\241\22\3"+
    "\1\0\1\42\13\0\3\3\1\42\5\3\1\172\30\3"+
    "\1\0\1\42\13\0\3\3\1\42\13\3\1\242\22\3"+
    "\1\0\1\42\13\0\3\3\1\42\7\3\1\51\26\3"+
    "\1\0\1\42\13\0\3\3\1\42\3\3\1\243\32\3"+
    "\1\0\1\42\13\0\3\3\1\42\3\3\1\244\32\3"+
    "\1\0\1\42\13\0\3\3\1\42\12\3\1\245\23\3"+
    "\1\0\1\42\13\0\3\3\1\42\11\3\1\246\24\3"+
    "\1\0\1\42\13\0\3\3\1\42\2\3\1\247\12\3"+
    "\1\250\20\3\1\0\1\42\13\0\3\3\1\42\27\3"+
    "\1\51\1\251\5\3\1\0\1\42\13\0\2\3\1\252"+
    "\1\42\36\3\1\0\1\42\13\0\3\3\1\42\2\3"+
    "\1\253\33\3\1\0\1\42\13\0\3\3\1\42\33\3"+
    "\1\51\2\3\1\0\1\42\13\0\3\3\1\42\2\3"+
    "\1\240\33\3\1\0\1\42\13\0\3\3\1\42\15\3"+
    "\1\204\20\3\1\0\1\42\13\0\3\3\1\42\17\3"+
    "\1\254\16\3\1\0\1\42\13\0\3\3\1\42\11\3"+
    "\1\255\24\3\1\0\1\42\13\0\3\3\1\42\11\3"+
    "\1\256\24\3\1\0\1\42\13\0\2\3\1\257\1\42"+
    "\36\3\1\0\1\42\13\0\3\3\1\42\4\3\1\173"+
    "\31\3\1\0\1\42\13\0\3\3\1\42\1\260\35\3"+
    "\1\0\1\42\13\0\3\3\1\42\15\3\1\47\20\3"+
    "\1\0\1\42\13\0\3\3\1\42\16\3\1\261\17\3"+
    "\1\0\1\42\13\0\3\3\1\42\3\3\1\150\32\3"+
    "\1\0\1\42\13\0\3\3\1\42\1\262\35\3\1\0"+
    "\1\42\13\0\3\3\1\42\13\3\1\263\22\3\1\0"+
    "\1\42\13\0\3\3\1\42\1\3\1\133\34\3\1\0"+
    "\1\42\13\0\3\3\1\42\15\3\1\264\20\3\1\0"+
    "\1\42\13\0\3\3\1\42\11\3\1\51\24\3\1\0"+
    "\1\42\13\0\3\3\1\42\23\3\1\51\12\3\1\0"+
    "\1\42\13\0\3\3\1\42\12\3\1\265\23\3\1\0"+
    "\1\42\13\0\3\3\1\42\27\3\1\51\4\3\1\51"+
    "\1\3\1\0\1\42\13\0\3\3\1\42\17\3\1\266"+
    "\16\3\1\0\1\42\13\0\3\3\1\42\5\3\1\267"+
    "\30\3\1\0\1\42\13\0\3\3\1\42\2\3\1\270"+
    "\33\3\1\0\1\42\13\0\3\3\1\42\1\203\35\3"+
    "\1\0\1\42\13\0\3\3\1\42\13\3\1\271\22\3"+
    "\1\0\1\42\13\0\3\3\1\42\31\3\1\51\4\3"+
    "\1\0\1\42\13\0\3\3\1\42\1\3\1\51\34\3"+
    "\1\0\1\42\13\0\3\3\1\42\13\3\1\272\22\3"+
    "\1\0\1\42\13\0\3\3\1\42\15\3\1\273\20\3"+
    "\1\0\1\42\13\0\2\3\1\133\1\42\36\3\1\0"+
    "\1\42\13\0\3\3\1\42\15\3\1\274\20\3\1\0"+
    "\1\42\13\0\3\3\1\42\10\3\1\172\25\3\1\0"+
    "\1\42\13\0\3\3\1\42\11\3\1\126\24\3\1\0"+
    "\1\42\13\0\3\3\1\42\1\51\35\3\1\0\1\42"+
    "\13\0\3\3\1\42\11\3\1\265\24\3\1\0\1\42"+
    "\13\0\3\3\1\42\11\3\1\275\24\3\1\0\1\42"+
    "\13\0\2\3\1\201\1\42\36\3\1\0\1\42\13\0"+
    "\2\3\1\276\1\42\36\3\1\0\1\42\13\0\3\3"+
    "\1\42\1\3\1\265\34\3\1\0\1\42\13\0\3\3"+
    "\1\42\14\3\1\277\21\3\1\0\1\42\13\0\3\3"+
    "\1\42\14\3\1\126\21\3\1\0\1\42\13\0\3\3"+
    "\1\42\1\144\35\3\1\0\1\42\13\0\2\3\1\103"+
    "\1\42\36\3\1\0\1\42\13\0\3\3\1\42\5\3"+
    "\1\300\30\3\1\0\1\42\13\0\3\3\1\42\10\3"+
    "\1\51\25\3\1\0\1\42\13\0\3\3\1\42\2\3"+
    "\1\201\33\3\1\0\1\42\13\0\3\3\1\42\12\3"+
    "\1\301\23\3\1\0\1\42\13\0\3\3\1\42\13\3"+
    "\1\51\22\3\1\0\1\42\13\0\3\3\1\42\11\3"+
    "\1\302\24\3\1\0\1\42\13\0\3\3\1\42\5\3"+
    "\1\103\30\3\1\0\1\42\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8742];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\1\11\7\1\1\0\54\1\1\0"+
    "\1\11\2\0\1\1\1\0\155\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { /*Ignore*/
          }
        case 9: break;
        case 5: 
          { return Operador;
          }
        case 10: break;
        case 8: 
          { return Transac;
          }
        case 11: break;
        case 6: 
          { lexeme=yytext(); return Reservadas;
          }
        case 12: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 13: break;
        case 1: 
          { return ERROR;
          }
        case 14: break;
        case 7: 
          { return Units;
          }
        case 15: break;
        case 3: 
          { lexeme=yytext(); return Literal;
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
