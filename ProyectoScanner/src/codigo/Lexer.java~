/* The following code was generated by JFlex 1.4.3 on 5/22/20 10:05 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/22/20 10:05 PM from the specification file
 * <tt>C:/Users/kenda/Desktop/Archivos/TEC/V Semestre/Compiladores e Interpretes/Proyecto/1/Code/ProyectoScannerCompiladores/ProyectoScanner/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\16\2\0\1\11\22\0\1\11\1\61\1\14\2\0"+
    "\1\64\1\63\1\15\1\64\1\64\1\60\1\10\1\11\1\5\1\6"+
    "\1\57\1\53\1\46\1\50\1\52\1\51\1\54\1\47\1\55\1\45"+
    "\1\2\1\64\1\64\1\65\1\62\1\66\1\64\1\0\4\4\1\7"+
    "\1\4\11\1\1\42\12\1\1\64\1\17\1\64\1\64\1\1\1\0"+
    "\1\24\1\27\1\34\1\25\1\3\1\37\1\41\1\12\1\35\1\1"+
    "\1\32\1\31\1\36\1\21\1\30\1\40\1\1\1\23\1\26\1\22"+
    "\1\20\1\43\1\44\1\13\1\33\1\56\1\64\1\64\1\64\1\64"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\3\3\5\1\6\1\3"+
    "\2\2\1\7\20\3\6\5\2\1\1\4\3\3\1\4"+
    "\1\0\1\4\2\3\1\0\1\4\3\0\6\3\1\10"+
    "\36\3\1\6\1\0\1\4\1\0\1\4\3\3\2\0"+
    "\1\10\1\3\2\0\23\3\1\10\14\3\1\11\1\3"+
    "\2\0\1\3\5\0\1\10\5\3\1\12\7\3\1\10"+
    "\1\12\4\3\1\10\17\3\1\6\2\0\12\3\1\10"+
    "\14\3\2\0\1\3\1\10\3\3\2\10\6\3\2\0"+
    "\4\3\2\0\1\3\2\0\1\3\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\67\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672"+
    "\0\67\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u014a\0\u0898\0\u08cf\0\u0906\0\u0226\0\67"+
    "\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe"+
    "\0\u0af5\0\156\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    "\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8"+
    "\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0"+
    "\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658"+
    "\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810"+
    "\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8"+
    "\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\156\0\u1b49"+
    "\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01"+
    "\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\156\0\u1e82"+
    "\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a"+
    "\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2"+
    "\0\u214d\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373"+
    "\0\u23aa\0\u23e1\0\u2418\0\u244f\0\67\0\u2486\0\u24bd\0\u24f4"+
    "\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac"+
    "\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864"+
    "\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c"+
    "\0\u2a53\0\u14d7\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d"+
    "\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55"+
    "\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d"+
    "\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\3"+
    "\1\10\1\11\1\12\1\3\1\13\1\14\1\15\1\2"+
    "\1\16\1\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\3\3\1\25\1\26\1\27\1\30\1\31\1\32\1\3"+
    "\1\33\1\34\1\35\11\4\1\3\1\36\1\37\2\10"+
    "\1\40\1\41\1\42\1\43\70\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\37\3\11\0\1\44\1\4\1\45"+
    "\1\44\1\0\1\46\1\44\2\0\2\44\4\0\25\44"+
    "\11\4\1\44\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\3\1\47\1\50\6\3\1\51\25\3\12\0"+
    "\1\52\3\0\1\53\36\0\11\52\4\0\1\41\6\0"+
    "\1\54\42\0\11\54\73\0\1\41\15\0\1\11\56\0"+
    "\2\3\1\55\1\3\2\0\1\3\2\0\2\3\4\0"+
    "\10\3\1\56\26\3\11\0\4\57\2\0\1\57\1\0"+
    "\3\57\1\60\2\0\1\61\37\57\11\0\1\62\1\63"+
    "\2\62\2\0\1\62\2\0\2\62\4\0\25\62\11\63"+
    "\1\62\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\15\3\1\64\1\3\1\65\17\3\11\0\4\3\2\0"+
    "\1\3\2\0\1\66\1\3\4\0\3\3\1\67\33\3"+
    "\11\0\2\3\1\70\1\3\2\0\1\3\2\0\2\3"+
    "\4\0\37\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\5\3\1\71\1\72\30\3\11\0\2\3\1\73"+
    "\1\3\2\0\1\3\2\0\2\3\4\0\4\3\1\74"+
    "\3\3\1\72\26\3\11\0\2\3\1\75\1\3\2\0"+
    "\1\3\2\0\2\3\4\0\2\3\1\76\5\3\1\77"+
    "\25\3\1\100\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\3\3\1\101\1\102\3\3\1\103\2\3\1\104"+
    "\23\3\11\0\2\3\1\105\1\3\2\0\1\3\2\0"+
    "\2\3\4\0\37\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\4\3\1\106\3\3\1\107\26\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\110"+
    "\14\3\1\111\1\72\17\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\4\3\1\112\3\3\1\113\4\3"+
    "\1\114\21\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\115\2\3\1\116\1\117\3\3\1\120\4\3"+
    "\1\121\21\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\122\2\3\1\123\1\124\32\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\3\3\1\125\33\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\4\3"+
    "\1\120\10\3\1\126\21\3\11\0\2\3\1\127\1\3"+
    "\2\0\1\3\2\0\1\130\1\3\4\0\37\3\67\0"+
    "\1\131\1\132\1\0\1\41\64\0\1\41\1\0\1\41"+
    "\67\0\1\41\65\0\1\41\2\0\1\41\63\0\1\41"+
    "\3\0\1\41\1\0\1\44\1\0\2\44\2\0\1\44"+
    "\2\0\2\44\4\0\25\44\11\0\1\44\11\0\1\44"+
    "\1\133\2\44\1\134\1\0\1\44\2\0\2\44\4\0"+
    "\25\44\11\133\1\44\12\0\1\135\42\0\11\135\12\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\136\36\3"+
    "\11\0\4\3\2\0\1\3\2\0\1\137\1\3\4\0"+
    "\37\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\6\3\1\140\30\3\12\0\1\52\1\141\2\0\1\46"+
    "\36\0\11\52\13\0\1\54\1\142\3\0\1\142\35\0"+
    "\11\54\12\0\4\3\2\0\1\3\2\0\1\3\1\143"+
    "\4\0\37\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\144\36\3\23\0\1\145\4\0\1\146\3\57"+
    "\44\0\1\62\1\0\2\62\2\0\1\62\2\0\2\62"+
    "\1\0\1\60\2\0\25\62\11\0\1\62\12\0\1\63"+
    "\12\0\1\60\27\0\11\63\12\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\147\35\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\15\3\1\150\21\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\15\3"+
    "\1\151\21\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\140\3\3\1\152\32\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\2\3\1\153\34\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\5\3\1\154"+
    "\31\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\11\3\1\155\25\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\13\3\1\156\23\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\157\12\3\1\160"+
    "\22\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\3\3\1\161\33\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\11\3\1\162\25\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\4\3\1\163\32\3\11\0"+
    "\2\3\1\164\1\3\2\0\1\3\2\0\2\3\4\0"+
    "\37\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\11\3\1\165\25\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\10\3\1\166\26\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\2\3\1\167\34\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\4\3\1\144"+
    "\32\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\11\3\1\170\25\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\171\35\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\2\3\1\172\34\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\20\3\1\173"+
    "\16\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\20\3\1\174\16\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\5\3\1\175\31\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\176\35\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\177"+
    "\35\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\10\3\1\136\26\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\11\3\1\51\25\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\3\3\1\72\33\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\200"+
    "\35\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\7\3\1\201\27\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\15\3\1\202\21\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\13\3\1\203\23\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\4\3\1\204"+
    "\32\3\11\0\2\3\1\205\1\3\2\0\1\3\2\0"+
    "\2\3\4\0\37\3\11\0\2\3\1\206\1\3\2\0"+
    "\1\3\2\0\2\3\4\0\15\3\1\207\21\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\15\3\1\210"+
    "\21\3\10\0\16\131\1\0\50\131\1\0\4\132\2\0"+
    "\1\132\1\0\3\132\2\0\1\132\1\0\37\132\1\0"+
    "\1\211\10\0\1\133\42\0\11\133\13\0\1\135\1\212"+
    "\3\0\1\212\35\0\11\135\12\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\16\3\1\72\20\3\11\0\2\3"+
    "\1\213\1\3\2\0\1\3\2\0\2\3\4\0\37\3"+
    "\11\0\2\3\1\72\1\3\2\0\1\3\2\0\2\3"+
    "\4\0\37\3\12\0\1\133\2\0\1\134\37\0\11\133"+
    "\13\0\1\46\2\0\1\214\2\0\1\214\34\0\11\46"+
    "\12\0\4\3\2\0\1\3\2\0\2\3\1\215\1\216"+
    "\2\0\37\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\3\3\1\156\33\3\12\0\3\217\2\0\1\217"+
    "\14\0\2\217\1\0\1\217\4\0\1\217\2\0\1\217"+
    "\5\0\11\217\13\0\3\220\2\0\1\220\14\0\2\220"+
    "\1\0\1\220\4\0\1\220\2\0\1\220\5\0\11\220"+
    "\12\0\4\3\2\0\1\3\2\0\2\3\4\0\2\3"+
    "\1\221\34\3\11\0\4\3\2\0\1\3\2\0\1\3"+
    "\1\222\4\0\37\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\6\3\1\72\30\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\223\35\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\224\36\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\3\3"+
    "\1\225\33\3\11\0\2\3\1\226\1\3\2\0\1\3"+
    "\2\0\2\3\4\0\37\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\6\3\1\207\30\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\5\3\1\227\31\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\10\3"+
    "\1\230\26\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\231\14\3\1\232\21\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\15\3\1\233\21\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\7\3\1\234"+
    "\27\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\4\3\1\235\32\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\4\3\1\236\32\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\11\3\1\72\25\3\11\0"+
    "\2\3\1\237\1\3\2\0\1\3\2\0\2\3\4\0"+
    "\37\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\11\3\1\240\25\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\2\3\1\241\3\3\1\242\30\3\11\0"+
    "\1\3\1\243\1\244\1\3\2\0\1\3\2\0\2\3"+
    "\4\0\25\3\1\245\1\246\1\247\1\250\1\251\1\252"+
    "\1\3\1\243\1\252\1\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\10\3\1\253\26\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\20\3\1\254\16\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\15\3"+
    "\1\255\21\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\1\256\36\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\14\3\1\257\22\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\260\35\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\11\3\1\261"+
    "\25\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\23\3\1\262\13\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\4\3\1\263\32\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\21\3\1\264\15\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\24\3\1\72"+
    "\12\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\12\3\1\156\24\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\11\3\1\140\25\3\67\0\1\265\11\0"+
    "\1\133\2\0\1\134\2\0\1\134\34\0\11\133\12\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\3\3\1\207"+
    "\33\3\12\0\1\46\42\0\11\46\13\0\3\266\2\0"+
    "\1\266\14\0\2\266\1\0\1\266\4\0\1\266\2\0"+
    "\1\266\5\0\11\266\13\0\3\267\2\0\1\267\14\0"+
    "\2\267\1\0\1\267\4\0\1\267\2\0\1\267\5\0"+
    "\11\267\13\0\3\57\2\0\1\57\14\0\2\57\1\0"+
    "\1\57\4\0\1\57\2\0\1\57\5\0\11\57\13\0"+
    "\3\145\2\0\1\145\14\0\2\145\1\0\1\145\4\0"+
    "\1\145\2\0\1\145\5\0\11\145\12\0\1\3\1\243"+
    "\2\3\2\0\1\3\2\0\2\3\4\0\25\3\1\245"+
    "\1\246\1\247\1\250\1\251\1\252\1\3\1\243\1\252"+
    "\1\3\11\0\2\3\1\270\1\3\2\0\1\3\2\0"+
    "\2\3\4\0\37\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\6\3\1\271\30\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\3\3\1\272\33\3\11\0"+
    "\2\3\1\273\1\3\2\0\1\3\2\0\2\3\4\0"+
    "\37\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\2\3\1\140\16\3\1\274\15\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\275\35\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\14\3\1\276"+
    "\22\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\277\35\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\5\3\1\300\31\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\10\3\1\207\26\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\12\3\1\72"+
    "\24\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\301\35\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\6\3\1\302\30\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\14\3\1\303\22\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\3\3\1\304"+
    "\11\3\1\305\21\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\2\3\1\306\34\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\27\3\1\72\7\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\3\3\1\307"+
    "\33\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\25\3\1\72\5\3\1\72\3\3\11\0\1\3\1\252"+
    "\2\3\2\0\1\3\2\0\2\3\4\0\25\3\1\247"+
    "\1\252\1\245\1\251\1\247\1\243\1\247\1\252\1\243"+
    "\1\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\31\3\1\72\5\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\26\3\1\243\1\3\1\247\1\245\1\252"+
    "\1\251\1\243\2\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\30\3\1\72\6\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\3\3\1\276\33\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\15\3\1\232"+
    "\21\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\17\3\1\310\17\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\2\3\1\311\34\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\2\3\1\312\34\3\11\0"+
    "\2\3\1\313\1\3\2\0\1\3\2\0\2\3\4\0"+
    "\37\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\15\3\1\314\21\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\4\3\1\315\32\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\7\3\1\210\27\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\16\3\1\316"+
    "\20\3\12\0\3\317\2\0\1\317\14\0\2\317\1\0"+
    "\1\317\4\0\1\317\2\0\1\317\5\0\11\317\13\0"+
    "\3\320\2\0\1\320\14\0\2\320\1\0\1\320\4\0"+
    "\1\320\2\0\1\320\5\0\11\320\12\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\5\3\1\72\31\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\17\3\1\321"+
    "\17\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\322\35\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\6\3\1\151\30\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\4\3\1\323\32\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\5\3\1\156"+
    "\31\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\2\3\1\72\34\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\21\3\1\72\15\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\15\3\1\324\21\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\14\3\1\325"+
    "\22\3\11\0\1\3\1\72\2\3\2\0\1\3\2\0"+
    "\2\3\4\0\25\3\1\72\1\326\1\72\1\326\1\72"+
    "\1\327\1\3\2\72\1\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\10\3\1\330\26\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\4\3\1\231\32\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\331\35\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\3\3\1\332\33\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\333\35\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\15\3\1\334\21\3"+
    "\11\0\2\3\1\156\1\3\2\0\1\3\2\0\2\3"+
    "\4\0\37\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\15\3\1\335\21\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\13\3\1\207\23\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\14\3\1\72\22\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\2\3"+
    "\1\140\34\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\4\3\1\72\32\3\12\0\3\336\2\0\1\336"+
    "\14\0\2\336\1\0\1\336\4\0\1\336\2\0\1\336"+
    "\5\0\11\336\13\0\3\337\2\0\1\337\14\0\2\337"+
    "\1\0\1\337\4\0\1\337\2\0\1\337\5\0\11\337"+
    "\12\0\2\3\1\340\1\3\2\0\1\3\2\0\2\3"+
    "\4\0\37\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\2\3\1\325\34\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\2\3\1\341\34\3\11\0\2\3"+
    "\1\227\1\3\2\0\1\3\2\0\2\3\4\0\37\3"+
    "\11\0\1\3\1\72\2\3\2\0\1\3\2\0\2\3"+
    "\4\0\25\3\11\72\1\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\26\3\1\72\1\3\1\72\2\3"+
    "\1\72\3\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\5\3\1\325\31\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\140\36\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\342\36\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\4\3\1\166\32\3"+
    "\11\0\2\3\1\120\1\3\2\0\1\3\2\0\2\3"+
    "\4\0\37\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\10\3\1\343\26\3\12\0\3\344\2\0\1\344"+
    "\14\0\2\344\1\0\1\344\4\0\1\344\2\0\1\344"+
    "\5\0\11\344\13\0\3\345\2\0\1\345\14\0\2\345"+
    "\1\0\1\345\4\0\1\345\2\0\1\345\5\0\11\345"+
    "\12\0\4\3\2\0\1\3\2\0\2\3\4\0\3\3"+
    "\1\227\33\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\13\3\1\72\23\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\14\3\1\346\22\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\72\35\3"+
    "\12\0\3\347\2\0\1\347\14\0\2\347\1\0\1\347"+
    "\4\0\1\347\2\0\1\347\5\0\11\347\13\0\3\350"+
    "\2\0\1\350\14\0\2\350\1\0\1\350\4\0\1\350"+
    "\2\0\1\350\5\0\11\350\12\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\2\3\1\351\34\3\12\0\3\352"+
    "\2\0\1\352\14\0\2\352\1\0\1\352\4\0\1\352"+
    "\2\0\1\352\5\0\11\352\13\0\3\353\2\0\1\353"+
    "\14\0\2\353\1\0\1\353\4\0\1\353\2\0\1\353"+
    "\5\0\11\353\12\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\10\3\1\120\26\3\12\0\3\354\2\0\1\354"+
    "\14\0\2\354\1\0\1\354\4\0\1\354\2\0\1\354"+
    "\5\0\11\354\13\0\3\355\2\0\1\355\14\0\2\355"+
    "\1\0\1\355\4\0\1\355\2\0\1\355\5\0\11\355"+
    "\13\0\3\356\2\0\1\356\14\0\2\356\1\0\1\356"+
    "\4\0\1\356\2\0\1\356\5\0\11\356\13\0\3\357"+
    "\2\0\1\357\14\0\2\357\1\0\1\357\4\0\1\357"+
    "\2\0\1\357\5\0\11\357\13\0\3\356\2\0\1\356"+
    "\4\0\1\60\7\0\2\356\1\0\1\356\4\0\1\356"+
    "\2\0\1\356\5\0\11\356\13\0\3\357\2\0\1\357"+
    "\5\0\1\60\6\0\2\357\1\0\1\357\4\0\1\357"+
    "\2\0\1\357\5\0\11\357\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12485];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\12\1\1\11\23\1\1\11\11\1\1\0"+
    "\3\1\1\0\1\11\3\0\46\1\1\0\1\1\1\0"+
    "\4\1\2\0\2\1\2\0\42\1\2\0\1\1\5\0"+
    "\44\1\1\11\2\0\27\1\2\0\15\1\2\0\4\1"+
    "\2\0\1\1\2\0\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { lexeme=yytext(); return Operador;
          }
        case 11: break;
        case 2: 
          { return ERROR;
          }
        case 12: break;
        case 1: 
          { return ErrorIdentificador;
          }
        case 13: break;
        case 8: 
          { lexeme=yytext(); return Reservadas;
          }
        case 14: break;
        case 9: 
          { lexeme=yytext(); return Units;
          }
        case 15: break;
        case 10: 
          { lexeme=yytext(); return Transac;
          }
        case 16: break;
        case 7: 
          { return Linea;
          }
        case 17: break;
        case 4: 
          { lexeme=yytext(); return Literal;
          }
        case 18: break;
        case 6: 
          { /*Ignore*/
          }
        case 19: break;
        case 3: 
          { lexeme=yytext(); return Identificador;
          }
        case 20: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
