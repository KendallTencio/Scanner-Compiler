/* The following code was generated by JFlex 1.4.3 on 5/19/20 10:47 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/19/20 10:47 PM from the specification file
 * <tt>C:/Users/kenda/Desktop/Archivos/TEC/V Semestre/Compiladores e Interpretes/Proyecto/1/Code/ProyectoScannerCompiladores/ProyectoScanner/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\16\2\0\1\11\22\0\1\11\1\56\1\14\2\0"+
    "\1\61\1\60\1\15\1\61\1\61\1\55\1\10\1\11\1\5\1\6"+
    "\1\54\1\2\1\50\1\47\1\46\1\52\1\2\1\51\1\2\1\45"+
    "\1\2\1\61\1\61\1\62\1\57\1\63\1\61\1\0\4\4\1\7"+
    "\1\4\11\1\1\42\12\1\1\61\1\17\1\61\1\61\1\1\1\0"+
    "\1\24\1\27\1\34\1\25\1\3\1\37\1\41\1\12\1\35\1\1"+
    "\1\32\1\31\1\36\1\21\1\30\1\40\1\1\1\23\1\26\1\22"+
    "\1\20\1\43\1\44\1\13\1\33\1\53\1\61\1\61\1\61\1\61"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\3\4\1\5\1\2"+
    "\2\1\1\6\20\2\6\4\1\0\1\3\4\2\1\0"+
    "\1\3\2\2\1\0\1\3\3\0\6\2\1\7\36\2"+
    "\1\5\1\0\1\3\1\0\1\3\3\2\1\0\1\7"+
    "\1\2\2\0\23\2\1\7\14\2\1\10\1\2\2\0"+
    "\1\2\5\0\1\7\5\2\1\11\7\2\1\7\1\11"+
    "\16\2\1\5\2\0\13\2\1\7\13\2\2\0\1\2"+
    "\1\7\11\2\2\0\4\2\2\0\1\2\2\0\1\2"+
    "\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\64\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618"+
    "\0\64\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\u0138\0\u07ec\0\u0820\0\u0854\0\u0208\0\64\0\u0888"+
    "\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\150\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074"+
    "\0\u10a8\0\u10dc\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0"+
    "\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380"+
    "\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520"+
    "\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0"+
    "\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860"+
    "\0\u1894\0\u18c8\0\u18fc\0\u1930\0\150\0\u1964\0\u1998\0\u19cc"+
    "\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c"+
    "\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\150\0\u1c70\0\u1ca4\0\u1cd8"+
    "\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78"+
    "\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018"+
    "\0\u204c\0\u2080\0\u20b4\0\u20e8\0\64\0\u211c\0\u2150\0\u2184"+
    "\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324"+
    "\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4"+
    "\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664"+
    "\0\u2698\0\u134c\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0"+
    "\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970"+
    "\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10"+
    "\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\3"+
    "\1\10\1\11\1\12\1\3\1\13\1\14\1\15\1\2"+
    "\1\16\1\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\3\3\1\25\1\26\1\27\1\30\1\31\1\32\1\3"+
    "\1\33\1\34\1\35\6\4\1\3\1\36\1\37\2\10"+
    "\1\40\1\41\1\42\1\43\65\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\34\3\12\0\1\4\1\44\2\0"+
    "\1\45\36\0\6\4\12\0\4\3\2\0\1\3\2\0"+
    "\1\3\1\46\4\0\1\3\1\47\1\50\6\3\1\51"+
    "\22\3\12\0\1\4\3\0\1\52\36\0\6\4\4\0"+
    "\1\41\6\0\1\53\42\0\6\53\70\0\1\41\15\0"+
    "\1\11\53\0\2\3\1\54\1\3\2\0\1\3\2\0"+
    "\2\3\4\0\10\3\1\55\23\3\11\0\4\56\2\0"+
    "\1\56\1\0\3\56\1\57\2\0\1\60\34\56\11\0"+
    "\1\61\1\62\2\61\2\0\1\61\2\0\2\61\4\0"+
    "\25\61\6\62\1\61\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\15\3\1\63\1\3\1\64\14\3\11\0"+
    "\4\3\2\0\1\3\2\0\1\65\1\3\4\0\3\3"+
    "\1\66\30\3\11\0\2\3\1\67\1\3\2\0\1\3"+
    "\2\0\2\3\4\0\34\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\5\3\1\70\1\71\25\3\11\0"+
    "\2\3\1\72\1\3\2\0\1\3\2\0\2\3\4\0"+
    "\4\3\1\73\3\3\1\71\23\3\11\0\2\3\1\74"+
    "\1\3\2\0\1\3\2\0\2\3\4\0\2\3\1\75"+
    "\5\3\1\76\22\3\1\77\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\3\3\1\100\1\101\3\3\1\102"+
    "\2\3\1\103\20\3\11\0\2\3\1\104\1\3\2\0"+
    "\1\3\2\0\2\3\4\0\34\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\4\3\1\105\3\3\1\106"+
    "\23\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\107\14\3\1\110\1\71\14\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\4\3\1\111\3\3"+
    "\1\112\4\3\1\113\16\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\114\2\3\1\115\1\116\3\3"+
    "\1\117\4\3\1\120\16\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\121\2\3\1\122\1\123\27\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\3\3"+
    "\1\124\30\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\4\3\1\117\10\3\1\125\16\3\11\0\2\3"+
    "\1\126\1\3\2\0\1\3\2\0\1\127\1\3\4\0"+
    "\34\3\64\0\1\130\1\131\1\0\1\41\61\0\1\41"+
    "\1\0\1\41\64\0\1\41\62\0\1\41\2\0\1\41"+
    "\60\0\1\41\3\0\1\41\2\0\1\132\2\0\1\133"+
    "\37\0\6\132\13\0\1\134\42\0\6\134\12\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\14\3\1\71\17\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\135"+
    "\33\3\11\0\4\3\2\0\1\3\2\0\1\136\1\3"+
    "\4\0\34\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\6\3\1\137\25\3\12\0\1\53\1\140\3\0"+
    "\1\140\35\0\6\53\12\0\4\3\2\0\1\3\2\0"+
    "\1\3\1\141\4\0\34\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\142\33\3\23\0\1\143\4\0"+
    "\1\144\3\56\41\0\1\61\1\0\2\61\2\0\1\61"+
    "\2\0\2\61\1\0\1\57\2\0\25\61\6\0\1\61"+
    "\12\0\1\62\12\0\1\57\27\0\6\62\12\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\145\32\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\15\3"+
    "\1\146\16\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\15\3\1\147\16\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\137\3\3\1\150\27\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\2\3\1\151"+
    "\31\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\5\3\1\152\26\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\11\3\1\153\22\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\13\3\1\154\20\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\155"+
    "\12\3\1\156\17\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\3\3\1\157\30\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\11\3\1\160\22\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\4\3\1\161"+
    "\27\3\11\0\2\3\1\162\1\3\2\0\1\3\2\0"+
    "\2\3\4\0\34\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\11\3\1\163\22\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\10\3\1\164\23\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\2\3\1\165"+
    "\31\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\4\3\1\142\27\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\11\3\1\166\22\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\167\32\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\2\3\1\170"+
    "\31\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\20\3\1\171\13\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\20\3\1\172\13\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\5\3\1\173\26\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\174"+
    "\32\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\175\32\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\10\3\1\135\23\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\11\3\1\51\22\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\3\3\1\71"+
    "\30\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\176\32\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\7\3\1\177\24\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\15\3\1\200\16\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\13\3\1\201"+
    "\20\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\4\3\1\202\27\3\11\0\2\3\1\203\1\3\2\0"+
    "\1\3\2\0\2\3\4\0\34\3\11\0\2\3\1\204"+
    "\1\3\2\0\1\3\2\0\2\3\4\0\15\3\1\205"+
    "\16\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\15\3\1\206\16\3\10\0\16\130\1\0\45\130\1\0"+
    "\4\131\2\0\1\131\1\0\3\131\4\0\34\131\1\0"+
    "\1\207\10\0\1\132\42\0\6\132\13\0\1\134\1\210"+
    "\3\0\1\210\35\0\6\134\12\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\16\3\1\71\15\3\11\0\2\3"+
    "\1\211\1\3\2\0\1\3\2\0\2\3\4\0\34\3"+
    "\11\0\2\3\1\71\1\3\2\0\1\3\2\0\2\3"+
    "\4\0\34\3\12\0\1\45\2\0\1\212\2\0\1\212"+
    "\34\0\6\45\12\0\4\3\2\0\1\3\2\0\2\3"+
    "\1\213\1\214\2\0\34\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\3\3\1\154\30\3\12\0\3\215"+
    "\2\0\1\215\14\0\2\215\1\0\1\215\4\0\1\215"+
    "\2\0\1\215\5\0\6\215\13\0\3\216\2\0\1\216"+
    "\14\0\2\216\1\0\1\216\4\0\1\216\2\0\1\216"+
    "\5\0\6\216\12\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\2\3\1\217\31\3\11\0\4\3\2\0\1\3"+
    "\2\0\1\3\1\220\4\0\34\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\6\3\1\71\25\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\221"+
    "\32\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\222\33\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\3\3\1\223\30\3\11\0\2\3\1\224\1\3"+
    "\2\0\1\3\2\0\2\3\4\0\34\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\6\3\1\205\25\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\5\3"+
    "\1\225\26\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\10\3\1\226\23\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\1\227\14\3\1\230\16\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\15\3\1\231"+
    "\16\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\7\3\1\232\24\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\4\3\1\233\27\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\4\3\1\234\27\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\11\3\1\71"+
    "\22\3\11\0\2\3\1\235\1\3\2\0\1\3\2\0"+
    "\2\3\4\0\34\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\11\3\1\236\22\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\2\3\1\237\3\3\1\240"+
    "\25\3\11\0\2\3\1\241\1\3\2\0\1\3\2\0"+
    "\2\3\4\0\30\3\1\242\3\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\10\3\1\243\23\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\20\3\1\244"+
    "\13\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\15\3\1\245\16\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\246\33\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\14\3\1\247\17\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\1\3\1\250\32\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\11\3"+
    "\1\251\22\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\23\3\1\252\10\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\4\3\1\253\27\3\11\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\21\3\1\254\12\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\24\3"+
    "\1\71\7\3\11\0\4\3\2\0\1\3\2\0\2\3"+
    "\4\0\12\3\1\154\21\3\11\0\4\3\2\0\1\3"+
    "\2\0\2\3\4\0\11\3\1\137\22\3\64\0\1\255"+
    "\11\0\1\132\2\0\1\133\2\0\1\133\34\0\6\132"+
    "\12\0\4\3\2\0\1\3\2\0\2\3\4\0\3\3"+
    "\1\205\30\3\12\0\1\45\42\0\6\45\13\0\3\256"+
    "\2\0\1\256\14\0\2\256\1\0\1\256\4\0\1\256"+
    "\2\0\1\256\5\0\6\256\13\0\3\257\2\0\1\257"+
    "\14\0\2\257\1\0\1\257\4\0\1\257\2\0\1\257"+
    "\5\0\6\257\13\0\3\56\2\0\1\56\14\0\2\56"+
    "\1\0\1\56\4\0\1\56\2\0\1\56\5\0\6\56"+
    "\13\0\3\143\2\0\1\143\14\0\2\143\1\0\1\143"+
    "\4\0\1\143\2\0\1\143\5\0\6\143\12\0\4\3"+
    "\2\0\1\3\2\0\2\3\4\0\25\3\1\71\1\260"+
    "\5\3\11\0\2\3\1\261\1\3\2\0\1\3\2\0"+
    "\2\3\4\0\34\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\6\3\1\262\25\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\3\3\1\263\30\3\11\0"+
    "\2\3\1\264\1\3\2\0\1\3\2\0\2\3\4\0"+
    "\34\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\2\3\1\137\16\3\1\265\12\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\1\3\1\266\32\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\14\3\1\267"+
    "\17\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\270\32\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\5\3\1\271\26\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\10\3\1\205\23\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\12\3\1\71"+
    "\21\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\272\32\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\6\3\1\273\25\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\14\3\1\274\17\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\3\3\1\275"+
    "\11\3\1\276\16\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\2\3\1\277\31\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\3\3\1\300\30\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\31\3\1\71"+
    "\2\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\3\3\1\267\30\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\15\3\1\230\16\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\17\3\1\301\14\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\2\3\1\302"+
    "\31\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\2\3\1\303\31\3\11\0\2\3\1\304\1\3\2\0"+
    "\1\3\2\0\2\3\4\0\34\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\15\3\1\46\16\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\4\3\1\305"+
    "\27\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\7\3\1\206\24\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\16\3\1\306\15\3\12\0\3\307\2\0"+
    "\1\307\14\0\2\307\1\0\1\307\4\0\1\307\2\0"+
    "\1\307\5\0\6\307\13\0\3\310\2\0\1\310\14\0"+
    "\2\310\1\0\1\310\4\0\1\310\2\0\1\310\5\0"+
    "\6\310\12\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\27\3\1\71\4\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\5\3\1\71\26\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\17\3\1\311\14\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\312"+
    "\32\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\6\3\1\147\25\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\4\3\1\313\27\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\5\3\1\154\26\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\2\3\1\71"+
    "\31\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\21\3\1\71\12\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\15\3\1\314\16\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\14\3\1\315\17\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\25\3\1\71"+
    "\4\3\1\71\1\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\10\3\1\316\23\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\4\3\1\227\27\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\3\1\317"+
    "\32\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\3\3\1\320\30\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\1\3\1\321\32\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\15\3\1\322\16\3\11\0"+
    "\2\3\1\154\1\3\2\0\1\3\2\0\2\3\4\0"+
    "\34\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\15\3\1\323\16\3\11\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\13\3\1\205\20\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\2\3\1\137\31\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\4\3\1\71"+
    "\27\3\12\0\3\324\2\0\1\324\14\0\2\324\1\0"+
    "\1\324\4\0\1\324\2\0\1\324\5\0\6\324\13\0"+
    "\3\325\2\0\1\325\14\0\2\325\1\0\1\325\4\0"+
    "\1\325\2\0\1\325\5\0\6\325\12\0\2\3\1\326"+
    "\1\3\2\0\1\3\2\0\2\3\4\0\34\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\2\3\1\315"+
    "\31\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\2\3\1\327\31\3\11\0\2\3\1\225\1\3\2\0"+
    "\1\3\2\0\2\3\4\0\34\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\5\3\1\315\26\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\1\137\33\3"+
    "\11\0\4\3\2\0\1\3\2\0\2\3\4\0\1\330"+
    "\33\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\4\3\1\164\27\3\11\0\2\3\1\117\1\3\2\0"+
    "\1\3\2\0\2\3\4\0\34\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\10\3\1\331\23\3\12\0"+
    "\3\332\2\0\1\332\14\0\2\332\1\0\1\332\4\0"+
    "\1\332\2\0\1\332\5\0\6\332\13\0\3\333\2\0"+
    "\1\333\14\0\2\333\1\0\1\333\4\0\1\333\2\0"+
    "\1\333\5\0\6\333\12\0\4\3\2\0\1\3\2\0"+
    "\2\3\4\0\3\3\1\225\30\3\11\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\13\3\1\71\20\3\11\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\14\3\1\334"+
    "\17\3\11\0\4\3\2\0\1\3\2\0\2\3\4\0"+
    "\1\3\1\71\32\3\12\0\3\335\2\0\1\335\14\0"+
    "\2\335\1\0\1\335\4\0\1\335\2\0\1\335\5\0"+
    "\6\335\13\0\3\336\2\0\1\336\14\0\2\336\1\0"+
    "\1\336\4\0\1\336\2\0\1\336\5\0\6\336\12\0"+
    "\4\3\2\0\1\3\2\0\2\3\4\0\2\3\1\337"+
    "\31\3\12\0\3\340\2\0\1\340\14\0\2\340\1\0"+
    "\1\340\4\0\1\340\2\0\1\340\5\0\6\340\13\0"+
    "\3\341\2\0\1\341\14\0\2\341\1\0\1\341\4\0"+
    "\1\341\2\0\1\341\5\0\6\341\12\0\4\3\2\0"+
    "\1\3\2\0\2\3\4\0\10\3\1\117\23\3\12\0"+
    "\3\342\2\0\1\342\14\0\2\342\1\0\1\342\4\0"+
    "\1\342\2\0\1\342\5\0\6\342\13\0\3\343\2\0"+
    "\1\343\14\0\2\343\1\0\1\343\4\0\1\343\2\0"+
    "\1\343\5\0\6\343\13\0\3\344\2\0\1\344\14\0"+
    "\2\344\1\0\1\344\4\0\1\344\2\0\1\344\5\0"+
    "\6\344\13\0\3\345\2\0\1\345\14\0\2\345\1\0"+
    "\1\345\4\0\1\345\2\0\1\345\5\0\6\345\13\0"+
    "\3\344\2\0\1\344\4\0\1\57\7\0\2\344\1\0"+
    "\1\344\4\0\1\344\2\0\1\344\5\0\6\344\13\0"+
    "\3\345\2\0\1\345\5\0\1\57\6\0\2\345\1\0"+
    "\1\345\4\0\1\345\2\0\1\345\5\0\6\345\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11336];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\23\1\1\11\2\1\1\0"+
    "\5\1\1\0\3\1\1\0\1\11\3\0\46\1\1\0"+
    "\1\1\1\0\4\1\1\0\2\1\2\0\42\1\2\0"+
    "\1\1\5\0\36\1\1\11\2\0\27\1\2\0\13\1"+
    "\2\0\4\1\2\0\1\1\2\0\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { lexeme=yytext(); return Operador;
          }
        case 10: break;
        case 1: 
          { return ERROR;
          }
        case 11: break;
        case 7: 
          { lexeme=yytext(); return Reservadas;
          }
        case 12: break;
        case 8: 
          { lexeme=yytext(); return Units;
          }
        case 13: break;
        case 9: 
          { lexeme=yytext(); return Transac;
          }
        case 14: break;
        case 6: 
          { return Linea;
          }
        case 15: break;
        case 3: 
          { lexeme=yytext(); return Literal;
          }
        case 16: break;
        case 5: 
          { /*Ignore*/
          }
        case 17: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 18: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
